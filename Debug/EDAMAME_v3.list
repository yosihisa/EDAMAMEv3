
EDAMAME_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b28  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002f60  08002f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002f68  08002f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002f6c  08002f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08002f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000574  20000010  08002f80  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000584  08002f80  00020584  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018c4c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000033ce  00000000  00000000  00038c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007745  00000000  00000000  0003c058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009d8  00000000  00000000  000437a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000eb0  00000000  00000000  00044178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000617d  00000000  00000000  00045028  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000451e  00000000  00000000  0004b1a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004f6c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001af4  00000000  00000000  0004f740  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08002d08 	.word	0x08002d08

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08002d08 	.word	0x08002d08

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_InitTick+0x3c>)
{
 800054c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_InitTick+0x40>)
 8000550:	7818      	ldrb	r0, [r3, #0]
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f0 	udiv	r3, r3, r0
 800055a:	6810      	ldr	r0, [r2, #0]
 800055c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000560:	f000 f890 	bl	8000684 <HAL_SYSTICK_Config>
 8000564:	4604      	mov	r4, r0
 8000566:	b958      	cbnz	r0, 8000580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000568:	2d0f      	cmp	r5, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	4602      	mov	r2, r0
 800056e:	4629      	mov	r1, r5
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 f84e 	bl	8000614 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_InitTick+0x44>)
 800057a:	4620      	mov	r0, r4
 800057c:	601d      	str	r5, [r3, #0]
 800057e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	2000000c 	.word	0x2000000c
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_Init>:
{
 8000590:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000592:	2003      	movs	r0, #3
 8000594:	f000 f82c 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ffd5 	bl	8000548 <HAL_InitTick>
  HAL_MspInit();
 800059e:	f002 fa9f 	bl	8002ae0 <HAL_MspInit>
}
 80005a2:	2000      	movs	r0, #0
 80005a4:	bd08      	pop	{r3, pc}
	...

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000040 	.word	0x20000040
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000040 	.word	0x20000040

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b538      	push	{r3, r4, r5, lr}
 80005ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff fff6 	bl	80005c0 <HAL_GetTick>
 80005d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005d8:	bf1e      	ittt	ne
 80005da:	4b04      	ldrne	r3, [pc, #16]	; (80005ec <HAL_Delay+0x20>)
 80005dc:	781b      	ldrbne	r3, [r3, #0]
 80005de:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e0:	f7ff ffee 	bl	80005c0 <HAL_GetTick>
 80005e4:	1b40      	subs	r0, r0, r5
 80005e6:	4284      	cmp	r4, r0
 80005e8:	d8fa      	bhi.n	80005e0 <HAL_Delay+0x14>
  {
  }
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20000000 	.word	0x20000000

080005f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005f2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005fe:	041b      	lsls	r3, r3, #16
 8000600:	0c1b      	lsrs	r3, r3, #16
 8000602:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800060a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800060c:	60d3      	str	r3, [r2, #12]
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000616:	b530      	push	{r4, r5, lr}
 8000618:	68dc      	ldr	r4, [r3, #12]
 800061a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	2b04      	cmp	r3, #4
 8000626:	bf28      	it	cs
 8000628:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000630:	bf8c      	ite	hi
 8000632:	3c03      	subhi	r4, #3
 8000634:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000636:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800063a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000640:	ea01 0103 	and.w	r1, r1, r3
 8000644:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000648:	fa05 f404 	lsl.w	r4, r5, r4
 800064c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000650:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	ea42 0201 	orr.w	r2, r2, r1
 8000658:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 800065c:	da05      	bge.n	800066a <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	f000 000f 	and.w	r0, r0, #15
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_NVIC_SetPriority+0x6c>)
 8000666:	541a      	strb	r2, [r3, r0]
 8000668:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000674:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	e000ed14 	.word	0xe000ed14

08000684 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000684:	3801      	subs	r0, #1
 8000686:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800068a:	d20a      	bcs.n	80006a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	21f0      	movs	r1, #240	; 0xf0
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000692:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000694:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e010 	.word	0xe000e010
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006b2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	bf0c      	ite	eq
 80006b8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006bc:	f022 0204 	bicne.w	r2, r2, #4
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	4770      	bx	lr
 80006c4:	e000e010 	.word	0xe000e010

080006c8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006c8:	4770      	bx	lr

080006ca <HAL_SYSTICK_IRQHandler>:
{
 80006ca:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006cc:	f7ff fffc 	bl	80006c8 <HAL_SYSTICK_Callback>
 80006d0:	bd08      	pop	{r3, pc}

080006d2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80006d2:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80006d4:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80006d8:	2c01      	cmp	r4, #1
 80006da:	d035      	beq.n	8000748 <HAL_DMA_Start_IT+0x76>
 80006dc:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80006de:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80006e0:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 80006e2:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80006e6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80006ea:	2c01      	cmp	r4, #1
 80006ec:	f04f 0402 	mov.w	r4, #2
 80006f0:	d128      	bne.n	8000744 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80006f2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80006f6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006f8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80006fa:	6825      	ldr	r5, [r4, #0]
 80006fc:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000700:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000702:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000704:	6883      	ldr	r3, [r0, #8]
 8000706:	2b40      	cmp	r3, #64	; 0x40
 8000708:	d119      	bne.n	800073e <HAL_DMA_Start_IT+0x6c>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800070a:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800070c:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800070e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000710:	233f      	movs	r3, #63	; 0x3f
 8000712:	4093      	lsls	r3, r2
 8000714:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000716:	6823      	ldr	r3, [r4, #0]
 8000718:	f043 0316 	orr.w	r3, r3, #22
 800071c:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800071e:	6963      	ldr	r3, [r4, #20]
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000726:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000728:	b11b      	cbz	r3, 8000732 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800072a:	6823      	ldr	r3, [r4, #0]
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000732:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000734:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000736:	f043 0301 	orr.w	r3, r3, #1
 800073a:	6023      	str	r3, [r4, #0]
 800073c:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800073e:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000740:	60e2      	str	r2, [r4, #12]
 8000742:	e7e4      	b.n	800070e <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000744:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000748:	2002      	movs	r0, #2
}
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800074c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800074e:	4770      	bx	lr

08000750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000754:	680b      	ldr	r3, [r1, #0]
{
 8000756:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000758:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800091c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800075e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000760:	4a6c      	ldr	r2, [pc, #432]	; (8000914 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000762:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000920 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000766:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800076a:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 800076c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000770:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000774:	45b6      	cmp	lr, r6
 8000776:	f040 80b3 	bne.w	80008e0 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800077a:	684c      	ldr	r4, [r1, #4]
 800077c:	f024 0710 	bic.w	r7, r4, #16
 8000780:	2f02      	cmp	r7, #2
 8000782:	d116      	bne.n	80007b2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000784:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000788:	f003 0b07 	and.w	fp, r3, #7
 800078c:	f04f 0c0f 	mov.w	ip, #15
 8000790:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000794:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000798:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800079c:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007a0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007a4:	690d      	ldr	r5, [r1, #16]
 80007a6:	fa05 f50b 	lsl.w	r5, r5, fp
 80007aa:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80007ae:	f8ca 5020 	str.w	r5, [sl, #32]
 80007b2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007b6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007b8:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007bc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007c0:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007c6:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007ca:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007cc:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007ce:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007d2:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 80007d6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007da:	d811      	bhi.n	8000800 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80007dc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80007de:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80007e2:	68cf      	ldr	r7, [r1, #12]
 80007e4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007e8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007ec:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007ee:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007f0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007f4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007f8:	409f      	lsls	r7, r3
 80007fa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007fe:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000800:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000802:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000804:	688f      	ldr	r7, [r1, #8]
 8000806:	fa07 f70a 	lsl.w	r7, r7, sl
 800080a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800080c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800080e:	00e5      	lsls	r5, r4, #3
 8000810:	d566      	bpl.n	80008e0 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000816:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800081a:	f003 0e03 	and.w	lr, r3, #3
 800081e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000826:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800082a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000832:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000836:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800083a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800083e:	9503      	str	r5, [sp, #12]
 8000840:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000842:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000846:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800084a:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800084e:	4d32      	ldr	r5, [pc, #200]	; (8000918 <HAL_GPIO_Init+0x1c8>)
 8000850:	42a8      	cmp	r0, r5
 8000852:	d04c      	beq.n	80008ee <HAL_GPIO_Init+0x19e>
 8000854:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000858:	42a8      	cmp	r0, r5
 800085a:	d04a      	beq.n	80008f2 <HAL_GPIO_Init+0x1a2>
 800085c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000860:	42a8      	cmp	r0, r5
 8000862:	d048      	beq.n	80008f6 <HAL_GPIO_Init+0x1a6>
 8000864:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000868:	42a8      	cmp	r0, r5
 800086a:	d046      	beq.n	80008fa <HAL_GPIO_Init+0x1aa>
 800086c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000870:	42a8      	cmp	r0, r5
 8000872:	d044      	beq.n	80008fe <HAL_GPIO_Init+0x1ae>
 8000874:	4548      	cmp	r0, r9
 8000876:	d044      	beq.n	8000902 <HAL_GPIO_Init+0x1b2>
 8000878:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800087c:	42a8      	cmp	r0, r5
 800087e:	d042      	beq.n	8000906 <HAL_GPIO_Init+0x1b6>
 8000880:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000884:	42a8      	cmp	r0, r5
 8000886:	d040      	beq.n	800090a <HAL_GPIO_Init+0x1ba>
 8000888:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800088c:	42a8      	cmp	r0, r5
 800088e:	d03e      	beq.n	800090e <HAL_GPIO_Init+0x1be>
 8000890:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000894:	42a8      	cmp	r0, r5
 8000896:	bf14      	ite	ne
 8000898:	250a      	movne	r5, #10
 800089a:	2509      	moveq	r5, #9
 800089c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008a0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008a4:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80008a8:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80008aa:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 80008ae:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80008b0:	bf0c      	ite	eq
 80008b2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008b4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008b6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80008ba:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80008bc:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80008be:	bf0c      	ite	eq
 80008c0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008c2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008c4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80008c8:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80008ca:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80008cc:	bf0c      	ite	eq
 80008ce:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008d0:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008d2:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80008d4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80008d6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80008d8:	bf54      	ite	pl
 80008da:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008dc:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008de:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80008e0:	3301      	adds	r3, #1
 80008e2:	2b10      	cmp	r3, #16
 80008e4:	f47f af3f 	bne.w	8000766 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008e8:	b005      	add	sp, #20
 80008ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008ee:	2500      	movs	r5, #0
 80008f0:	e7d4      	b.n	800089c <HAL_GPIO_Init+0x14c>
 80008f2:	2501      	movs	r5, #1
 80008f4:	e7d2      	b.n	800089c <HAL_GPIO_Init+0x14c>
 80008f6:	2502      	movs	r5, #2
 80008f8:	e7d0      	b.n	800089c <HAL_GPIO_Init+0x14c>
 80008fa:	2503      	movs	r5, #3
 80008fc:	e7ce      	b.n	800089c <HAL_GPIO_Init+0x14c>
 80008fe:	2504      	movs	r5, #4
 8000900:	e7cc      	b.n	800089c <HAL_GPIO_Init+0x14c>
 8000902:	2505      	movs	r5, #5
 8000904:	e7ca      	b.n	800089c <HAL_GPIO_Init+0x14c>
 8000906:	2506      	movs	r5, #6
 8000908:	e7c8      	b.n	800089c <HAL_GPIO_Init+0x14c>
 800090a:	2507      	movs	r5, #7
 800090c:	e7c6      	b.n	800089c <HAL_GPIO_Init+0x14c>
 800090e:	2508      	movs	r5, #8
 8000910:	e7c4      	b.n	800089c <HAL_GPIO_Init+0x14c>
 8000912:	bf00      	nop
 8000914:	40013c00 	.word	0x40013c00
 8000918:	40020000 	.word	0x40020000
 800091c:	40023800 	.word	0x40023800
 8000920:	40021400 	.word	0x40021400

08000924 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension) 
  * @retval HAL status
  */   
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{  
 8000924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000926:	f100 0e10 	add.w	lr, r0, #16
 800092a:	4607      	mov	r7, r0
  uint32_t i, p, l, code, si;
   
  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800092c:	2500      	movs	r5, #0
  for (l = 0; l < 16; l++) 
  {
    i = (uint32_t)Bits[l];
 800092e:	f817 4b01 	ldrb.w	r4, [r7], #1
    if ( (p + i) > 256)
 8000932:	1966      	adds	r6, r4, r5
 8000934:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8000938:	d80f      	bhi.n	800095a <JPEG_Bits_To_SizeCodes+0x36>
 800093a:	440d      	add	r5, r1
    {  /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0)
    {
      Huffsize[p++] = (uint8_t) l+1;
 800093c:	eba7 0c00 	sub.w	ip, r7, r0
    while (i != 0)
 8000940:	b96c      	cbnz	r4, 800095e <JPEG_Bits_To_SizeCodes+0x3a>
  for (l = 0; l < 16; l++) 
 8000942:	4577      	cmp	r7, lr
 8000944:	4635      	mov	r5, r6
 8000946:	d1f2      	bne.n	800092e <JPEG_Bits_To_SizeCodes+0xa>
      i--;
    }
  }
  Huffsize[p] = 0;
 8000948:	558c      	strb	r4, [r1, r6]
  *LastK = p; 
 800094a:	601e      	str	r6, [r3, #0]
  
  /* Figure C.2: Generation of table of Huffman codes */ 
  code = 0;
 800094c:	4623      	mov	r3, r4
  si = Huffsize[0];
 800094e:	780d      	ldrb	r5, [r1, #0]
    {
      Huffcode[p++] = code;
      code++;
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8000950:	2601      	movs	r6, #1
  while (Huffsize[p] != 0) 
 8000952:	5d08      	ldrb	r0, [r1, r4]
 8000954:	b1a8      	cbz	r0, 8000982 <JPEG_Bits_To_SizeCodes+0x5e>
 8000956:	1b1b      	subs	r3, r3, r4
 8000958:	e008      	b.n	800096c <JPEG_Bits_To_SizeCodes+0x48>
      return HAL_ERROR;
 800095a:	2001      	movs	r0, #1
 800095c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Huffsize[p++] = (uint8_t) l+1;
 800095e:	f805 cb01 	strb.w	ip, [r5], #1
      i--;
 8000962:	3c01      	subs	r4, #1
 8000964:	e7ec      	b.n	8000940 <JPEG_Bits_To_SizeCodes+0x1c>
      Huffcode[p++] = code;
 8000966:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800096a:	3401      	adds	r4, #1
    while (((uint32_t) Huffsize[p]) == si) 
 800096c:	5d0f      	ldrb	r7, [r1, r4]
 800096e:	1918      	adds	r0, r3, r4
 8000970:	42bd      	cmp	r5, r7
 8000972:	d0f8      	beq.n	8000966 <JPEG_Bits_To_SizeCodes+0x42>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8000974:	fa06 f305 	lsl.w	r3, r6, r5
 8000978:	4283      	cmp	r3, r0
 800097a:	d9ee      	bls.n	800095a <JPEG_Bits_To_SizeCodes+0x36>
    {
      return HAL_ERROR;
    }
    code <<= 1;
 800097c:	0043      	lsls	r3, r0, #1
    si++;
 800097e:	3501      	adds	r5, #1
 8000980:	e7e7      	b.n	8000952 <JPEG_Bits_To_SizeCodes+0x2e>
  }    
  /* Return function status */
  return HAL_OK;
}
 8000982:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000984 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_BitsValsTable pointer to DC huffman bits/vals table
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table 
  * @retval HAL status
  */ 
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable, JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8000984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000986:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 800098a:	460d      	mov	r5, r1
 800098c:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];  
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800098e:	ae43      	add	r6, sp, #268	; 0x10c
 8000990:	af02      	add	r7, sp, #8
 8000992:	ab01      	add	r3, sp, #4
 8000994:	4632      	mov	r2, r6
 8000996:	4639      	mov	r1, r7
 8000998:	f7ff ffc4 	bl	8000924 <JPEG_Bits_To_SizeCodes>
  if(error != HAL_OK)
 800099c:	b930      	cbnz	r0, 80009ac <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>
    return  error;
  }  
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k=0;
    
  while(k < lastK)
 800099e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009a2:	f104 0210 	add.w	r2, r4, #16
 80009a6:	4603      	mov	r3, r0
 80009a8:	4573      	cmp	r3, lr
 80009aa:	d102      	bne.n	80009b2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2e>
    }      
  }
  
  /* Return function status */
  return HAL_OK;  
}
 80009ac:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 80009b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 80009b2:	f812 1b01 	ldrb.w	r1, [r2], #1
    if(l >= JPEG_DC_HUFF_TABLE_SIZE)
 80009b6:	290b      	cmp	r1, #11
 80009b8:	d80a      	bhi.n	80009d0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80009ba:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
 80009be:	eb05 0c81 	add.w	ip, r5, r1, lsl #2
 80009c2:	f8cc 400c 	str.w	r4, [ip, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1;
 80009c6:	5cfc      	ldrb	r4, [r7, r3]
      k++;
 80009c8:	3301      	adds	r3, #1
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1;
 80009ca:	3c01      	subs	r4, #1
 80009cc:	546c      	strb	r4, [r5, r1]
 80009ce:	e7eb      	b.n	80009a8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x24>
      return HAL_ERROR; /* Huffman Table overflow error*/
 80009d0:	2001      	movs	r0, #1
 80009d2:	e7eb      	b.n	80009ac <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>

080009d4 <JPEG_Set_HuffDC_Mem>:
  * @param  HuffTableDC pointer to DC huffman table
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1. 
  * @retval HAL status
  */    
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC, uint32_t *DCTableAddress)
{
 80009d4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef error = HAL_OK;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;
  
  if(DCTableAddress == (uint32_t *)(hjpeg->Instance->HUFFENC_DC0))
 80009d6:	6804      	ldr	r4, [r0, #0]
{
 80009d8:	460b      	mov	r3, r1
 80009da:	b090      	sub	sp, #64	; 0x40
  if(DCTableAddress == (uint32_t *)(hjpeg->Instance->HUFFENC_DC0))
 80009dc:	f504 61f8 	add.w	r1, r4, #1984	; 0x7c0
 80009e0:	428a      	cmp	r2, r1
 80009e2:	d105      	bne.n	80009f0 <JPEG_Set_HuffDC_Mem+0x1c>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE/2));
 80009e4:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
  else
  {
    return HAL_ERROR;
  }

  if(HuffTableDC != NULL)
 80009e8:	b94b      	cbnz	r3, 80009fe <JPEG_Set_HuffDC_Mem+0x2a>
      *address = lsb | (msb << 16);
    }        
  }
  
  /* Return function status */
  return HAL_OK;  
 80009ea:	2000      	movs	r0, #0
}
 80009ec:	b010      	add	sp, #64	; 0x40
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
  else if (DCTableAddress == (uint32_t *)(hjpeg->Instance->HUFFENC_DC1))
 80009f0:	f504 61fc 	add.w	r1, r4, #2016	; 0x7e0
 80009f4:	428a      	cmp	r2, r1
 80009f6:	d128      	bne.n	8000a4a <JPEG_Set_HuffDC_Mem+0x76>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE/2));
 80009f8:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
 80009fc:	e7f4      	b.n	80009e8 <JPEG_Set_HuffDC_Mem+0x14>
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80009fe:	ad01      	add	r5, sp, #4
 8000a00:	4618      	mov	r0, r3
 8000a02:	4629      	mov	r1, r5
 8000a04:	f7ff ffbe 	bl	8000984 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if(error != HAL_OK)
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	d1ef      	bne.n	80009ec <JPEG_Set_HuffDC_Mem+0x18>
    *addressDef = 0x0FFF0FFF;
 8000a0c:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 8000a10:	4628      	mov	r0, r5
    i = JPEG_DC_HUFF_TABLE_SIZE;
 8000a12:	210c      	movs	r1, #12
    *addressDef = 0x0FFF0FFF;
 8000a14:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8000a16:	6063      	str	r3, [r4, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] & 0xFF);
 8000a18:	186b      	adds	r3, r5, r1
 8000a1a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
      i--;
 8000a1e:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] & 0xFF);
 8000a20:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] & 0xFF);
 8000a24:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8000a28:	3808      	subs	r0, #8
 8000a2a:	021b      	lsls	r3, r3, #8
 8000a2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a30:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] & 0xFF);
 8000a32:	5c6b      	ldrb	r3, [r5, r1]
 8000a34:	021b      	lsls	r3, r3, #8
 8000a36:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a3a:	4333      	orrs	r3, r6
      *address = lsb | (msb << 16);
 8000a3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a40:	f844 3d04 	str.w	r3, [r4, #-4]!
    while(i>0)
 8000a44:	2900      	cmp	r1, #0
 8000a46:	d1e7      	bne.n	8000a18 <JPEG_Set_HuffDC_Mem+0x44>
 8000a48:	e7cf      	b.n	80009ea <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	e7ce      	b.n	80009ec <JPEG_Set_HuffDC_Mem+0x18>

08000a4e <JPEG_Set_HuffAC_Mem>:
  * @param  HuffTableAC pointer to AC huffman table
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1. 
  * @retval HAL status
  */  
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC, uint32_t *ACTableAddress)
{
 8000a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error = HAL_OK;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;
  
  if(ACTableAddress == (uint32_t *)(hjpeg->Instance->HUFFENC_AC0))
 8000a52:	6804      	ldr	r4, [r0, #0]
{
 8000a54:	f6ad 0d38 	subw	sp, sp, #2104	; 0x838
 8000a58:	460f      	mov	r7, r1
  if(ACTableAddress == (uint32_t *)(hjpeg->Instance->HUFFENC_AC0))
 8000a5a:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d107      	bne.n	8000a72 <JPEG_Set_HuffAC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE/2));
 8000a62:	f204 6444 	addw	r4, r4, #1604	; 0x644
  else
  {
    return HAL_ERROR;
  } 
    
  if(HuffTableAC != NULL)
 8000a66:	b95f      	cbnz	r7, 8000a80 <JPEG_Set_HuffAC_Mem+0x32>
      *address = lsb | (msb << 16);       
    }  
  }
  
  /* Return function status */
  return HAL_OK;
 8000a68:	2000      	movs	r0, #0
}
 8000a6a:	f60d 0d38 	addw	sp, sp, #2104	; 0x838
 8000a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (uint32_t *)(hjpeg->Instance->HUFFENC_AC1))
 8000a72:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d152      	bne.n	8000b20 <JPEG_Set_HuffAC_Mem+0xd2>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE/2));
 8000a7a:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
 8000a7e:	e7f2      	b.n	8000a66 <JPEG_Set_HuffAC_Mem+0x18>
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8000a80:	f20d 4534 	addw	r5, sp, #1076	; 0x434
 8000a84:	ae01      	add	r6, sp, #4
 8000a86:	466b      	mov	r3, sp
 8000a88:	4638      	mov	r0, r7
 8000a8a:	462a      	mov	r2, r5
 8000a8c:	4631      	mov	r1, r6
 8000a8e:	f7ff ff49 	bl	8000924 <JPEG_Bits_To_SizeCodes>
  if(error != HAL_OK)
 8000a92:	2800      	cmp	r0, #0
 8000a94:	d1e9      	bne.n	8000a6a <JPEG_Set_HuffAC_Mem+0x1c>
 8000a96:	f107 0110 	add.w	r1, r7, #16
  while(k < lastK)
 8000a9a:	f8dd e000 	ldr.w	lr, [sp]
      l = (msb * 10) + lsb - 1; 
 8000a9e:	f04f 0c0a 	mov.w	ip, #10
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8000aa2:	af42      	add	r7, sp, #264	; 0x108
  while(k < lastK)
 8000aa4:	4570      	cmp	r0, lr
 8000aa6:	d12e      	bne.n	8000b06 <JPEG_Set_HuffAC_Mem+0xb8>
      *addressDef = 0x0FFF0FFF;
 8000aa8:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 8000aac:	a942      	add	r1, sp, #264	; 0x108
    i = JPEG_AC_HUFF_TABLE_SIZE;
 8000aae:	20a2      	movs	r0, #162	; 0xa2
      *addressDef = 0x0FFF0FFF;
 8000ab0:	6023      	str	r3, [r4, #0]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	6063      	str	r3, [r4, #4]
 8000ab6:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8000ab8:	f103 33d1 	add.w	r3, r3, #3520188881	; 0xd1d1d1d1
 8000abc:	f103 232e 	add.w	r3, r3, #771763712	; 0x2e002e00
 8000ac0:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8000ac2:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8000ac6:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8000ac8:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8000acc:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8000ace:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8000ad2:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] & 0xFF);
 8000ad4:	182b      	adds	r3, r5, r0
 8000ad6:	f891 2328 	ldrb.w	r2, [r1, #808]	; 0x328
      i--;
 8000ada:	3802      	subs	r0, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] & 0xFF);
 8000adc:	f891 6324 	ldrb.w	r6, [r1, #804]	; 0x324
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] & 0xFF);
 8000ae0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8000ae4:	3908      	subs	r1, #8
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000aec:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] & 0xFF);
 8000aee:	5c2b      	ldrb	r3, [r5, r0]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000af6:	4333      	orrs	r3, r6
      *address = lsb | (msb << 16);       
 8000af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afc:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 0)
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d1e7      	bne.n	8000ad4 <JPEG_Set_HuffAC_Mem+0x86>
 8000b04:	e7b0      	b.n	8000a68 <JPEG_Set_HuffAC_Mem+0x1a>
    l = AC_BitsValsTable->HuffVal[k];
 8000b06:	f811 3b01 	ldrb.w	r3, [r1], #1
    if(l == 0)
 8000b0a:	b15b      	cbz	r3, 8000b24 <JPEG_Set_HuffAC_Mem+0xd6>
    else if(l == 0xF0)/* l = 0xF0 ZRL code*/
 8000b0c:	2bf0      	cmp	r3, #240	; 0xf0
 8000b0e:	d015      	beq.n	8000b3c <JPEG_Set_HuffAC_Mem+0xee>
      l = (msb * 10) + lsb - 1; 
 8000b10:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0F);
 8000b12:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10) + lsb - 1; 
 8000b16:	3b01      	subs	r3, #1
 8000b18:	fb1c 3302 	smlabb	r3, ip, r2, r3
    if(l >= JPEG_AC_HUFF_TABLE_SIZE)
 8000b1c:	2ba1      	cmp	r3, #161	; 0xa1
 8000b1e:	d902      	bls.n	8000b26 <JPEG_Set_HuffAC_Mem+0xd8>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8000b20:	2001      	movs	r0, #1
 8000b22:	e7a2      	b.n	8000a6a <JPEG_Set_HuffAC_Mem+0x1c>
      l = 160; /*l = 0x00 EOB code*/
 8000b24:	23a0      	movs	r3, #160	; 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8000b26:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
 8000b2a:	eb07 0883 	add.w	r8, r7, r3, lsl #2
 8000b2e:	f8c8 20a4 	str.w	r2, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1;
 8000b32:	5c32      	ldrb	r2, [r6, r0]
      k++;
 8000b34:	3001      	adds	r0, #1
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1;
 8000b36:	3a01      	subs	r2, #1
 8000b38:	54fa      	strb	r2, [r7, r3]
 8000b3a:	e7b3      	b.n	8000aa4 <JPEG_Set_HuffAC_Mem+0x56>
      l = 161;
 8000b3c:	23a1      	movs	r3, #161	; 0xa1
 8000b3e:	e7f2      	b.n	8000b26 <JPEG_Set_HuffAC_Mem+0xd8>

08000b40 <HAL_JPEG_Init>:
{
 8000b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hjpeg == NULL)
 8000b42:	4604      	mov	r4, r0
 8000b44:	2800      	cmp	r0, #0
 8000b46:	f000 810f 	beq.w	8000d68 <HAL_JPEG_Init+0x228>
  if(hjpeg->State == HAL_JPEG_STATE_RESET)
 8000b4a:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8000b4e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b52:	b91b      	cbnz	r3, 8000b5c <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8000b54:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    HAL_JPEG_MspInit(hjpeg);
 8000b58:	f002 f808 	bl	8002b6c <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8000b5c:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	4989      	ldr	r1, [pc, #548]	; (8000d88 <HAL_JPEG_Init+0x248>)
 8000b62:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
  __IO uint32_t *address;
  if(HuffTableDC0 != NULL)
  {
    /* DC0 Huffman Table : BITS*/
    /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
    address = (hjpeg->Instance->DHTMEM + 3); 
 8000b66:	f502 705b 	add.w	r0, r2, #876	; 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8000b6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b6c:	f502 7557 	add.w	r5, r2, #860	; 0x35c
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8000b76:	6813      	ldr	r3, [r2, #0]
 8000b78:	f023 0301 	bic.w	r3, r3, #1
 8000b7c:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg,JPEG_INTERRUPT_MASK);
 8000b7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b80:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
  JPEG_DISABLE_DMA(hjpeg,JPEG_DMA_MASK);
 8000b86:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b88:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8000b8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;  
 8000b96:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg,JPEG_FLAG_ALL);
 8000b9e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000ba0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ba4:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)JPEG_LUM_QuantTable;
 8000ba6:	4b79      	ldr	r3, [pc, #484]	; (8000d8c <HAL_JPEG_Init+0x24c>)
 8000ba8:	63a3      	str	r3, [r4, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)JPEG_CHROM_QuantTable;
 8000baa:	4b79      	ldr	r3, [pc, #484]	; (8000d90 <HAL_JPEG_Init+0x250>)
 8000bac:	63e3      	str	r3, [r4, #60]	; 0x3c
  hjpeg->QuantTable2 = NULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable3 = NULL;
 8000bb2:	6463      	str	r3, [r4, #68]	; 0x44
    index = 16;
    while(index > 0)
    {

      *address = (((uint32_t)HuffTableDC0->Bits[index-1] & 0xFF) << 24)|
                 (((uint32_t)HuffTableDC0->Bits[index-2] & 0xFF) << 16)|
 8000bb4:	7b8b      	ldrb	r3, [r1, #14]
 8000bb6:	3904      	subs	r1, #4
      *address = (((uint32_t)HuffTableDC0->Bits[index-1] & 0xFF) << 24)|
 8000bb8:	7cce      	ldrb	r6, [r1, #19]
                 (((uint32_t)HuffTableDC0->Bits[index-2] & 0xFF) << 16)|
 8000bba:	041b      	lsls	r3, r3, #16
      *address = (((uint32_t)HuffTableDC0->Bits[index-1] & 0xFF) << 24)|
 8000bbc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
                 (((uint32_t)HuffTableDC0->Bits[index-3] & 0xFF) << 8) |
                 ((uint32_t)HuffTableDC0->Bits[index-4] & 0xFF);
 8000bc0:	7c0e      	ldrb	r6, [r1, #16]
                 (((uint32_t)HuffTableDC0->Bits[index-3] & 0xFF) << 8) |
 8000bc2:	4333      	orrs	r3, r6
 8000bc4:	7c4e      	ldrb	r6, [r1, #17]
 8000bc6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      *address = (((uint32_t)HuffTableDC0->Bits[index-1] & 0xFF) << 24)|
 8000bca:	f840 3904 	str.w	r3, [r0], #-4
    while(index > 0)
 8000bce:	42a8      	cmp	r0, r5
 8000bd0:	d1f0      	bne.n	8000bb4 <HAL_JPEG_Init+0x74>
    /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
    address = (hjpeg->Instance->DHTMEM + 6);
    index = 12;
    while(index > 0)
    {
      *address = (((uint32_t)HuffTableDC0->HuffVal[index-1] & 0xFF) << 24)|
 8000bd2:	4b70      	ldr	r3, [pc, #448]	; (8000d94 <HAL_JPEG_Init+0x254>)

  if(HuffTableAC0 != NULL)
  {
    /* AC0 Huffman Table : BITS*/
    /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
    address = (hjpeg->Instance->DHTMEM + 10); 
 8000bd4:	f502 7662 	add.w	r6, r2, #904	; 0x388
 8000bd8:	496f      	ldr	r1, [pc, #444]	; (8000d98 <HAL_JPEG_Init+0x258>)
 8000bda:	f502 775e 	add.w	r7, r2, #888	; 0x378
      *address = (((uint32_t)HuffTableDC0->HuffVal[index-1] & 0xFF) << 24)|
 8000bde:	f8c2 3378 	str.w	r3, [r2, #888]	; 0x378
 8000be2:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
    address = (hjpeg->Instance->DHTMEM + 10); 
 8000be6:	460d      	mov	r5, r1
 8000be8:	4630      	mov	r0, r6
      *address = (((uint32_t)HuffTableDC0->HuffVal[index-1] & 0xFF) << 24)|
 8000bea:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
 8000bee:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 8000bf2:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
    index = 16;
    while(index > 0)
    {

      *address = (((uint32_t)HuffTableAC0->Bits[index-1] & 0xFF) << 24)|
                 (((uint32_t)HuffTableAC0->Bits[index-2] & 0xFF) << 16)|
 8000bf6:	7bab      	ldrb	r3, [r5, #14]
 8000bf8:	3d04      	subs	r5, #4
      *address = (((uint32_t)HuffTableAC0->Bits[index-1] & 0xFF) << 24)|
 8000bfa:	f895 e013 	ldrb.w	lr, [r5, #19]
                 (((uint32_t)HuffTableAC0->Bits[index-2] & 0xFF) << 16)|
 8000bfe:	041b      	lsls	r3, r3, #16
      *address = (((uint32_t)HuffTableAC0->Bits[index-1] & 0xFF) << 24)|
 8000c00:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
                 (((uint32_t)HuffTableAC0->Bits[index-3] & 0xFF) << 8) |
                 ((uint32_t)HuffTableAC0->Bits[index-4] & 0xFF);
 8000c04:	f895 e010 	ldrb.w	lr, [r5, #16]
                 (((uint32_t)HuffTableAC0->Bits[index-3] & 0xFF) << 8) |
 8000c08:	ea43 030e 	orr.w	r3, r3, lr
 8000c0c:	f895 e011 	ldrb.w	lr, [r5, #17]
 8000c10:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
      *address = (((uint32_t)HuffTableAC0->Bits[index-1] & 0xFF) << 24)|
 8000c14:	f846 3904 	str.w	r3, [r6], #-4
    while(index > 0)
 8000c18:	42be      	cmp	r6, r7
 8000c1a:	d1ec      	bne.n	8000bf6 <HAL_JPEG_Init+0xb6>
    }
    /* AC0 Huffman Table : Val*/
    /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
    /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
    address = (hjpeg->Instance->DHTMEM + 51);    
    value = *address & 0xFFFF0000U;
 8000c1c:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFF) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFF);
    *address = value;
    
    /*continue setting 160 AC0 huffman values */
    address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8000c20:	f502 6585 	add.w	r5, r2, #1064	; 0x428
    value = *address & 0xFFFF0000U;
 8000c24:	0c1b      	lsrs	r3, r3, #16
 8000c26:	041b      	lsls	r3, r3, #16
    value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFF) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFF);
 8000c28:	f443 437a 	orr.w	r3, r3, #64000	; 0xfa00
 8000c2c:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
    *address = value;
 8000c30:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
    index = 160;
    while(index > 0)
    {
      *address = (((uint32_t)HuffTableAC0->HuffVal[index-1] & 0xFF) << 24)|
                 (((uint32_t)HuffTableAC0->HuffVal[index-2] & 0xFF) << 16)|
 8000c34:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
 8000c38:	3904      	subs	r1, #4
      *address = (((uint32_t)HuffTableAC0->HuffVal[index-1] & 0xFF) << 24)|
 8000c3a:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
                 (((uint32_t)HuffTableAC0->HuffVal[index-2] & 0xFF) << 16)|
 8000c3e:	041b      	lsls	r3, r3, #16
      *address = (((uint32_t)HuffTableAC0->HuffVal[index-1] & 0xFF) << 24)|
 8000c40:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
                 (((uint32_t)HuffTableAC0->HuffVal[index-3] & 0xFF) << 8) |
                 ((uint32_t)HuffTableAC0->HuffVal[index-4] & 0xFF);
 8000c44:	f891 60b0 	ldrb.w	r6, [r1, #176]	; 0xb0
                 (((uint32_t)HuffTableAC0->HuffVal[index-3] & 0xFF) << 8) |
 8000c48:	4333      	orrs	r3, r6
 8000c4a:	f891 60b1 	ldrb.w	r6, [r1, #177]	; 0xb1
 8000c4e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      *address = (((uint32_t)HuffTableAC0->HuffVal[index-1] & 0xFF) << 24)|
 8000c52:	f845 3904 	str.w	r3, [r5], #-4
    while(index > 0)
 8000c56:	4285      	cmp	r5, r0
 8000c58:	d1ec      	bne.n	8000c34 <HAL_JPEG_Init+0xf4>
  {
    /* DC1 Huffman Table : BITS*/
    /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
    /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
    address = (hjpeg->Instance->DHTMEM + 51);
    value = *address & 0x0000FFFFU;
 8000c5a:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
 8000c5e:	f502 658b 	add.w	r5, r2, #1112	; 0x458
    value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFF) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFF) << 16);
    *address = value;
    
    /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
    address = (hjpeg->Instance->DHTMEM + 55);
    value = *address & 0xFFFF0000U;
 8000c62:	484e      	ldr	r0, [pc, #312]	; (8000d9c <HAL_JPEG_Init+0x25c>)
    value = *address & 0x0000FFFFU;
 8000c64:	b29b      	uxth	r3, r3
    value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFF) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFF) << 16);
 8000c66:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
    *address = value;
 8000c6a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
    value = *address & 0xFFFF0000U;
 8000c6e:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 8000c72:	4003      	ands	r3, r0
    value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFF) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFF);    
    *address = value;
 8000c74:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    address--;
    index = 12;
    while(index > 0)
    {

      *address = (((uint32_t)HuffTableDC1->Bits[index+1] & 0xFF) << 24)|
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438
 8000c7e:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8000c82:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 8000c86:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
    }
    /* DC1 Huffman Table : Val*/
    /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
    /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
    address = (hjpeg->Instance->DHTMEM + 55);
    value = *address & 0x0000FFFF;
 8000c8a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
    address--;
    index = 8;
    while(index > 0)
    {
      *address = (((uint32_t)HuffTableDC1->HuffVal[index+1] & 0xFF) << 24)|
 8000c8e:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <HAL_JPEG_Init+0x260>)
    value = *address & 0x0000FFFF;
 8000c90:	b289      	uxth	r1, r1
    value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFF) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFF) << 16);
 8000c92:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    *address = value;
 8000c96:	f8c2 143c 	str.w	r1, [r2, #1084]	; 0x43c
    value = *address & 0xFFFF0000U;
 8000c9a:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 8000c9e:	4001      	ands	r1, r0
    value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFF) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFF);
 8000ca0:	f441 6130 	orr.w	r1, r1, #2816	; 0xb00
 8000ca4:	f041 010a 	orr.w	r1, r1, #10
    *address = value;
 8000ca8:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
      *address = (((uint32_t)HuffTableDC1->HuffVal[index+1] & 0xFF) << 24)|
 8000cac:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
 8000cb0:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 8000cb4:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  {
    /* AC1 Huffman Table : BITS*/
    /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
    /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
    address = (hjpeg->Instance->DHTMEM + 58);
    value = *address & 0x0000FFFFU;
 8000cb8:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 8000cbc:	b289      	uxth	r1, r1
    value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFF) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFF) << 16);
 8000cbe:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    *address = value;
 8000cc2:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
    
    /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
    address = (hjpeg->Instance->DHTMEM + 62);
    value = *address & 0xFFFF0000U;
 8000cc6:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 8000cca:	4936      	ldr	r1, [pc, #216]	; (8000da4 <HAL_JPEG_Init+0x264>)
 8000ccc:	4003      	ands	r3, r0
    value = *address & 0x0000FFFF;
    value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFF) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFF) << 16);
    *address = value;
    
    /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
    address = (hjpeg->Instance->DHTMEM + 102);
 8000cce:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFF) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFF);
 8000cd2:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
    *address = value;
 8000cda:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
      *address = (((uint32_t)HuffTableAC1->Bits[index+1] & 0xFF) << 24)|
 8000cde:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <HAL_JPEG_Init+0x268>)
 8000ce0:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 8000ce4:	4b31      	ldr	r3, [pc, #196]	; (8000dac <HAL_JPEG_Init+0x26c>)
 8000ce6:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <HAL_JPEG_Init+0x270>)
 8000cec:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
    value = *address & 0x0000FFFF;
 8000cf0:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 8000cf4:	b29b      	uxth	r3, r3
    value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFF) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFF) << 16);
 8000cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    *address = value;
 8000cfa:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
    index = 160;
    while(index > 0)
    {
      *address = (((uint32_t)HuffTableAC1->HuffVal[index+1] & 0xFF) << 24)|
                 (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFF) << 16)|
 8000cfe:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
 8000d02:	3904      	subs	r1, #4
      *address = (((uint32_t)HuffTableAC1->HuffVal[index+1] & 0xFF) << 24)|
 8000d04:	f891 60b5 	ldrb.w	r6, [r1, #181]	; 0xb5
                 (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFF) << 16)|
 8000d08:	041b      	lsls	r3, r3, #16
                 (((uint32_t)HuffTableAC1->HuffVal[index-1] & 0xFF) << 8) |
 8000d0a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
                 ((uint32_t)HuffTableAC1->HuffVal[index-2] & 0xFF);
 8000d0e:	f891 60b2 	ldrb.w	r6, [r1, #178]	; 0xb2
                 (((uint32_t)HuffTableAC1->HuffVal[index-1] & 0xFF) << 8) |
 8000d12:	4333      	orrs	r3, r6
 8000d14:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
 8000d18:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      *address = (((uint32_t)HuffTableAC1->HuffVal[index+1] & 0xFF) << 24)|
 8000d1c:	f840 3904 	str.w	r3, [r0], #-4
    while(index > 0)
 8000d20:	42a8      	cmp	r0, r5
 8000d22:	d1ec      	bne.n	8000cfe <HAL_JPEG_Init+0x1be>
    error = JPEG_Set_HuffAC_Mem(hjpeg, HuffTableAC0, (uint32_t *)(hjpeg->Instance->HUFFENC_AC0));
 8000d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000d28:	491b      	ldr	r1, [pc, #108]	; (8000d98 <HAL_JPEG_Init+0x258>)
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f7ff fe8f 	bl	8000a4e <JPEG_Set_HuffAC_Mem>
    if(error != HAL_OK)
 8000d30:	b9b8      	cbnz	r0, 8000d62 <HAL_JPEG_Init+0x222>
    error = JPEG_Set_HuffAC_Mem(hjpeg, HuffTableAC1, (uint32_t *)(hjpeg->Instance->HUFFENC_AC1));
 8000d32:	6822      	ldr	r2, [r4, #0]
 8000d34:	4620      	mov	r0, r4
 8000d36:	491b      	ldr	r1, [pc, #108]	; (8000da4 <HAL_JPEG_Init+0x264>)
 8000d38:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 8000d3c:	f7ff fe87 	bl	8000a4e <JPEG_Set_HuffAC_Mem>
    if(error != HAL_OK)
 8000d40:	b978      	cbnz	r0, 8000d62 <HAL_JPEG_Init+0x222>
    error = JPEG_Set_HuffDC_Mem(hjpeg, HuffTableDC0, (uint32_t *)hjpeg->Instance->HUFFENC_DC0);
 8000d42:	6822      	ldr	r2, [r4, #0]
 8000d44:	4620      	mov	r0, r4
 8000d46:	4910      	ldr	r1, [pc, #64]	; (8000d88 <HAL_JPEG_Init+0x248>)
 8000d48:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8000d4c:	f7ff fe42 	bl	80009d4 <JPEG_Set_HuffDC_Mem>
    if(error != HAL_OK)
 8000d50:	b938      	cbnz	r0, 8000d62 <HAL_JPEG_Init+0x222>
    error = JPEG_Set_HuffDC_Mem(hjpeg, HuffTableDC1, (uint32_t *)hjpeg->Instance->HUFFENC_DC1);
 8000d52:	6822      	ldr	r2, [r4, #0]
 8000d54:	4620      	mov	r0, r4
 8000d56:	4917      	ldr	r1, [pc, #92]	; (8000db4 <HAL_JPEG_Init+0x274>)
 8000d58:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 8000d5c:	f7ff fe3a 	bl	80009d4 <JPEG_Set_HuffDC_Mem>
    if(error != HAL_OK)
 8000d60:	b120      	cbz	r0, 8000d6c <HAL_JPEG_Init+0x22c>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8000d62:	2001      	movs	r0, #1
 8000d64:	64e0      	str	r0, [r4, #76]	; 0x4c
    return HAL_ERROR;
 8000d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000d68:	2001      	movs	r0, #1
 8000d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8000d6c:	6822      	ldr	r2, [r4, #0]
 8000d6e:	6853      	ldr	r3, [r2, #4]
 8000d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d74:	6053      	str	r3, [r2, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8000d76:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8000d78:	61e0      	str	r0, [r4, #28]
  hjpeg->JpegOutCount = 0;
 8000d7a:	6220      	str	r0, [r4, #32]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8000d7c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8000d80:	64e0      	str	r0, [r4, #76]	; 0x4c
  hjpeg->Context = 0;
 8000d82:	6520      	str	r0, [r4, #80]	; 0x50
}
 8000d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d86:	bf00      	nop
 8000d88:	08002ee0 	.word	0x08002ee0
 8000d8c:	08002efc 	.word	0x08002efc
 8000d90:	08002e84 	.word	0x08002e84
 8000d94:	0b0a0908 	.word	0x0b0a0908
 8000d98:	08002dd2 	.word	0x08002dd2
 8000d9c:	ffff0000 	.word	0xffff0000
 8000da0:	09080706 	.word	0x09080706
 8000da4:	08002d20 	.word	0x08002d20
 8000da8:	01000404 	.word	0x01000404
 8000dac:	05070403 	.word	0x05070403
 8000db0:	04040201 	.word	0x04040201
 8000db4:	08002ec4 	.word	0x08002ec4

08000db8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000dba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000dbe:	4c19      	ldr	r4, [pc, #100]	; (8000e24 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dc4:	641a      	str	r2, [r3, #64]	; 0x40
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd8:	f7ff fbf2 	bl	80005c0 <HAL_GetTick>
 8000ddc:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000dde:	6863      	ldr	r3, [r4, #4]
 8000de0:	03da      	lsls	r2, r3, #15
 8000de2:	d50c      	bpl.n	8000dfe <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dea:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dec:	f7ff fbe8 	bl	80005c0 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000df0:	4c0c      	ldr	r4, [pc, #48]	; (8000e24 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000df2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000df4:	6863      	ldr	r3, [r4, #4]
 8000df6:	039b      	lsls	r3, r3, #14
 8000df8:	d50a      	bpl.n	8000e10 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	e006      	b.n	8000e0c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000dfe:	f7ff fbdf 	bl	80005c0 <HAL_GetTick>
 8000e02:	1b40      	subs	r0, r0, r5
 8000e04:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000e08:	d9e9      	bls.n	8000dde <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000e0a:	2003      	movs	r0, #3
}
 8000e0c:	b003      	add	sp, #12
 8000e0e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e10:	f7ff fbd6 	bl	80005c0 <HAL_GetTick>
 8000e14:	1b40      	subs	r0, r0, r5
 8000e16:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000e1a:	d9eb      	bls.n	8000df4 <HAL_PWREx_EnableOverDrive+0x3c>
 8000e1c:	e7f5      	b.n	8000e0a <HAL_PWREx_EnableOverDrive+0x52>
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	b918      	cbnz	r0, 8000e38 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000e30:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000e32:	b002      	add	sp, #8
 8000e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e38:	6803      	ldr	r3, [r0, #0]
 8000e3a:	07d8      	lsls	r0, r3, #31
 8000e3c:	d410      	bmi.n	8000e60 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	0799      	lsls	r1, r3, #30
 8000e42:	d45e      	bmi.n	8000f02 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	0719      	lsls	r1, r3, #28
 8000e48:	f100 80a3 	bmi.w	8000f92 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	075a      	lsls	r2, r3, #29
 8000e50:	f100 80c4 	bmi.w	8000fdc <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e54:	69a2      	ldr	r2, [r4, #24]
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	f040 812e 	bne.w	80010b8 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	e7e8      	b.n	8000e32 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e60:	4b93      	ldr	r3, [pc, #588]	; (80010b0 <HAL_RCC_OscConfig+0x288>)
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	f002 020c 	and.w	r2, r2, #12
 8000e68:	2a04      	cmp	r2, #4
 8000e6a:	d007      	beq.n	8000e7c <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	f002 020c 	and.w	r2, r2, #12
 8000e72:	2a08      	cmp	r2, #8
 8000e74:	d10a      	bne.n	8000e8c <HAL_RCC_OscConfig+0x64>
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	025a      	lsls	r2, r3, #9
 8000e7a:	d507      	bpl.n	8000e8c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7c:	4b8c      	ldr	r3, [pc, #560]	; (80010b0 <HAL_RCC_OscConfig+0x288>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	039b      	lsls	r3, r3, #14
 8000e82:	d5dc      	bpl.n	8000e3e <HAL_RCC_OscConfig+0x16>
 8000e84:	6863      	ldr	r3, [r4, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1d9      	bne.n	8000e3e <HAL_RCC_OscConfig+0x16>
 8000e8a:	e7d1      	b.n	8000e30 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8c:	6863      	ldr	r3, [r4, #4]
 8000e8e:	4d88      	ldr	r5, [pc, #544]	; (80010b0 <HAL_RCC_OscConfig+0x288>)
 8000e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e94:	d111      	bne.n	8000eba <HAL_RCC_OscConfig+0x92>
 8000e96:	682b      	ldr	r3, [r5, #0]
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fb8f 	bl	80005c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea2:	4d83      	ldr	r5, [pc, #524]	; (80010b0 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000ea4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea6:	682b      	ldr	r3, [r5, #0]
 8000ea8:	039f      	lsls	r7, r3, #14
 8000eaa:	d4c8      	bmi.n	8000e3e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eac:	f7ff fb88 	bl	80005c0 <HAL_GetTick>
 8000eb0:	1b80      	subs	r0, r0, r6
 8000eb2:	2864      	cmp	r0, #100	; 0x64
 8000eb4:	d9f7      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	e7bb      	b.n	8000e32 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eba:	b99b      	cbnz	r3, 8000ee4 <HAL_RCC_OscConfig+0xbc>
 8000ebc:	682b      	ldr	r3, [r5, #0]
 8000ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec2:	602b      	str	r3, [r5, #0]
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fb78 	bl	80005c0 <HAL_GetTick>
 8000ed0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed2:	682b      	ldr	r3, [r5, #0]
 8000ed4:	0398      	lsls	r0, r3, #14
 8000ed6:	d5b2      	bpl.n	8000e3e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fb72 	bl	80005c0 <HAL_GetTick>
 8000edc:	1b80      	subs	r0, r0, r6
 8000ede:	2864      	cmp	r0, #100	; 0x64
 8000ee0:	d9f7      	bls.n	8000ed2 <HAL_RCC_OscConfig+0xaa>
 8000ee2:	e7e8      	b.n	8000eb6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	d103      	bne.n	8000ef4 <HAL_RCC_OscConfig+0xcc>
 8000eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef0:	602b      	str	r3, [r5, #0]
 8000ef2:	e7d0      	b.n	8000e96 <HAL_RCC_OscConfig+0x6e>
 8000ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef8:	602b      	str	r3, [r5, #0]
 8000efa:	682b      	ldr	r3, [r5, #0]
 8000efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f00:	e7cc      	b.n	8000e9c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f02:	4b6b      	ldr	r3, [pc, #428]	; (80010b0 <HAL_RCC_OscConfig+0x288>)
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	f012 0f0c 	tst.w	r2, #12
 8000f0a:	d007      	beq.n	8000f1c <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	f002 020c 	and.w	r2, r2, #12
 8000f12:	2a08      	cmp	r2, #8
 8000f14:	d111      	bne.n	8000f3a <HAL_RCC_OscConfig+0x112>
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	0259      	lsls	r1, r3, #9
 8000f1a:	d40e      	bmi.n	8000f3a <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1c:	4b64      	ldr	r3, [pc, #400]	; (80010b0 <HAL_RCC_OscConfig+0x288>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	0792      	lsls	r2, r2, #30
 8000f22:	d502      	bpl.n	8000f2a <HAL_RCC_OscConfig+0x102>
 8000f24:	68e2      	ldr	r2, [r4, #12]
 8000f26:	2a01      	cmp	r2, #1
 8000f28:	d182      	bne.n	8000e30 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	6921      	ldr	r1, [r4, #16]
 8000f2e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f32:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000f36:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f38:	e784      	b.n	8000e44 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f3a:	68e3      	ldr	r3, [r4, #12]
 8000f3c:	4d5c      	ldr	r5, [pc, #368]	; (80010b0 <HAL_RCC_OscConfig+0x288>)
 8000f3e:	b1bb      	cbz	r3, 8000f70 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f48:	f7ff fb3a 	bl	80005c0 <HAL_GetTick>
 8000f4c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f4e:	682b      	ldr	r3, [r5, #0]
 8000f50:	079f      	lsls	r7, r3, #30
 8000f52:	d507      	bpl.n	8000f64 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f54:	682b      	ldr	r3, [r5, #0]
 8000f56:	6922      	ldr	r2, [r4, #16]
 8000f58:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f5c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f60:	602b      	str	r3, [r5, #0]
 8000f62:	e76f      	b.n	8000e44 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f64:	f7ff fb2c 	bl	80005c0 <HAL_GetTick>
 8000f68:	1b80      	subs	r0, r0, r6
 8000f6a:	2802      	cmp	r0, #2
 8000f6c:	d9ef      	bls.n	8000f4e <HAL_RCC_OscConfig+0x126>
 8000f6e:	e7a2      	b.n	8000eb6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000f70:	682b      	ldr	r3, [r5, #0]
 8000f72:	f023 0301 	bic.w	r3, r3, #1
 8000f76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f78:	f7ff fb22 	bl	80005c0 <HAL_GetTick>
 8000f7c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	0798      	lsls	r0, r3, #30
 8000f82:	f57f af5f 	bpl.w	8000e44 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f86:	f7ff fb1b 	bl	80005c0 <HAL_GetTick>
 8000f8a:	1b80      	subs	r0, r0, r6
 8000f8c:	2802      	cmp	r0, #2
 8000f8e:	d9f6      	bls.n	8000f7e <HAL_RCC_OscConfig+0x156>
 8000f90:	e791      	b.n	8000eb6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f92:	6963      	ldr	r3, [r4, #20]
 8000f94:	4d46      	ldr	r5, [pc, #280]	; (80010b0 <HAL_RCC_OscConfig+0x288>)
 8000f96:	b183      	cbz	r3, 8000fba <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000f98:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fb0e 	bl	80005c0 <HAL_GetTick>
 8000fa4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000fa8:	079b      	lsls	r3, r3, #30
 8000faa:	f53f af4f 	bmi.w	8000e4c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fae:	f7ff fb07 	bl	80005c0 <HAL_GetTick>
 8000fb2:	1b80      	subs	r0, r0, r6
 8000fb4:	2802      	cmp	r0, #2
 8000fb6:	d9f6      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x17e>
 8000fb8:	e77d      	b.n	8000eb6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000fba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000fc2:	f7ff fafd 	bl	80005c0 <HAL_GetTick>
 8000fc6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000fca:	079f      	lsls	r7, r3, #30
 8000fcc:	f57f af3e 	bpl.w	8000e4c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd0:	f7ff faf6 	bl	80005c0 <HAL_GetTick>
 8000fd4:	1b80      	subs	r0, r0, r6
 8000fd6:	2802      	cmp	r0, #2
 8000fd8:	d9f6      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x1a0>
 8000fda:	e76c      	b.n	8000eb6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fdc:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_RCC_OscConfig+0x288>)
 8000fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe0:	00d0      	lsls	r0, r2, #3
 8000fe2:	d427      	bmi.n	8001034 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000fe6:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fec:	641a      	str	r2, [r3, #64]	; 0x40
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ff8:	4d2e      	ldr	r5, [pc, #184]	; (80010b4 <HAL_RCC_OscConfig+0x28c>)
 8000ffa:	682b      	ldr	r3, [r5, #0]
 8000ffc:	05d9      	lsls	r1, r3, #23
 8000ffe:	d51b      	bpl.n	8001038 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001000:	68a3      	ldr	r3, [r4, #8]
 8001002:	4d2b      	ldr	r5, [pc, #172]	; (80010b0 <HAL_RCC_OscConfig+0x288>)
 8001004:	2b01      	cmp	r3, #1
 8001006:	d127      	bne.n	8001058 <HAL_RCC_OscConfig+0x230>
 8001008:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001010:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001014:	f7ff fad4 	bl	80005c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001018:	4f25      	ldr	r7, [pc, #148]	; (80010b0 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800101a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800101e:	079b      	lsls	r3, r3, #30
 8001020:	d53f      	bpl.n	80010a2 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8001022:	2e00      	cmp	r6, #0
 8001024:	f43f af16 	beq.w	8000e54 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001028:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <HAL_RCC_OscConfig+0x288>)
 800102a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800102c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	e70f      	b.n	8000e54 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001034:	2600      	movs	r6, #0
 8001036:	e7df      	b.n	8000ff8 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001040:	f7ff fabe 	bl	80005c0 <HAL_GetTick>
 8001044:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001046:	682b      	ldr	r3, [r5, #0]
 8001048:	05da      	lsls	r2, r3, #23
 800104a:	d4d9      	bmi.n	8001000 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800104c:	f7ff fab8 	bl	80005c0 <HAL_GetTick>
 8001050:	1bc0      	subs	r0, r0, r7
 8001052:	2864      	cmp	r0, #100	; 0x64
 8001054:	d9f7      	bls.n	8001046 <HAL_RCC_OscConfig+0x21e>
 8001056:	e72e      	b.n	8000eb6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001058:	b9ab      	cbnz	r3, 8001086 <HAL_RCC_OscConfig+0x25e>
 800105a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800105c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001060:	f023 0301 	bic.w	r3, r3, #1
 8001064:	672b      	str	r3, [r5, #112]	; 0x70
 8001066:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001068:	f023 0304 	bic.w	r3, r3, #4
 800106c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800106e:	f7ff faa7 	bl	80005c0 <HAL_GetTick>
 8001072:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001074:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001076:	0798      	lsls	r0, r3, #30
 8001078:	d5d3      	bpl.n	8001022 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800107a:	f7ff faa1 	bl	80005c0 <HAL_GetTick>
 800107e:	1bc0      	subs	r0, r0, r7
 8001080:	4540      	cmp	r0, r8
 8001082:	d9f7      	bls.n	8001074 <HAL_RCC_OscConfig+0x24c>
 8001084:	e717      	b.n	8000eb6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001086:	2b05      	cmp	r3, #5
 8001088:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800108a:	d103      	bne.n	8001094 <HAL_RCC_OscConfig+0x26c>
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	672b      	str	r3, [r5, #112]	; 0x70
 8001092:	e7b9      	b.n	8001008 <HAL_RCC_OscConfig+0x1e0>
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	672b      	str	r3, [r5, #112]	; 0x70
 800109a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800109c:	f023 0304 	bic.w	r3, r3, #4
 80010a0:	e7b5      	b.n	800100e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff fa8d 	bl	80005c0 <HAL_GetTick>
 80010a6:	eba0 0008 	sub.w	r0, r0, r8
 80010aa:	42a8      	cmp	r0, r5
 80010ac:	d9b6      	bls.n	800101c <HAL_RCC_OscConfig+0x1f4>
 80010ae:	e702      	b.n	8000eb6 <HAL_RCC_OscConfig+0x8e>
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b8:	4d24      	ldr	r5, [pc, #144]	; (800114c <HAL_RCC_OscConfig+0x324>)
 80010ba:	68ab      	ldr	r3, [r5, #8]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	f43f aeb5 	beq.w	8000e30 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80010c6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80010ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010ce:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d0:	d12f      	bne.n	8001132 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80010d2:	f7ff fa75 	bl	80005c0 <HAL_GetTick>
 80010d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	0199      	lsls	r1, r3, #6
 80010dc:	d423      	bmi.n	8001126 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010de:	6a22      	ldr	r2, [r4, #32]
 80010e0:	69e3      	ldr	r3, [r4, #28]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010e6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80010ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010f2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80010f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f8:	4c14      	ldr	r4, [pc, #80]	; (800114c <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fa:	0852      	lsrs	r2, r2, #1
 80010fc:	3a01      	subs	r2, #1
 80010fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001102:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800110a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800110c:	f7ff fa58 	bl	80005c0 <HAL_GetTick>
 8001110:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	019a      	lsls	r2, r3, #6
 8001116:	f53f aea1 	bmi.w	8000e5c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800111a:	f7ff fa51 	bl	80005c0 <HAL_GetTick>
 800111e:	1b40      	subs	r0, r0, r5
 8001120:	2802      	cmp	r0, #2
 8001122:	d9f6      	bls.n	8001112 <HAL_RCC_OscConfig+0x2ea>
 8001124:	e6c7      	b.n	8000eb6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001126:	f7ff fa4b 	bl	80005c0 <HAL_GetTick>
 800112a:	1b80      	subs	r0, r0, r6
 800112c:	2802      	cmp	r0, #2
 800112e:	d9d3      	bls.n	80010d8 <HAL_RCC_OscConfig+0x2b0>
 8001130:	e6c1      	b.n	8000eb6 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001132:	f7ff fa45 	bl	80005c0 <HAL_GetTick>
 8001136:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	019b      	lsls	r3, r3, #6
 800113c:	f57f ae8e 	bpl.w	8000e5c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001140:	f7ff fa3e 	bl	80005c0 <HAL_GetTick>
 8001144:	1b00      	subs	r0, r0, r4
 8001146:	2802      	cmp	r0, #2
 8001148:	d9f6      	bls.n	8001138 <HAL_RCC_OscConfig+0x310>
 800114a:	e6b4      	b.n	8000eb6 <HAL_RCC_OscConfig+0x8e>
 800114c:	40023800 	.word	0x40023800

08001150 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001150:	4913      	ldr	r1, [pc, #76]	; (80011a0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001152:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001154:	688b      	ldr	r3, [r1, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b04      	cmp	r3, #4
 800115c:	d003      	beq.n	8001166 <HAL_RCC_GetSysClockFreq+0x16>
 800115e:	2b08      	cmp	r3, #8
 8001160:	d003      	beq.n	800116a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001164:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001168:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800116a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800116c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800116e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001170:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001174:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001178:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800117c:	bf1a      	itte	ne
 800117e:	480a      	ldrne	r0, [pc, #40]	; (80011a8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001180:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001182:	4808      	ldreq	r0, [pc, #32]	; (80011a4 <HAL_RCC_GetSysClockFreq+0x54>)
 8001184:	fba1 0100 	umull	r0, r1, r1, r0
 8001188:	f7ff f856 	bl	8000238 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <HAL_RCC_GetSysClockFreq+0x50>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001194:	3301      	adds	r3, #1
 8001196:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001198:	fbb0 f0f3 	udiv	r0, r0, r3
 800119c:	bd08      	pop	{r3, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	00f42400 	.word	0x00f42400
 80011a8:	017d7840 	.word	0x017d7840

080011ac <HAL_RCC_ClockConfig>:
{
 80011ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011b0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80011b2:	4604      	mov	r4, r0
 80011b4:	b910      	cbnz	r0, 80011bc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80011b6:	2001      	movs	r0, #1
 80011b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011bc:	4a46      	ldr	r2, [pc, #280]	; (80012d8 <HAL_RCC_ClockConfig+0x12c>)
 80011be:	6813      	ldr	r3, [r2, #0]
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	428b      	cmp	r3, r1
 80011c6:	d328      	bcc.n	800121a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c8:	6821      	ldr	r1, [r4, #0]
 80011ca:	078f      	lsls	r7, r1, #30
 80011cc:	d430      	bmi.n	8001230 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ce:	07c8      	lsls	r0, r1, #31
 80011d0:	d443      	bmi.n	800125a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011d2:	4a41      	ldr	r2, [pc, #260]	; (80012d8 <HAL_RCC_ClockConfig+0x12c>)
 80011d4:	6813      	ldr	r3, [r2, #0]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	429d      	cmp	r5, r3
 80011dc:	d367      	bcc.n	80012ae <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011de:	6822      	ldr	r2, [r4, #0]
 80011e0:	0751      	lsls	r1, r2, #29
 80011e2:	d470      	bmi.n	80012c6 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e4:	0713      	lsls	r3, r2, #28
 80011e6:	d507      	bpl.n	80011f8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011e8:	4a3c      	ldr	r2, [pc, #240]	; (80012dc <HAL_RCC_ClockConfig+0x130>)
 80011ea:	6921      	ldr	r1, [r4, #16]
 80011ec:	6893      	ldr	r3, [r2, #8]
 80011ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011f6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011f8:	f7ff ffaa 	bl	8001150 <HAL_RCC_GetSysClockFreq>
 80011fc:	4b37      	ldr	r3, [pc, #220]	; (80012dc <HAL_RCC_ClockConfig+0x130>)
 80011fe:	4a38      	ldr	r2, [pc, #224]	; (80012e0 <HAL_RCC_ClockConfig+0x134>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001206:	5cd3      	ldrb	r3, [r2, r3]
 8001208:	40d8      	lsrs	r0, r3
 800120a:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <HAL_RCC_ClockConfig+0x138>)
 800120c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff f99a 	bl	8000548 <HAL_InitTick>
  return HAL_OK;
 8001214:	2000      	movs	r0, #0
 8001216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121a:	6813      	ldr	r3, [r2, #0]
 800121c:	f023 030f 	bic.w	r3, r3, #15
 8001220:	430b      	orrs	r3, r1
 8001222:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	4299      	cmp	r1, r3
 800122c:	d1c3      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xa>
 800122e:	e7cb      	b.n	80011c8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001230:	f011 0f04 	tst.w	r1, #4
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <HAL_RCC_ClockConfig+0x130>)
 8001236:	d003      	beq.n	8001240 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800123e:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001240:	070e      	lsls	r6, r1, #28
 8001242:	d503      	bpl.n	800124c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800124a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	68a0      	ldr	r0, [r4, #8]
 8001250:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001254:	4302      	orrs	r2, r0
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	e7b9      	b.n	80011ce <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125a:	6861      	ldr	r1, [r4, #4]
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <HAL_RCC_ClockConfig+0x130>)
 800125e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001260:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001262:	d11c      	bne.n	800129e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001264:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	d0a5      	beq.n	80011b6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800126a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001270:	4e1a      	ldr	r6, [pc, #104]	; (80012dc <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001272:	f022 0203 	bic.w	r2, r2, #3
 8001276:	430a      	orrs	r2, r1
 8001278:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800127a:	f7ff f9a1 	bl	80005c0 <HAL_GetTick>
 800127e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001280:	68b3      	ldr	r3, [r6, #8]
 8001282:	6862      	ldr	r2, [r4, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800128c:	d0a1      	beq.n	80011d2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128e:	f7ff f997 	bl	80005c0 <HAL_GetTick>
 8001292:	1bc0      	subs	r0, r0, r7
 8001294:	4540      	cmp	r0, r8
 8001296:	d9f3      	bls.n	8001280 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001298:	2003      	movs	r0, #3
}
 800129a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800129e:	2902      	cmp	r1, #2
 80012a0:	d102      	bne.n	80012a8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012a6:	e7df      	b.n	8001268 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a8:	f012 0f02 	tst.w	r2, #2
 80012ac:	e7dc      	b.n	8001268 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ae:	6813      	ldr	r3, [r2, #0]
 80012b0:	f023 030f 	bic.w	r3, r3, #15
 80012b4:	432b      	orrs	r3, r5
 80012b6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b8:	6813      	ldr	r3, [r2, #0]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	429d      	cmp	r5, r3
 80012c0:	f47f af79 	bne.w	80011b6 <HAL_RCC_ClockConfig+0xa>
 80012c4:	e78b      	b.n	80011de <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c6:	4905      	ldr	r1, [pc, #20]	; (80012dc <HAL_RCC_ClockConfig+0x130>)
 80012c8:	68e0      	ldr	r0, [r4, #12]
 80012ca:	688b      	ldr	r3, [r1, #8]
 80012cc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80012d0:	4303      	orrs	r3, r0
 80012d2:	608b      	str	r3, [r1, #8]
 80012d4:	e786      	b.n	80011e4 <HAL_RCC_ClockConfig+0x38>
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00
 80012dc:	40023800 	.word	0x40023800
 80012e0:	08002f50 	.word	0x08002f50
 80012e4:	2000000c 	.word	0x2000000c

080012e8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80012e8:	4b01      	ldr	r3, [pc, #4]	; (80012f0 <HAL_RCC_GetHCLKFreq+0x8>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	2000000c 	.word	0x2000000c

080012f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80012f8:	6802      	ldr	r2, [r0, #0]
{
 80012fa:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80012fc:	f012 0601 	ands.w	r6, r2, #1
 8001300:	d00b      	beq.n	800131a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001302:	4bba      	ldr	r3, [pc, #744]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001304:	6899      	ldr	r1, [r3, #8]
 8001306:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800130a:	6099      	str	r1, [r3, #8]
 800130c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800130e:	6899      	ldr	r1, [r3, #8]
 8001310:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001312:	fab6 f686 	clz	r6, r6
 8001316:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001318:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800131a:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800131e:	d012      	beq.n	8001346 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001320:	49b2      	ldr	r1, [pc, #712]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001322:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001324:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001328:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800132c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001330:	bf08      	it	eq
 8001332:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001334:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001338:	bf16      	itet	ne
 800133a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800133e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001340:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001342:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001346:	02d7      	lsls	r7, r2, #11
 8001348:	d510      	bpl.n	800136c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800134a:	48a8      	ldr	r0, [pc, #672]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800134c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800134e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001352:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001356:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800135a:	ea43 0301 	orr.w	r3, r3, r1
 800135e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001362:	f000 81a9 	beq.w	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001366:	2900      	cmp	r1, #0
 8001368:	bf08      	it	eq
 800136a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800136c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001370:	bf18      	it	ne
 8001372:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001374:	0690      	lsls	r0, r2, #26
 8001376:	d531      	bpl.n	80013dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	4b9c      	ldr	r3, [pc, #624]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800137a:	4f9d      	ldr	r7, [pc, #628]	; (80015f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001382:	641a      	str	r2, [r3, #64]	; 0x40
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001394:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001396:	f7ff f913 	bl	80005c0 <HAL_GetTick>
 800139a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	05d9      	lsls	r1, r3, #23
 80013a0:	f140 818c 	bpl.w	80016bc <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80013a4:	4f91      	ldr	r7, [pc, #580]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013a8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80013ac:	f040 8191 	bne.w	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80013b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013b2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80013b6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80013ba:	4a8c      	ldr	r2, [pc, #560]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013bc:	f040 81af 	bne.w	800171e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80013c0:	6891      	ldr	r1, [r2, #8]
 80013c2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80013c6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80013ca:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80013ce:	4301      	orrs	r1, r0
 80013d0:	6091      	str	r1, [r2, #8]
 80013d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80013d8:	430b      	orrs	r3, r1
 80013da:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	06df      	lsls	r7, r3, #27
 80013e0:	d50c      	bpl.n	80013fc <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80013e2:	4a82      	ldr	r2, [pc, #520]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013e4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80013e8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80013ec:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80013f0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80013f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013f6:	4301      	orrs	r1, r0
 80013f8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013fc:	0458      	lsls	r0, r3, #17
 80013fe:	d508      	bpl.n	8001412 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001400:	497a      	ldr	r1, [pc, #488]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001402:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001404:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001408:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800140c:	4302      	orrs	r2, r0
 800140e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001412:	0419      	lsls	r1, r3, #16
 8001414:	d508      	bpl.n	8001428 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001416:	4975      	ldr	r1, [pc, #468]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001418:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800141a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800141e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001422:	4302      	orrs	r2, r0
 8001424:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001428:	03da      	lsls	r2, r3, #15
 800142a:	d508      	bpl.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800142c:	496f      	ldr	r1, [pc, #444]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800142e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001430:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001434:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001438:	4302      	orrs	r2, r0
 800143a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800143e:	039f      	lsls	r7, r3, #14
 8001440:	d508      	bpl.n	8001454 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001442:	496a      	ldr	r1, [pc, #424]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001444:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001446:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800144a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800144e:	4302      	orrs	r2, r0
 8001450:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001454:	0658      	lsls	r0, r3, #25
 8001456:	d508      	bpl.n	800146a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001458:	4964      	ldr	r1, [pc, #400]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800145a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800145c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001460:	f022 0203 	bic.w	r2, r2, #3
 8001464:	4302      	orrs	r2, r0
 8001466:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800146a:	0619      	lsls	r1, r3, #24
 800146c:	d508      	bpl.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800146e:	495f      	ldr	r1, [pc, #380]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001470:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001472:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001476:	f022 020c 	bic.w	r2, r2, #12
 800147a:	4302      	orrs	r2, r0
 800147c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001480:	05da      	lsls	r2, r3, #23
 8001482:	d508      	bpl.n	8001496 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001484:	4959      	ldr	r1, [pc, #356]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001486:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001488:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800148c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001490:	4302      	orrs	r2, r0
 8001492:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001496:	059f      	lsls	r7, r3, #22
 8001498:	d508      	bpl.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800149a:	4954      	ldr	r1, [pc, #336]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800149c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800149e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014a2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80014a6:	4302      	orrs	r2, r0
 80014a8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80014ac:	0558      	lsls	r0, r3, #21
 80014ae:	d508      	bpl.n	80014c2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80014b0:	494e      	ldr	r1, [pc, #312]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80014bc:	4302      	orrs	r2, r0
 80014be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80014c2:	0519      	lsls	r1, r3, #20
 80014c4:	d508      	bpl.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80014c6:	4949      	ldr	r1, [pc, #292]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80014d2:	4302      	orrs	r2, r0
 80014d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80014d8:	04da      	lsls	r2, r3, #19
 80014da:	d508      	bpl.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80014dc:	4943      	ldr	r1, [pc, #268]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014de:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80014e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014e4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80014e8:	4302      	orrs	r2, r0
 80014ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80014ee:	049f      	lsls	r7, r3, #18
 80014f0:	d508      	bpl.n	8001504 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80014f2:	493e      	ldr	r1, [pc, #248]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014f4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80014f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014fa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80014fe:	4302      	orrs	r2, r0
 8001500:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001504:	0258      	lsls	r0, r3, #9
 8001506:	d508      	bpl.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001508:	4938      	ldr	r1, [pc, #224]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800150a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800150c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001510:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001514:	4302      	orrs	r2, r0
 8001516:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800151a:	0299      	lsls	r1, r3, #10
 800151c:	d50c      	bpl.n	8001538 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800151e:	4833      	ldr	r0, [pc, #204]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001520:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001522:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001526:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800152a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800152e:	bf08      	it	eq
 8001530:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001532:	430a      	orrs	r2, r1
 8001534:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001538:	f013 0f08 	tst.w	r3, #8
 800153c:	bf18      	it	ne
 800153e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001540:	035a      	lsls	r2, r3, #13
 8001542:	d508      	bpl.n	8001556 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001544:	4929      	ldr	r1, [pc, #164]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001546:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001548:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800154c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001550:	4302      	orrs	r2, r0
 8001552:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001556:	021f      	lsls	r7, r3, #8
 8001558:	d509      	bpl.n	800156e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800155a:	4924      	ldr	r1, [pc, #144]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800155c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001560:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001564:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001568:	4302      	orrs	r2, r0
 800156a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800156e:	0158      	lsls	r0, r3, #5
 8001570:	d509      	bpl.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001572:	491e      	ldr	r1, [pc, #120]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001574:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001578:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800157c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001580:	4302      	orrs	r2, r0
 8001582:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001586:	0119      	lsls	r1, r3, #4
 8001588:	d509      	bpl.n	800159e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800158a:	4918      	ldr	r1, [pc, #96]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800158c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001590:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001594:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001598:	4302      	orrs	r2, r0
 800159a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800159e:	00da      	lsls	r2, r3, #3
 80015a0:	d509      	bpl.n	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80015a2:	4912      	ldr	r1, [pc, #72]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015a4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80015a8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80015ac:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80015b0:	4302      	orrs	r2, r0
 80015b2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80015b6:	2e01      	cmp	r6, #1
 80015b8:	f000 80b5 	beq.w	8001726 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80015bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015c0:	f000 80b1 	beq.w	8001726 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80015c4:	2d01      	cmp	r5, #1
 80015c6:	d175      	bne.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80015c8:	4d08      	ldr	r5, [pc, #32]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015ca:	682b      	ldr	r3, [r5, #0]
 80015cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d0:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015d2:	f7fe fff5 	bl	80005c0 <HAL_GetTick>
 80015d6:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80015d8:	682b      	ldr	r3, [r5, #0]
 80015da:	009f      	lsls	r7, r3, #2
 80015dc:	f100 8127 	bmi.w	800182e <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80015e0:	6821      	ldr	r1, [r4, #0]
 80015e2:	030e      	lsls	r6, r1, #12
 80015e4:	d506      	bpl.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80015e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015e8:	b143      	cbz	r3, 80015fc <HAL_RCCEx_PeriphCLKConfig+0x308>
 80015ea:	e003      	b.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40007000 	.word	0x40007000
 80015f4:	02cd      	lsls	r5, r1, #11
 80015f6:	d51d      	bpl.n	8001634 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80015f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015fa:	b9db      	cbnz	r3, 8001634 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80015fc:	4a93      	ldr	r2, [pc, #588]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80015fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001602:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001606:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800160a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800160e:	4303      	orrs	r3, r0
 8001610:	6960      	ldr	r0, [r4, #20]
 8001612:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001616:	69a0      	ldr	r0, [r4, #24]
 8001618:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001620:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001624:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001626:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800162a:	3801      	subs	r0, #1
 800162c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001630:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001634:	0288      	lsls	r0, r1, #10
 8001636:	d515      	bpl.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001638:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800163a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800163e:	d111      	bne.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001640:	4a82      	ldr	r2, [pc, #520]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001642:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001646:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800164a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800164e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001652:	4303      	orrs	r3, r0
 8001654:	6960      	ldr	r0, [r4, #20]
 8001656:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800165a:	6a20      	ldr	r0, [r4, #32]
 800165c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001664:	070a      	lsls	r2, r1, #28
 8001666:	d519      	bpl.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001668:	4978      	ldr	r1, [pc, #480]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800166a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800166e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001672:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001676:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800167a:	4313      	orrs	r3, r2
 800167c:	6962      	ldr	r2, [r4, #20]
 800167e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001682:	69e2      	ldr	r2, [r4, #28]
 8001684:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800168c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001690:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001692:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001696:	4313      	orrs	r3, r2
 8001698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800169c:	4c6b      	ldr	r4, [pc, #428]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016a6:	f7fe ff8b 	bl	80005c0 <HAL_GetTick>
 80016aa:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	f140 80c4 	bpl.w	800183c <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80016b4:	2000      	movs	r0, #0
 80016b6:	e009      	b.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 80016b8:	2601      	movs	r6, #1
 80016ba:	e657      	b.n	800136c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016bc:	f7fe ff80 	bl	80005c0 <HAL_GetTick>
 80016c0:	eba0 0008 	sub.w	r0, r0, r8
 80016c4:	2864      	cmp	r0, #100	; 0x64
 80016c6:	f67f ae69 	bls.w	800139c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80016ca:	2003      	movs	r0, #3
}
 80016cc:	b003      	add	sp, #12
 80016ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016d4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80016d8:	4293      	cmp	r3, r2
 80016da:	f43f ae69 	beq.w	80013b0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80016e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80016e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016ea:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80016ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016f2:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80016f4:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80016f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016f8:	07da      	lsls	r2, r3, #31
 80016fa:	f57f ae59 	bpl.w	80013b0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80016fe:	f7fe ff5f 	bl	80005c0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001706:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800170a:	079b      	lsls	r3, r3, #30
 800170c:	f53f ae50 	bmi.w	80013b0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7fe ff56 	bl	80005c0 <HAL_GetTick>
 8001714:	eba0 0008 	sub.w	r0, r0, r8
 8001718:	4548      	cmp	r0, r9
 800171a:	d9f5      	bls.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800171c:	e7d5      	b.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800171e:	6891      	ldr	r1, [r2, #8]
 8001720:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001724:	e654      	b.n	80013d0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001726:	4e49      	ldr	r6, [pc, #292]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001728:	6833      	ldr	r3, [r6, #0]
 800172a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800172e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001730:	f7fe ff46 	bl	80005c0 <HAL_GetTick>
 8001734:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001736:	6833      	ldr	r3, [r6, #0]
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	d472      	bmi.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800173c:	6822      	ldr	r2, [r4, #0]
 800173e:	07d7      	lsls	r7, r2, #31
 8001740:	d512      	bpl.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001744:	b983      	cbnz	r3, 8001768 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001746:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800174a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800174e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001752:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001756:	430b      	orrs	r3, r1
 8001758:	6861      	ldr	r1, [r4, #4]
 800175a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800175e:	68a1      	ldr	r1, [r4, #8]
 8001760:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001764:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001768:	0316      	lsls	r6, r2, #12
 800176a:	d503      	bpl.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800176c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800176e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001772:	d005      	beq.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001774:	02d0      	lsls	r0, r2, #11
 8001776:	d51e      	bpl.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800177a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800177e:	d11a      	bne.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001780:	4932      	ldr	r1, [pc, #200]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001782:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001786:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800178a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800178e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001792:	4303      	orrs	r3, r0
 8001794:	6860      	ldr	r0, [r4, #4]
 8001796:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800179a:	68e0      	ldr	r0, [r4, #12]
 800179c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80017a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80017a4:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80017a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017aa:	f020 001f 	bic.w	r0, r0, #31
 80017ae:	3b01      	subs	r3, #1
 80017b0:	4303      	orrs	r3, r0
 80017b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80017b6:	01d1      	lsls	r1, r2, #7
 80017b8:	d511      	bpl.n	80017de <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80017ba:	4924      	ldr	r1, [pc, #144]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80017bc:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80017c0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80017c4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80017c8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80017cc:	4303      	orrs	r3, r0
 80017ce:	6860      	ldr	r0, [r4, #4]
 80017d0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80017d4:	6920      	ldr	r0, [r4, #16]
 80017d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80017da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80017de:	0192      	lsls	r2, r2, #6
 80017e0:	d50d      	bpl.n	80017fe <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80017e2:	6923      	ldr	r3, [r4, #16]
 80017e4:	6862      	ldr	r2, [r4, #4]
 80017e6:	041b      	lsls	r3, r3, #16
 80017e8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80017ec:	68e2      	ldr	r2, [r4, #12]
 80017ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017f2:	68a2      	ldr	r2, [r4, #8]
 80017f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80017fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80017fe:	4e13      	ldr	r6, [pc, #76]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001800:	6833      	ldr	r3, [r6, #0]
 8001802:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001806:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001808:	f7fe feda 	bl	80005c0 <HAL_GetTick>
 800180c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800180e:	6833      	ldr	r3, [r6, #0]
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	f53f aed7 	bmi.w	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001816:	f7fe fed3 	bl	80005c0 <HAL_GetTick>
 800181a:	1bc0      	subs	r0, r0, r7
 800181c:	2864      	cmp	r0, #100	; 0x64
 800181e:	d9f6      	bls.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001820:	e753      	b.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001822:	f7fe fecd 	bl	80005c0 <HAL_GetTick>
 8001826:	1bc0      	subs	r0, r0, r7
 8001828:	2864      	cmp	r0, #100	; 0x64
 800182a:	d984      	bls.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800182c:	e74d      	b.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800182e:	f7fe fec7 	bl	80005c0 <HAL_GetTick>
 8001832:	1b80      	subs	r0, r0, r6
 8001834:	2864      	cmp	r0, #100	; 0x64
 8001836:	f67f aecf 	bls.w	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800183a:	e746      	b.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800183c:	f7fe fec0 	bl	80005c0 <HAL_GetTick>
 8001840:	1b40      	subs	r0, r0, r5
 8001842:	2864      	cmp	r0, #100	; 0x64
 8001844:	f67f af32 	bls.w	80016ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001848:	e73f      	b.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8001850:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800185c:	4770      	bx	lr

0800185e <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800185e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001862:	4605      	mov	r5, r0
 8001864:	b089      	sub	sp, #36	; 0x24
 8001866:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7fe feaa 	bl	80005c0 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 800186c:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 800186e:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8001870:	2108      	movs	r1, #8
 8001872:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2] = {0, 0};
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8001878:	f000 fd65 	bl	8002346 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 800187c:	4604      	mov	r4, r0
 800187e:	bb40      	cbnz	r0, 80018d2 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8001880:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001882:	6828      	ldr	r0, [r5, #0]
 8001884:	0409      	lsls	r1, r1, #16
 8001886:	f000 fe69 	bl	800255c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 800188a:	4604      	mov	r4, r0
 800188c:	bb08      	cbnz	r0, 80018d2 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8001892:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  SDMMC_ConfigData(hsd->Instance, &config);
 8001894:	a902      	add	r1, sp, #8
 8001896:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001898:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 800189a:	2308      	movs	r3, #8
 800189c:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800189e:	2330      	movs	r3, #48	; 0x30
 80018a0:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80018a2:	2302      	movs	r3, #2
 80018a4:	9305      	str	r3, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80018a6:	2301      	movs	r3, #1
 80018a8:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 80018aa:	f000 fd39 	bl	8002320 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80018ae:	6828      	ldr	r0, [r5, #0]
 80018b0:	f000 fe85 	bl	80025be <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 80018b4:	4604      	mov	r4, r0
 80018b6:	b960      	cbnz	r0, 80018d2 <SD_FindSCR+0x74>
 80018b8:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80018ba:	f240 482a 	movw	r8, #1066	; 0x42a
 80018be:	6828      	ldr	r0, [r5, #0]
 80018c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018c2:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80018c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80018c8:	d007      	beq.n	80018da <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80018ca:	0719      	lsls	r1, r3, #28
 80018cc:	d518      	bpl.n	8001900 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80018ce:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80018d0:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 80018d2:	4620      	mov	r0, r4
 80018d4:	b009      	add	sp, #36	; 0x24
 80018d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80018da:	029b      	lsls	r3, r3, #10
 80018dc:	d507      	bpl.n	80018ee <SD_FindSCR+0x90>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80018de:	f000 fc69 	bl	80021b4 <SDMMC_ReadFIFO>
 80018e2:	ab08      	add	r3, sp, #32
 80018e4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 80018e8:	3701      	adds	r7, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80018ea:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80018ee:	f7fe fe67 	bl	80005c0 <HAL_GetTick>
 80018f2:	eba0 0009 	sub.w	r0, r0, r9
 80018f6:	3001      	adds	r0, #1
 80018f8:	d1e1      	bne.n	80018be <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 80018fa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80018fe:	e7e8      	b.n	80018d2 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8001900:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001902:	079a      	lsls	r2, r3, #30
 8001904:	d501      	bpl.n	800190a <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8001906:	2402      	movs	r4, #2
 8001908:	e7e2      	b.n	80018d0 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800190a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800190c:	069b      	lsls	r3, r3, #26
 800190e:	d501      	bpl.n	8001914 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8001910:	2420      	movs	r4, #32
 8001912:	e7dd      	b.n	80018d0 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001914:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8001918:	6383      	str	r3, [r0, #56]	; 0x38
 800191a:	9b00      	ldr	r3, [sp, #0]
 800191c:	ba1b      	rev	r3, r3
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800191e:	6073      	str	r3, [r6, #4]
 8001920:	9b01      	ldr	r3, [sp, #4]
 8001922:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8001924:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8001926:	e7d4      	b.n	80018d2 <SD_FindSCR+0x74>

08001928 <HAL_SD_ReadBlocks_DMA>:
{
 8001928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800192c:	4616      	mov	r6, r2
 800192e:	b086      	sub	sp, #24
 8001930:	4605      	mov	r5, r0
 8001932:	461f      	mov	r7, r3
  if(NULL == pData)
 8001934:	460a      	mov	r2, r1
 8001936:	b939      	cbnz	r1, 8001948 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001938:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800193a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800193e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8001940:	2001      	movs	r0, #1
}
 8001942:	b006      	add	sp, #24
 8001944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8001948:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800194c:	b2c0      	uxtb	r0, r0
 800194e:	2801      	cmp	r0, #1
 8001950:	d166      	bne.n	8001a20 <HAL_SD_ReadBlocks_DMA+0xf8>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001952:	19f4      	adds	r4, r6, r7
 8001954:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001956:	2300      	movs	r3, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001958:	428c      	cmp	r4, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800195a:	63ab      	str	r3, [r5, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800195c:	d904      	bls.n	8001968 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800195e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001960:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001964:	63ab      	str	r3, [r5, #56]	; 0x38
      return HAL_ERROR;
 8001966:	e7ec      	b.n	8001942 <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->Instance->DCTRL = 0U;
 8001968:	682c      	ldr	r4, [r5, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800196a:	2103      	movs	r1, #3
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800196c:	ea4f 2847 	mov.w	r8, r7, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 8001970:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001974:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8001976:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001978:	492a      	ldr	r1, [pc, #168]	; (8001a24 <HAL_SD_ReadBlocks_DMA+0xfc>)
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800197a:	f440 7095 	orr.w	r0, r0, #298	; 0x12a
 800197e:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001980:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8001982:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001984:	4928      	ldr	r1, [pc, #160]	; (8001a28 <HAL_SD_ReadBlocks_DMA+0x100>)
    hsd->hdmarx->XferAbortCallback = NULL;
 8001986:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001988:	ea4f 0398 	mov.w	r3, r8, lsr #2
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800198c:	64c1      	str	r1, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800198e:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8001992:	f7fe fe9e 	bl	80006d2 <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 8001996:	6828      	ldr	r0, [r5, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8001998:	2401      	movs	r4, #1
    SDMMC_ConfigData(hsd->Instance, &config);
 800199a:	4669      	mov	r1, sp
    __HAL_SD_DMA_ENABLE(hsd);
 800199c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800199e:	9405      	str	r4, [sp, #20]
    __HAL_SD_DMA_ENABLE(hsd);
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	62c3      	str	r3, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80019a6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80019a8:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80019ae:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80019b2:	f04f 0390 	mov.w	r3, #144	; 0x90
      BlockAdd *= 512U;
 80019b6:	bf18      	it	ne
 80019b8:	0276      	lslne	r6, r6, #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80019ba:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80019bc:	2302      	movs	r3, #2
 80019be:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	9304      	str	r3, [sp, #16]
    SDMMC_ConfigData(hsd->Instance, &config);
 80019c4:	f000 fcac 	bl	8002320 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80019c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019cc:	6828      	ldr	r0, [r5, #0]
 80019ce:	f000 fcba 	bl	8002346 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80019d2:	b148      	cbz	r0, 80019e8 <HAL_SD_ReadBlocks_DMA+0xc0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80019da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80019dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80019de:	4318      	orrs	r0, r3
 80019e0:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80019e2:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 80019e6:	e7ab      	b.n	8001940 <HAL_SD_ReadBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 80019e8:	2f01      	cmp	r7, #1
 80019ea:	d912      	bls.n	8001a12 <HAL_SD_ReadBlocks_DMA+0xea>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80019ec:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80019ee:	4631      	mov	r1, r6
 80019f0:	6828      	ldr	r0, [r5, #0]
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80019f2:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80019f4:	f000 fcd7 	bl	80023a6 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80019f8:	2800      	cmp	r0, #0
 80019fa:	d0a2      	beq.n	8001942 <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80019fc:	682b      	ldr	r3, [r5, #0]
 80019fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001a02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001a04:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001a06:	4318      	orrs	r0, r3
 8001a08:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
      return HAL_ERROR;
 8001a10:	e797      	b.n	8001942 <HAL_SD_ReadBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001a12:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001a14:	4631      	mov	r1, r6
 8001a16:	6828      	ldr	r0, [r5, #0]
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001a18:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001a1a:	f000 fcac 	bl	8002376 <SDMMC_CmdReadSingleBlock>
 8001a1e:	e7eb      	b.n	80019f8 <HAL_SD_ReadBlocks_DMA+0xd0>
    return HAL_BUSY;
 8001a20:	2002      	movs	r0, #2
 8001a22:	e78e      	b.n	8001942 <HAL_SD_ReadBlocks_DMA+0x1a>
 8001a24:	08001b27 	.word	0x08001b27
 8001a28:	0800208f 	.word	0x0800208f

08001a2c <HAL_SD_WriteBlocks_DMA>:
{
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	4604      	mov	r4, r0
 8001a30:	b087      	sub	sp, #28
 8001a32:	4615      	mov	r5, r2
 8001a34:	461e      	mov	r6, r3
  if(NULL == pData)
 8001a36:	460f      	mov	r7, r1
 8001a38:	b931      	cbnz	r1, 8001a48 <HAL_SD_WriteBlocks_DMA+0x1c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001a3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001a3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a40:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8001a42:	2001      	movs	r0, #1
}
 8001a44:	b007      	add	sp, #28
 8001a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8001a48:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001a4c:	b2c0      	uxtb	r0, r0
 8001a4e:	2801      	cmp	r0, #1
 8001a50:	d162      	bne.n	8001b18 <HAL_SD_WriteBlocks_DMA+0xec>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a52:	18eb      	adds	r3, r5, r3
 8001a54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a56:	2200      	movs	r2, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a58:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5a:	63a2      	str	r2, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a5c:	d904      	bls.n	8001a68 <HAL_SD_WriteBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001a5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a64:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001a66:	e7ed      	b.n	8001a44 <HAL_SD_WriteBlocks_DMA+0x18>
    hsd->Instance->DCTRL = 0U;
 8001a68:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8001a6a:	2303      	movs	r3, #3
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001a6c:	492b      	ldr	r1, [pc, #172]	; (8001b1c <HAL_SD_WriteBlocks_DMA+0xf0>)
    hsd->State = HAL_SD_STATE_BUSY;
 8001a6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001a72:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8001a74:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001a76:	f043 031a 	orr.w	r3, r3, #26
 8001a7a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001a7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a7e:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8001a80:	4927      	ldr	r1, [pc, #156]	; (8001b20 <HAL_SD_WriteBlocks_DMA+0xf4>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8001a82:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8001a84:	64d9      	str	r1, [r3, #76]	; 0x4c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001a86:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001a8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a8c:	2b01      	cmp	r3, #1
      BlockAdd *= 512U;
 8001a8e:	bf18      	it	ne
 8001a90:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001a92:	f000 fc58 	bl	8002346 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001a96:	b150      	cbz	r0, 8001aae <HAL_SD_WriteBlocks_DMA+0x82>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001aa2:	4318      	orrs	r0, r3
 8001aa4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001aac:	e7ca      	b.n	8001a44 <HAL_SD_WriteBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 8001aae:	2e01      	cmp	r6, #1
 8001ab0:	d90f      	bls.n	8001ad2 <HAL_SD_WriteBlocks_DMA+0xa6>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001ab2:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001ab8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001aba:	f000 fca4 	bl	8002406 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001abe:	4605      	mov	r5, r0
 8001ac0:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ac2:	b168      	cbz	r0, 8001ae0 <HAL_SD_WriteBlocks_DMA+0xb4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8001ac4:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8001ac8:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001aca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001acc:	4305      	orrs	r5, r0
 8001ace:	63a5      	str	r5, [r4, #56]	; 0x38
 8001ad0:	e7e9      	b.n	8001aa6 <HAL_SD_WriteBlocks_DMA+0x7a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001ad2:	2390      	movs	r3, #144	; 0x90
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001ad8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001ada:	f000 fc7c 	bl	80023d6 <SDMMC_CmdWriteSingleBlock>
 8001ade:	e7ee      	b.n	8001abe <HAL_SD_WriteBlocks_DMA+0x92>
    __HAL_SD_DMA_ENABLE(hsd);
 8001ae0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001ae2:	0276      	lsls	r6, r6, #9
 8001ae4:	3280      	adds	r2, #128	; 0x80
 8001ae6:	4639      	mov	r1, r7
    __HAL_SD_DMA_ENABLE(hsd);
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001aec:	6c20      	ldr	r0, [r4, #64]	; 0x40
    __HAL_SD_DMA_ENABLE(hsd);
 8001aee:	f842 3c54 	str.w	r3, [r2, #-84]
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001af2:	08b3      	lsrs	r3, r6, #2
 8001af4:	f7fe fded 	bl	80006d2 <HAL_DMA_Start_IT>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
    SDMMC_ConfigData(hsd->Instance, &config);
 8001afc:	4669      	mov	r1, sp
 8001afe:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8001b00:	9503      	str	r5, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8001b02:	9504      	str	r5, [sp, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001b04:	e88d 0048 	stmia.w	sp, {r3, r6}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8001b08:	2390      	movs	r3, #144	; 0x90
 8001b0a:	9302      	str	r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8001b10:	f000 fc06 	bl	8002320 <SDMMC_ConfigData>
    return HAL_OK;
 8001b14:	4628      	mov	r0, r5
 8001b16:	e795      	b.n	8001a44 <HAL_SD_WriteBlocks_DMA+0x18>
    return HAL_BUSY;
 8001b18:	2002      	movs	r0, #2
 8001b1a:	e793      	b.n	8001a44 <HAL_SD_WriteBlocks_DMA+0x18>
 8001b1c:	08001851 	.word	0x08001851
 8001b20:	0800208f 	.word	0x0800208f

08001b24 <HAL_SD_ErrorCallback>:
 8001b24:	4770      	bx	lr

08001b26 <SD_DMAReceiveCplt>:
{
 8001b26:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8001b28:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8001b2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b2c:	2b82      	cmp	r3, #130	; 0x82
 8001b2e:	d109      	bne.n	8001b44 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001b30:	6820      	ldr	r0, [r4, #0]
 8001b32:	f000 fc81 	bl	8002438 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001b36:	b128      	cbz	r0, 8001b44 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 8001b38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b3a:	4318      	orrs	r0, r3
 8001b3c:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f7ff fff0 	bl	8001b24 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8001b44:	6823      	ldr	r3, [r4, #0]
  HAL_SD_RxCpltCallback(hsd);
 8001b46:	4620      	mov	r0, r4
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8001b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b4a:	f022 0208 	bic.w	r2, r2, #8
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001b50:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_RxCpltCallback(hsd);
 8001b5c:	f000 fe66 	bl	800282c <HAL_SD_RxCpltCallback>
 8001b60:	bd10      	pop	{r4, pc}

08001b62 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8001b62:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8001b64:	0f9a      	lsrs	r2, r3, #30
 8001b66:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8001b68:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8001b6c:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8001b6e:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8001b72:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8001b74:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001b78:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8001b7a:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8001b7e:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8001b80:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8001b82:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8001b84:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001b86:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8001b88:	0112      	lsls	r2, r2, #4
 8001b8a:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8001b8c:	88ca      	ldrh	r2, [r1, #6]
{
 8001b8e:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8001b90:	b292      	uxth	r2, r2
 8001b92:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8001b96:	4322      	orrs	r2, r4
 8001b98:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8001b9a:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8001b9e:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8001ba0:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8001ba4:	09d4      	lsrs	r4, r2, #7
 8001ba6:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8001ba8:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8001bac:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8001bae:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8001bb2:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8001bb4:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8001bb8:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8001bba:	2400      	movs	r4, #0
 8001bbc:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001bbe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001bc0:	2c00      	cmp	r4, #0
 8001bc2:	f040 8083 	bne.w	8001ccc <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8001bc6:	0292      	lsls	r2, r2, #10
    pCSD->DeviceSize |= (tmp) << 2;
 8001bc8:	009b      	lsls	r3, r3, #2
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8001bca:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSize |= (tmp) << 2;
 8001bce:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8001bd2:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8001bd4:	690a      	ldr	r2, [r1, #16]
 8001bd6:	4313      	orrs	r3, r2
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8001bd8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 8001bda:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8001bdc:	690b      	ldr	r3, [r1, #16]
 8001bde:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8001be2:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8001be4:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8001be8:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8001bea:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8001bee:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8001bf0:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8001bf4:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8001bf6:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8001bfa:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8001bfc:	0bd3      	lsrs	r3, r2, #15
 8001bfe:	f003 0306 	and.w	r3, r3, #6
 8001c02:	760b      	strb	r3, [r1, #24]
 8001c04:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8001c08:	7e0c      	ldrb	r4, [r1, #24]
 8001c0a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8001c0e:	4322      	orrs	r2, r4
 8001c10:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8001c12:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8001c14:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8001c16:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8001c18:	3402      	adds	r4, #2
 8001c1a:	40a2      	lsls	r2, r4
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8001c1c:	2401      	movs	r4, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8001c1e:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8001c20:	7a0d      	ldrb	r5, [r1, #8]
 8001c22:	40ac      	lsls	r4, r5
 8001c24:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8001c26:	0a64      	lsrs	r4, r4, #9
 8001c28:	4362      	muls	r2, r4
 8001c2a:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8001c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8001c30:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8001c32:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8001c36:	005b      	lsls	r3, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8001c38:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8001c3a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001c3e:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8001c40:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8001c42:	7e8a      	ldrb	r2, [r1, #26]
 8001c44:	f3c3 14c0 	ubfx	r4, r3, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8001c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8001c4c:	4322      	orrs	r2, r4
 8001c4e:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8001c50:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8001c52:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8001c54:	0fda      	lsrs	r2, r3, #31
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8001c56:	f3c3 5081 	ubfx	r0, r3, #22, #2
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8001c5a:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8001c5c:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8001c60:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8001c62:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8001c66:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8001c68:	0d9a      	lsrs	r2, r3, #22
 8001c6a:	f002 020c 	and.w	r2, r2, #12
 8001c6e:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8001c70:	7fca      	ldrb	r2, [r1, #31]
 8001c72:	4302      	orrs	r2, r0
  pCSD->Reserved3           = 0;
 8001c74:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8001c76:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8001c78:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8001c7c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8001c80:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 8001c84:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8001c88:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8001c8c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8001c90:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8001c94:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001c98:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8001c9c:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8001ca0:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8001ca4:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8001ca8:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8001cac:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8001cb0:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8001cb4:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8001cb8:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 8001cbc:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8001cc0:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8001cca:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001ccc:	2c01      	cmp	r4, #1
 8001cce:	d11a      	bne.n	8001d06 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8001cd0:	041b      	lsls	r3, r3, #16
 8001cd2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001cd6:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8001cd8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8);
 8001cda:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8001cdc:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 8001cde:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001ce2:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8001ce4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001ce8:	690c      	ldr	r4, [r1, #16]
 8001cea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001cee:	4322      	orrs	r2, r4
 8001cf0:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8001cf2:	690a      	ldr	r2, [r1, #16]
 8001cf4:	0292      	lsls	r2, r2, #10
 8001cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cfa:	6542      	str	r2, [r0, #84]	; 0x54
 8001cfc:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8001cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d02:	6582      	str	r2, [r0, #88]	; 0x58
 8001d04:	e794      	b.n	8001c30 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8001d06:	6803      	ldr	r3, [r0, #0]
 8001d08:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001d0e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001d16:	2301      	movs	r3, #1
 8001d18:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd30      	pop	{r4, r5, pc}

08001d20 <HAL_SD_InitCard>:
{
 8001d20:	b570      	push	{r4, r5, r6, lr}
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8001d22:	2376      	movs	r3, #118	; 0x76
{
 8001d24:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001d26:	2500      	movs	r5, #0
{
 8001d28:	4604      	mov	r4, r0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8001d2a:	930c      	str	r3, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, Init);
 8001d2c:	ab0a      	add	r3, sp, #40	; 0x28
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8001d2e:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d30:	950b      	str	r5, [sp, #44]	; 0x2c
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001d32:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8001d34:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d36:	9509      	str	r5, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 8001d38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d3c:	ab07      	add	r3, sp, #28
 8001d3e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001d42:	6820      	ldr	r0, [r4, #0]
 8001d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d46:	f000 fa19 	bl	800217c <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 8001d4a:	6820      	ldr	r0, [r4, #0]
 8001d4c:	6843      	ldr	r3, [r0, #4]
 8001d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d52:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8001d54:	f000 fa31 	bl	80021ba <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8001d58:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8001d5a:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8001d5c:	6853      	ldr	r3, [r2, #4]
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d62:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8001d64:	f7fe fc32 	bl	80005cc <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001d68:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 8001d6a:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001d6c:	f000 fb96 	bl	800249c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d70:	4606      	mov	r6, r0
 8001d72:	b968      	cbnz	r0, 8001d90 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8001d74:	6820      	ldr	r0, [r4, #0]
 8001d76:	f000 fbb9 	bl	80024ec <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d7a:	b380      	cbz	r0, 8001dde <HAL_SD_InitCard+0xbe>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001d7c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 8001d80:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001d82:	9b06      	ldr	r3, [sp, #24]
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	42ab      	cmp	r3, r5
 8001d88:	9206      	str	r2, [sp, #24]
 8001d8a:	d108      	bne.n	8001d9e <HAL_SD_InitCard+0x7e>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8001d8c:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8001d90:	2001      	movs	r0, #1
 8001d92:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001d96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001d98:	430e      	orrs	r6, r1
 8001d9a:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001d9c:	e083      	b.n	8001ea6 <HAL_SD_InitCard+0x186>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001d9e:	2100      	movs	r1, #0
 8001da0:	6820      	ldr	r0, [r4, #0]
 8001da2:	f000 fbdb 	bl	800255c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001da6:	4601      	mov	r1, r0
 8001da8:	b110      	cbz	r0, 8001db0 <HAL_SD_InitCard+0x90>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001daa:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8001dae:	e7ef      	b.n	8001d90 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8001db0:	6820      	ldr	r0, [r4, #0]
 8001db2:	f000 fbeb 	bl	800258c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001db6:	4601      	mov	r1, r0
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d1f6      	bne.n	8001daa <HAL_SD_InitCard+0x8a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001dbc:	6820      	ldr	r0, [r4, #0]
 8001dbe:	f000 fa17 	bl	80021f0 <SDMMC_GetResponse>
    while(validvoltage == 0)
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	dadd      	bge.n	8001d82 <HAL_SD_InitCard+0x62>
    hsd->SdCard.CardType = CARD_SDSC;
 8001dc6:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8001dc8:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 8001dca:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8001dcc:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8001dce:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8001dd2:	f000 f9f6 	bl	80021c2 <SDMMC_GetPowerState>
 8001dd6:	bb20      	cbnz	r0, 8001e22 <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8001dd8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8001ddc:	e06d      	b.n	8001eba <HAL_SD_InitCard+0x19a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8001dde:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001de0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 8001de4:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001de6:	9b06      	ldr	r3, [sp, #24]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	42ab      	cmp	r3, r5
 8001dec:	9206      	str	r2, [sp, #24]
 8001dee:	d0cd      	beq.n	8001d8c <HAL_SD_InitCard+0x6c>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001df0:	2100      	movs	r1, #0
 8001df2:	6820      	ldr	r0, [r4, #0]
 8001df4:	f000 fbb2 	bl	800255c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001df8:	4606      	mov	r6, r0
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	d1c8      	bne.n	8001d90 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8001dfe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e02:	6820      	ldr	r0, [r4, #0]
 8001e04:	f000 fbc2 	bl	800258c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001e08:	4606      	mov	r6, r0
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d1c0      	bne.n	8001d90 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001e0e:	4601      	mov	r1, r0
 8001e10:	6820      	ldr	r0, [r4, #0]
 8001e12:	f000 f9ed 	bl	80021f0 <SDMMC_GetResponse>
    while(validvoltage == 0)
 8001e16:	2800      	cmp	r0, #0
 8001e18:	dae5      	bge.n	8001de6 <HAL_SD_InitCard+0xc6>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8001e1a:	0043      	lsls	r3, r0, #1
 8001e1c:	d5d3      	bpl.n	8001dc6 <HAL_SD_InitCard+0xa6>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e7d2      	b.n	8001dc8 <HAL_SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001e22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d01a      	beq.n	8001e5e <HAL_SD_InitCard+0x13e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8001e28:	6820      	ldr	r0, [r4, #0]
 8001e2a:	f000 fbe0 	bl	80025ee <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e2e:	4605      	mov	r5, r0
 8001e30:	2800      	cmp	r0, #0
 8001e32:	d142      	bne.n	8001eba <HAL_SD_InitCard+0x19a>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001e34:	4601      	mov	r1, r0
 8001e36:	6820      	ldr	r0, [r4, #0]
 8001e38:	f000 f9da 	bl	80021f0 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001e3c:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001e3e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001e40:	6820      	ldr	r0, [r4, #0]
 8001e42:	f000 f9d5 	bl	80021f0 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001e46:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001e48:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001e4a:	6820      	ldr	r0, [r4, #0]
 8001e4c:	f000 f9d0 	bl	80021f0 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001e50:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001e52:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	f000 f9cb 	bl	80021f0 <SDMMC_GetResponse>
 8001e5a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001e5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d122      	bne.n	8001eaa <HAL_SD_InitCard+0x18a>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001e64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d12e      	bne.n	8001ec8 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	6820      	ldr	r0, [r4, #0]
 8001e6e:	f000 f9bf 	bl	80021f0 <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 8001e72:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8001e74:	0d00      	lsrs	r0, r0, #20
 8001e76:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff fe72 	bl	8001b62 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8001e7e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001e80:	2300      	movs	r3, #0
 8001e82:	6820      	ldr	r0, [r4, #0]
 8001e84:	0412      	lsls	r2, r2, #16
 8001e86:	f000 faf1 	bl	800246c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001e8a:	4605      	mov	r5, r0
 8001e8c:	b9a8      	cbnz	r0, 8001eba <HAL_SD_InitCard+0x19a>
  SDMMC_Init(hsd->Instance, hsd->Init);
 8001e8e:	f104 0310 	add.w	r3, r4, #16
 8001e92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e96:	1d23      	adds	r3, r4, #4
 8001e98:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001e9c:	6820      	ldr	r0, [r4, #0]
 8001e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea0:	f000 f96c 	bl	800217c <SDMMC_Init>
  return HAL_OK;
 8001ea4:	4628      	mov	r0, r5
}
 8001ea6:	b018      	add	sp, #96	; 0x60
 8001ea8:	bd70      	pop	{r4, r5, r6, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8001eaa:	f10d 0116 	add.w	r1, sp, #22
 8001eae:	6820      	ldr	r0, [r4, #0]
 8001eb0:	f000 fbc8 	bl	8002644 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001eb4:	4605      	mov	r5, r0
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	d0d4      	beq.n	8001e64 <HAL_SD_InitCard+0x144>
    hsd->State = HAL_SD_STATE_READY;
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001ec0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ec2:	431d      	orrs	r5, r3
 8001ec4:	63a5      	str	r5, [r4, #56]	; 0x38
 8001ec6:	e7ee      	b.n	8001ea6 <HAL_SD_InitCard+0x186>
    hsd->SdCard.RelCardAdd = sd_rca;
 8001ec8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001ecc:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8001ece:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001ed0:	0409      	lsls	r1, r1, #16
 8001ed2:	f000 fba1 	bl	8002618 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ed6:	4605      	mov	r5, r0
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d1ee      	bne.n	8001eba <HAL_SD_InitCard+0x19a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001edc:	4601      	mov	r1, r0
 8001ede:	6820      	ldr	r0, [r4, #0]
 8001ee0:	f000 f986 	bl	80021f0 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001ee4:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001ee6:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001ee8:	6820      	ldr	r0, [r4, #0]
 8001eea:	f000 f981 	bl	80021f0 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001eee:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001ef0:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001ef2:	6820      	ldr	r0, [r4, #0]
 8001ef4:	f000 f97c 	bl	80021f0 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001ef8:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001efa:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001efc:	6820      	ldr	r0, [r4, #0]
 8001efe:	f000 f977 	bl	80021f0 <SDMMC_GetResponse>
 8001f02:	6720      	str	r0, [r4, #112]	; 0x70
 8001f04:	e7b1      	b.n	8001e6a <HAL_SD_InitCard+0x14a>

08001f06 <HAL_SD_Init>:
{
 8001f06:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8001f08:	4604      	mov	r4, r0
 8001f0a:	b1a0      	cbz	r0, 8001f36 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8001f0c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001f10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f14:	b913      	cbnz	r3, 8001f1c <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 8001f16:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8001f18:	f000 fe3e 	bl	8002b98 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8001f1c:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 8001f1e:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8001f20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8001f24:	f7ff fefc 	bl	8001d20 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f28:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 8001f2a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2c:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8001f2e:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8001f30:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8001f34:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f36:	2001      	movs	r0, #1
}
 8001f38:	bd10      	pop	{r4, pc}

08001f3a <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8001f3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f3c:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8001f3e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001f40:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8001f42:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001f44:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8001f46:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f48:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8001f4a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001f4c:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8001f4e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001f50:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8001f52:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001f54:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001f56:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 8001f58:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001f5a:	61cb      	str	r3, [r1, #28]
}
 8001f5c:	4770      	bx	lr

08001f5e <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8001f5e:	2303      	movs	r3, #3
{
 8001f60:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8001f62:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8001f66:	b08a      	sub	sp, #40	; 0x28
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001f68:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d002      	beq.n	8001f78 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8001f72:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001f76:	d103      	bne.n	8001f80 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001f78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	e056      	b.n	800202e <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8001f80:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001f84:	d12d      	bne.n	8001fe2 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 8001f86:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8001f88:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8001f8a:	9104      	str	r1, [sp, #16]
 8001f8c:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8001f8e:	f000 f92f 	bl	80021f0 <SDMMC_GetResponse>
 8001f92:	0180      	lsls	r0, r0, #6
 8001f94:	d420      	bmi.n	8001fd8 <HAL_SD_ConfigWideBusOperation+0x7a>
  errorstate = SD_FindSCR(hsd, scr);
 8001f96:	a904      	add	r1, sp, #16
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7ff fc60 	bl	800185e <SD_FindSCR>
  if(errorstate != HAL_OK)
 8001f9e:	b960      	cbnz	r0, 8001fba <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8001fa0:	9b05      	ldr	r3, [sp, #20]
 8001fa2:	0359      	lsls	r1, r3, #13
 8001fa4:	d51a      	bpl.n	8001fdc <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8001fa6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001fa8:	6820      	ldr	r0, [r4, #0]
 8001faa:	0409      	lsls	r1, r1, #16
 8001fac:	f000 fad6 	bl	800255c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8001fb0:	b918      	cbnz	r0, 8001fba <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	6820      	ldr	r0, [r4, #0]
 8001fb6:	f000 fbc9 	bl	800274c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8001fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fbc:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8001fbe:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8001fc0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001fc2:	2d00      	cmp	r5, #0
 8001fc4:	d035      	beq.n	8002032 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 8001fcc:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001fce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001fd0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8001fd4:	b00a      	add	sp, #40	; 0x28
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8001fd8:	4630      	mov	r0, r6
 8001fda:	e7ee      	b.n	8001fba <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8001fdc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001fe0:	e7eb      	b.n	8001fba <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8001fe2:	bb09      	cbnz	r1, 8002028 <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8001fe4:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8001fe6:	9104      	str	r1, [sp, #16]
 8001fe8:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8001fea:	f000 f901 	bl	80021f0 <SDMMC_GetResponse>
 8001fee:	0182      	lsls	r2, r0, #6
 8001ff0:	d414      	bmi.n	800201c <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 8001ff2:	a904      	add	r1, sp, #16
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff fc32 	bl	800185e <SD_FindSCR>
  if(errorstate != HAL_OK)
 8001ffa:	b960      	cbnz	r0, 8002016 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8001ffc:	9b05      	ldr	r3, [sp, #20]
 8001ffe:	03db      	lsls	r3, r3, #15
 8002000:	d50f      	bpl.n	8002022 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8002002:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002004:	6820      	ldr	r0, [r4, #0]
 8002006:	0409      	lsls	r1, r1, #16
 8002008:	f000 faa8 	bl	800255c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800200c:	b918      	cbnz	r0, 8002016 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800200e:	4601      	mov	r1, r0
 8002010:	6820      	ldr	r0, [r4, #0]
 8002012:	f000 fb9b 	bl	800274c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002016:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002018:	4308      	orrs	r0, r1
 800201a:	e7d0      	b.n	8001fbe <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800201c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002020:	e7f9      	b.n	8002016 <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002022:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002026:	e7f6      	b.n	8002016 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002028:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800202a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800202e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002030:	e7c6      	b.n	8001fc0 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002032:	6863      	ldr	r3, [r4, #4]
    Init.BusWide             = WideMode;
 8002034:	9607      	str	r6, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002036:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002038:	68a3      	ldr	r3, [r4, #8]
 800203a:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800203c:	68e3      	ldr	r3, [r4, #12]
 800203e:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002040:	6963      	ldr	r3, [r4, #20]
 8002042:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002044:	69a3      	ldr	r3, [r4, #24]
 8002046:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 8002048:	ab0a      	add	r3, sp, #40	; 0x28
 800204a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800204e:	ab04      	add	r3, sp, #16
 8002050:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002054:	6820      	ldr	r0, [r4, #0]
 8002056:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002058:	f000 f890 	bl	800217c <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 800205c:	2301      	movs	r3, #1
  return HAL_OK;
 800205e:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8002060:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002064:	e7b6      	b.n	8001fd4 <HAL_SD_ConfigWideBusOperation+0x76>

08002066 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8002066:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002068:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800206a:	0409      	lsls	r1, r1, #16
{
 800206c:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800206e:	6800      	ldr	r0, [r0, #0]
 8002070:	f000 fb3c 	bl	80026ec <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8002074:	4601      	mov	r1, r0
 8002076:	b928      	cbnz	r0, 8002084 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002078:	6820      	ldr	r0, [r4, #0]
 800207a:	f000 f8b9 	bl	80021f0 <SDMMC_GetResponse>
  return cardstate;
 800207e:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8002082:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8002084:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8002086:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 8002088:	4319      	orrs	r1, r3
 800208a:	63a1      	str	r1, [r4, #56]	; 0x38
 800208c:	e7f7      	b.n	800207e <HAL_SD_GetCardState+0x18>

0800208e <SD_DMAError>:
{
 800208e:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002090:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002092:	f7fe fb5b 	bl	800074c <HAL_DMA_GetError>
 8002096:	2802      	cmp	r0, #2
 8002098:	d026      	beq.n	80020e8 <SD_DMAError+0x5a>
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800209a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d003      	beq.n	80020aa <SD_DMAError+0x1c>
 80020a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d11b      	bne.n	80020e2 <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
      CardState = HAL_SD_GetCardState(hsd);
 80020b0:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80020b2:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80020b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020b6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80020ba:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80020bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020c2:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80020c4:	f7ff ffcf 	bl	8002066 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80020c8:	3805      	subs	r0, #5
 80020ca:	b2c0      	uxtb	r0, r0
 80020cc:	2801      	cmp	r0, #1
 80020ce:	d805      	bhi.n	80020dc <SD_DMAError+0x4e>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80020d0:	6820      	ldr	r0, [r4, #0]
 80020d2:	f000 f9b1 	bl	8002438 <SDMMC_CmdStopTransfer>
 80020d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020d8:	4318      	orrs	r0, r3
 80020da:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80020dc:	2301      	movs	r3, #1
 80020de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    HAL_SD_ErrorCallback(hsd);
 80020e2:	4620      	mov	r0, r4
 80020e4:	f7ff fd1e 	bl	8001b24 <HAL_SD_ErrorCallback>
 80020e8:	bd10      	pop	{r4, pc}
	...

080020ec <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <SDMMC_GetCmdResp2+0x48>)
 80020ee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80020f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80020fc:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 80020fe:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002102:	d314      	bcc.n	800212e <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8002104:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002106:	f012 0f45 	tst.w	r2, #69	; 0x45
 800210a:	d0f8      	beq.n	80020fe <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800210c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800210e:	075b      	lsls	r3, r3, #29
 8002110:	d503      	bpl.n	800211a <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002112:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002114:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8002116:	4618      	mov	r0, r3
 8002118:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800211a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800211c:	f013 0301 	ands.w	r3, r3, #1
 8002120:	d001      	beq.n	8002126 <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002122:	2301      	movs	r3, #1
 8002124:	e7f6      	b.n	8002114 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8002126:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800212a:	6382      	str	r2, [r0, #56]	; 0x38
 800212c:	e7f3      	b.n	8002116 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800212e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002132:	e7f0      	b.n	8002116 <SDMMC_GetCmdResp2+0x2a>
 8002134:	2000000c 	.word	0x2000000c

08002138 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <SDMMC_GetCmdResp3+0x40>)
 800213a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fbb3 f2f2 	udiv	r2, r3, r2
 8002144:	f241 3388 	movw	r3, #5000	; 0x1388
 8002148:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800214a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800214e:	d30f      	bcc.n	8002170 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8002150:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002152:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002156:	d0f8      	beq.n	800214a <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002158:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800215a:	f013 0304 	ands.w	r3, r3, #4
 800215e:	d003      	beq.n	8002168 <SDMMC_GetCmdResp3+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002160:	2304      	movs	r3, #4
 8002162:	6383      	str	r3, [r0, #56]	; 0x38
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
 8002164:	4618      	mov	r0, r3
 8002166:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8002168:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800216c:	6382      	str	r2, [r0, #56]	; 0x38
 800216e:	e7f9      	b.n	8002164 <SDMMC_GetCmdResp3+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8002170:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c

0800217c <SDMMC_Init>:
{
 800217c:	b084      	sub	sp, #16
 800217e:	b510      	push	{r4, lr}
 8002180:	ac03      	add	r4, sp, #12
 8002182:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8002186:	9904      	ldr	r1, [sp, #16]
 8002188:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800218a:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800218c:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 800218e:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002190:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 8002194:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8002196:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002198:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 800219c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 800219e:	9907      	ldr	r1, [sp, #28]
 80021a0:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80021a2:	9908      	ldr	r1, [sp, #32]
 80021a4:	430b      	orrs	r3, r1
}
 80021a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80021aa:	4313      	orrs	r3, r2
}
 80021ac:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80021ae:	6043      	str	r3, [r0, #4]
}
 80021b0:	2000      	movs	r0, #0
 80021b2:	4770      	bx	lr

080021b4 <SDMMC_ReadFIFO>:
 80021b4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80021b8:	4770      	bx	lr

080021ba <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80021ba:	2303      	movs	r3, #3
 80021bc:	6003      	str	r3, [r0, #0]
}
 80021be:	2000      	movs	r0, #0
 80021c0:	4770      	bx	lr

080021c2 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80021c2:	6800      	ldr	r0, [r0, #0]
}
 80021c4:	f000 0003 	and.w	r0, r0, #3
 80021c8:	4770      	bx	lr

080021ca <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 80021ca:	680b      	ldr	r3, [r1, #0]
{
 80021cc:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 80021ce:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80021d0:	688c      	ldr	r4, [r1, #8]
 80021d2:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80021d4:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80021d6:	4323      	orrs	r3, r4
                       Command->Response         |\
 80021d8:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80021da:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 80021de:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 80021e0:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80021e2:	f022 020f 	bic.w	r2, r2, #15
                       Command->WaitForInterrupt |\
 80021e6:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60c3      	str	r3, [r0, #12]
}
 80021ec:	2000      	movs	r0, #0
 80021ee:	bd10      	pop	{r4, pc}

080021f0 <SDMMC_GetResponse>:
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80021f0:	3014      	adds	r0, #20
{
 80021f2:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80021f4:	2300      	movs	r3, #0
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80021f6:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 80021f8:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80021fa:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80021fc:	9b01      	ldr	r3, [sp, #4]
 80021fe:	6818      	ldr	r0, [r3, #0]
}  
 8002200:	b002      	add	sp, #8
 8002202:	4770      	bx	lr

08002204 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8002204:	4b44      	ldr	r3, [pc, #272]	; (8002318 <SDMMC_GetCmdResp1+0x114>)
{
 8002206:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800220e:	fbb3 f3f4 	udiv	r3, r3, r4
 8002212:	435a      	muls	r2, r3
    if (count-- == 0)
 8002214:	2a00      	cmp	r2, #0
 8002216:	d049      	beq.n	80022ac <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8002218:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800221a:	3a01      	subs	r2, #1
 800221c:	f013 0f45 	tst.w	r3, #69	; 0x45
 8002220:	d0f8      	beq.n	8002214 <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002222:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002224:	075c      	lsls	r4, r3, #29
 8002226:	d503      	bpl.n	8002230 <SDMMC_GetCmdResp1+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002228:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800222a:	6383      	str	r3, [r0, #56]	; 0x38
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8002230:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002232:	f013 0301 	ands.w	r3, r3, #1
 8002236:	d001      	beq.n	800223c <SDMMC_GetCmdResp1+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002238:	2301      	movs	r3, #1
 800223a:	e7f6      	b.n	800222a <SDMMC_GetCmdResp1+0x26>
  return (uint8_t)(SDMMCx->RESPCMD);
 800223c:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	4291      	cmp	r1, r2
 8002242:	d136      	bne.n	80022b2 <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8002244:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8002248:	4619      	mov	r1, r3
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800224a:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800224c:	f7ff ffd0 	bl	80021f0 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002250:	4b32      	ldr	r3, [pc, #200]	; (800231c <SDMMC_GetCmdResp1+0x118>)
 8002252:	4003      	ands	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0e9      	beq.n	800222c <SDMMC_GetCmdResp1+0x28>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002258:	2800      	cmp	r0, #0
 800225a:	db2c      	blt.n	80022b6 <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800225c:	0042      	lsls	r2, r0, #1
 800225e:	d42d      	bmi.n	80022bc <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002260:	0084      	lsls	r4, r0, #2
 8002262:	d42d      	bmi.n	80022c0 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002264:	00c1      	lsls	r1, r0, #3
 8002266:	d42d      	bmi.n	80022c4 <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002268:	0102      	lsls	r2, r0, #4
 800226a:	d42e      	bmi.n	80022ca <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800226c:	0144      	lsls	r4, r0, #5
 800226e:	d42f      	bmi.n	80022d0 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002270:	01c1      	lsls	r1, r0, #7
 8002272:	d430      	bmi.n	80022d6 <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002274:	0202      	lsls	r2, r0, #8
 8002276:	d431      	bmi.n	80022dc <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002278:	0244      	lsls	r4, r0, #9
 800227a:	d432      	bmi.n	80022e2 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800227c:	0281      	lsls	r1, r0, #10
 800227e:	d433      	bmi.n	80022e8 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002280:	02c2      	lsls	r2, r0, #11
 8002282:	d434      	bmi.n	80022ee <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002284:	0344      	lsls	r4, r0, #13
 8002286:	d435      	bmi.n	80022f4 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002288:	0381      	lsls	r1, r0, #14
 800228a:	d436      	bmi.n	80022fa <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800228c:	03c2      	lsls	r2, r0, #15
 800228e:	d437      	bmi.n	8002300 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002290:	0404      	lsls	r4, r0, #16
 8002292:	d438      	bmi.n	8002306 <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002294:	0441      	lsls	r1, r0, #17
 8002296:	d439      	bmi.n	800230c <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002298:	0482      	lsls	r2, r0, #18
 800229a:	d43a      	bmi.n	8002312 <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800229c:	f010 0f08 	tst.w	r0, #8
 80022a0:	bf14      	ite	ne
 80022a2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80022a6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80022aa:	e7bf      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80022ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80022b0:	e7bc      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e7ba      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80022b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ba:	e7b7      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80022bc:	2340      	movs	r3, #64	; 0x40
 80022be:	e7b5      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	e7b3      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80022c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c8:	e7b0      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80022ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ce:	e7ad      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80022d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d4:	e7aa      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80022d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022da:	e7a7      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80022dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e0:	e7a4      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80022e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022e6:	e7a1      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80022e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ec:	e79e      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CC_ERR;
 80022ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f2:	e79b      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80022f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f8:	e798      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80022fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022fe:	e795      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002300:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002304:	e792      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002306:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800230a:	e78f      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800230c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002310:	e78c      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_RESET;
 8002312:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002316:	e789      	b.n	800222c <SDMMC_GetCmdResp1+0x28>
 8002318:	2000000c 	.word	0x2000000c
 800231c:	fdffe008 	.word	0xfdffe008

08002320 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8002320:	680b      	ldr	r3, [r1, #0]
{
 8002322:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8002324:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8002326:	684b      	ldr	r3, [r1, #4]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002328:	68cc      	ldr	r4, [r1, #12]
  SDMMCx->DLEN = Data->DataLength;
 800232a:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800232c:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800232e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002330:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8002332:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8002334:	6949      	ldr	r1, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002336:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferDir   |\
 800233a:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800233c:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800233e:	4313      	orrs	r3, r2
 8002340:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002342:	2000      	movs	r0, #0
 8002344:	bd10      	pop	{r4, pc}

08002346 <SDMMC_CmdBlockLength>:
{
 8002346:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002348:	2340      	movs	r3, #64	; 0x40
{
 800234a:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800234c:	2410      	movs	r4, #16
{
 800234e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002350:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002352:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002354:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002356:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002358:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800235a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800235e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002360:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002362:	f7ff ff32 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8002366:	f241 3288 	movw	r2, #5000	; 0x1388
 800236a:	4621      	mov	r1, r4
 800236c:	4628      	mov	r0, r5
 800236e:	f7ff ff49 	bl	8002204 <SDMMC_GetCmdResp1>
}
 8002372:	b007      	add	sp, #28
 8002374:	bd30      	pop	{r4, r5, pc}

08002376 <SDMMC_CmdReadSingleBlock>:
{
 8002376:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002378:	2340      	movs	r3, #64	; 0x40
{
 800237a:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800237c:	2411      	movs	r4, #17
{
 800237e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002380:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002382:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002384:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002386:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002388:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800238a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800238e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002390:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002392:	f7ff ff1a 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4621      	mov	r1, r4
 800239c:	4628      	mov	r0, r5
 800239e:	f7ff ff31 	bl	8002204 <SDMMC_GetCmdResp1>
}
 80023a2:	b007      	add	sp, #28
 80023a4:	bd30      	pop	{r4, r5, pc}

080023a6 <SDMMC_CmdReadMultiBlock>:
{
 80023a6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80023a8:	2340      	movs	r3, #64	; 0x40
{
 80023aa:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80023ac:	2412      	movs	r4, #18
{
 80023ae:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80023b0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80023b2:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80023b4:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80023b6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80023b8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80023ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80023be:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80023c0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80023c2:	f7ff ff02 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4621      	mov	r1, r4
 80023cc:	4628      	mov	r0, r5
 80023ce:	f7ff ff19 	bl	8002204 <SDMMC_GetCmdResp1>
}
 80023d2:	b007      	add	sp, #28
 80023d4:	bd30      	pop	{r4, r5, pc}

080023d6 <SDMMC_CmdWriteSingleBlock>:
{
 80023d6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80023d8:	2340      	movs	r3, #64	; 0x40
{
 80023da:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80023dc:	2418      	movs	r4, #24
{
 80023de:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80023e0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80023e2:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80023e4:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80023e6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80023e8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80023ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80023ee:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80023f0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80023f2:	f7ff feea 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4621      	mov	r1, r4
 80023fc:	4628      	mov	r0, r5
 80023fe:	f7ff ff01 	bl	8002204 <SDMMC_GetCmdResp1>
}
 8002402:	b007      	add	sp, #28
 8002404:	bd30      	pop	{r4, r5, pc}

08002406 <SDMMC_CmdWriteMultiBlock>:
{
 8002406:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002408:	2340      	movs	r3, #64	; 0x40
{
 800240a:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800240c:	2419      	movs	r4, #25
{
 800240e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002410:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002412:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002414:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002416:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002418:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800241a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800241e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002420:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002422:	f7ff fed2 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4621      	mov	r1, r4
 800242c:	4628      	mov	r0, r5
 800242e:	f7ff fee9 	bl	8002204 <SDMMC_GetCmdResp1>
}
 8002432:	b007      	add	sp, #28
 8002434:	bd30      	pop	{r4, r5, pc}
	...

08002438 <SDMMC_CmdStopTransfer>:
{
 8002438:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800243a:	2300      	movs	r3, #0
{
 800243c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800243e:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002440:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 8002442:	9301      	str	r3, [sp, #4]
{
 8002444:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002446:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002448:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800244c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800244e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002450:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002452:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002454:	f7ff feb9 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8002458:	4a03      	ldr	r2, [pc, #12]	; (8002468 <SDMMC_CmdStopTransfer+0x30>)
 800245a:	4621      	mov	r1, r4
 800245c:	4628      	mov	r0, r5
 800245e:	f7ff fed1 	bl	8002204 <SDMMC_GetCmdResp1>
}
 8002462:	b007      	add	sp, #28
 8002464:	bd30      	pop	{r4, r5, pc}
 8002466:	bf00      	nop
 8002468:	05f5e100 	.word	0x05f5e100

0800246c <SDMMC_CmdSelDesel>:
{
 800246c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800246e:	2340      	movs	r3, #64	; 0x40
{
 8002470:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002472:	2407      	movs	r4, #7
{
 8002474:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002476:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002478:	2300      	movs	r3, #0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800247a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800247c:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800247e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002480:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002484:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002486:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002488:	f7ff fe9f 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4621      	mov	r1, r4
 8002492:	4628      	mov	r0, r5
 8002494:	f7ff feb6 	bl	8002204 <SDMMC_GetCmdResp1>
}
 8002498:	b007      	add	sp, #28
 800249a:	bd30      	pop	{r4, r5, pc}

0800249c <SDMMC_CmdGoIdleState>:
{
 800249c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 800249e:	2300      	movs	r3, #0
{
 80024a0:	b086      	sub	sp, #24
 80024a2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 80024a4:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80024a6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80024a8:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80024aa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80024ac:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80024ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80024b4:	f7ff fe89 	bl	80021ca <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <SDMMC_CmdGoIdleState+0x4c>)
 80024ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80024c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80024c8:	4353      	muls	r3, r2
    if (count-- == 0)
 80024ca:	f113 33ff 	adds.w	r3, r3, #4294967295
 80024ce:	d308      	bcc.n	80024e2 <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80024d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80024d2:	0612      	lsls	r2, r2, #24
 80024d4:	d5f9      	bpl.n	80024ca <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80024d6:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 80024da:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80024dc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80024de:	b006      	add	sp, #24
 80024e0:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80024e2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80024e6:	e7fa      	b.n	80024de <SDMMC_CmdGoIdleState+0x42>
 80024e8:	2000000c 	.word	0x2000000c

080024ec <SDMMC_CmdOperCond>:
{
 80024ec:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80024ee:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 80024f2:	b086      	sub	sp, #24
 80024f4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80024f6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80024f8:	2308      	movs	r3, #8
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80024fa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80024fc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80024fe:	2340      	movs	r3, #64	; 0x40
 8002500:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002502:	2300      	movs	r3, #0
 8002504:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800250a:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800250c:	f7ff fe5d 	bl	80021ca <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <SDMMC_CmdOperCond+0x6c>)
 8002512:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fbb3 f2f2 	udiv	r2, r3, r2
 800251c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002520:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8002522:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002526:	d314      	bcc.n	8002552 <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8002528:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800252a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800252e:	d0f8      	beq.n	8002522 <SDMMC_CmdOperCond+0x36>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002530:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002532:	f012 0204 	ands.w	r2, r2, #4
 8002536:	d004      	beq.n	8002542 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8002538:	2340      	movs	r3, #64	; 0x40
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800253a:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800253c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800253e:	b006      	add	sp, #24
 8002540:	bd10      	pop	{r4, pc}
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8002542:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002544:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8002548:	d0f9      	beq.n	800253e <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800254a:	2340      	movs	r3, #64	; 0x40
  }
  
  return SDMMC_ERROR_NONE;
 800254c:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800254e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002550:	e7f5      	b.n	800253e <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8002552:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002556:	e7f2      	b.n	800253e <SDMMC_CmdOperCond+0x52>
 8002558:	2000000c 	.word	0x2000000c

0800255c <SDMMC_CmdAppCommand>:
{
 800255c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800255e:	2340      	movs	r3, #64	; 0x40
{
 8002560:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002562:	2437      	movs	r4, #55	; 0x37
{
 8002564:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002566:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002568:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800256a:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800256c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800256e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002570:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002574:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002576:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002578:	f7ff fe27 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	4621      	mov	r1, r4
 8002582:	4628      	mov	r0, r5
 8002584:	f7ff fe3e 	bl	8002204 <SDMMC_GetCmdResp1>
}
 8002588:	b007      	add	sp, #28
 800258a:	bd30      	pop	{r4, r5, pc}

0800258c <SDMMC_CmdAppOperCommand>:
{
 800258c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800258e:	2329      	movs	r3, #41	; 0x29
{
 8002590:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8002592:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8002596:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002598:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800259a:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800259c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80025a0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80025a2:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80025a4:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80025a6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80025a8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80025aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ae:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80025b0:	f7ff fe0b 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7ff fdbf 	bl	8002138 <SDMMC_GetCmdResp3>
}
 80025ba:	b006      	add	sp, #24
 80025bc:	bd10      	pop	{r4, pc}

080025be <SDMMC_CmdSendSCR>:
{
 80025be:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 80025c0:	2300      	movs	r3, #0
{
 80025c2:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80025c4:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80025c6:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 80025c8:	9301      	str	r3, [sp, #4]
{
 80025ca:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80025cc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80025ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80025d2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80025d4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80025d6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80025d8:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80025da:	f7ff fdf6 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80025de:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e2:	4621      	mov	r1, r4
 80025e4:	4628      	mov	r0, r5
 80025e6:	f7ff fe0d 	bl	8002204 <SDMMC_GetCmdResp1>
}
 80025ea:	b007      	add	sp, #28
 80025ec:	bd30      	pop	{r4, r5, pc}

080025ee <SDMMC_CmdSendCID>:
{
 80025ee:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 80025f0:	2300      	movs	r3, #0
{
 80025f2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80025f4:	2202      	movs	r2, #2
{
 80025f6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 80025f8:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80025fa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80025fc:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80025fe:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002600:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002602:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8002606:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002608:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800260a:	f7ff fdde 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800260e:	4620      	mov	r0, r4
 8002610:	f7ff fd6c 	bl	80020ec <SDMMC_GetCmdResp2>
}
 8002614:	b006      	add	sp, #24
 8002616:	bd10      	pop	{r4, pc}

08002618 <SDMMC_CmdSendCSD>:
{
 8002618:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800261a:	2309      	movs	r3, #9
{
 800261c:	b086      	sub	sp, #24
 800261e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002620:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8002622:	23c0      	movs	r3, #192	; 0xc0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002624:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002626:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8002628:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800262a:	2300      	movs	r3, #0
 800262c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800262e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002632:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002634:	f7ff fdc9 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff fd57 	bl	80020ec <SDMMC_GetCmdResp2>
}
 800263e:	b006      	add	sp, #24
 8002640:	bd10      	pop	{r4, pc}
	...

08002644 <SDMMC_CmdSetRelAdd>:
{
 8002644:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 8002646:	2300      	movs	r3, #0
{
 8002648:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800264a:	2203      	movs	r2, #3
{
 800264c:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0;
 800264e:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002650:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002652:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002654:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002656:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002658:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800265c:	9203      	str	r2, [sp, #12]
{
 800265e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002660:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002662:	f7ff fdb2 	bl	80021ca <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <SDMMC_CmdSetRelAdd+0xa4>)
 8002668:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002672:	f241 3388 	movw	r3, #5000	; 0x1388
 8002676:	4353      	muls	r3, r2
    if (count-- == 0)
 8002678:	f113 33ff 	adds.w	r3, r3, #4294967295
 800267c:	d32b      	bcc.n	80026d6 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800267e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002680:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002684:	d0f8      	beq.n	8002678 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002688:	075a      	lsls	r2, r3, #29
 800268a:	d503      	bpl.n	8002694 <SDMMC_CmdSetRelAdd+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800268c:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800268e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002690:	b007      	add	sp, #28
 8002692:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8002694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002696:	f011 0101 	ands.w	r1, r1, #1
 800269a:	d001      	beq.n	80026a0 <SDMMC_CmdSetRelAdd+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800269c:	2001      	movs	r0, #1
 800269e:	e7f6      	b.n	800268e <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDMMCx->RESPCMD);
 80026a0:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d119      	bne.n	80026dc <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80026a8:	f240 53ff 	movw	r3, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80026ac:	4620      	mov	r0, r4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80026ae:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80026b0:	f7ff fd9e 	bl	80021f0 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80026b4:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 80026b8:	d103      	bne.n	80026c2 <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80026ba:	0c00      	lsrs	r0, r0, #16
 80026bc:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 80026be:	4618      	mov	r0, r3
 80026c0:	e7e6      	b.n	8002690 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80026c2:	0443      	lsls	r3, r0, #17
 80026c4:	d40c      	bmi.n	80026e0 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80026c6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80026ca:	bf14      	ite	ne
 80026cc:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80026d0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80026d4:	e7dc      	b.n	8002690 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 80026d6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80026da:	e7d9      	b.n	8002690 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80026dc:	2001      	movs	r0, #1
 80026de:	e7d7      	b.n	8002690 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80026e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026e4:	e7d4      	b.n	8002690 <SDMMC_CmdSetRelAdd+0x4c>
 80026e6:	bf00      	nop
 80026e8:	2000000c 	.word	0x2000000c

080026ec <SDMMC_CmdSendStatus>:
{
 80026ec:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80026ee:	2340      	movs	r3, #64	; 0x40
{
 80026f0:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80026f2:	240d      	movs	r4, #13
{
 80026f4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80026f6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80026f8:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80026fa:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80026fc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80026fe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002700:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002704:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002706:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002708:	f7ff fd5f 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4621      	mov	r1, r4
 8002712:	4628      	mov	r0, r5
 8002714:	f7ff fd76 	bl	8002204 <SDMMC_GetCmdResp1>
}
 8002718:	b007      	add	sp, #28
 800271a:	bd30      	pop	{r4, r5, pc}

0800271c <SDMMC_CmdSwitch>:
{
 800271c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800271e:	2340      	movs	r3, #64	; 0x40
{
 8002720:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8002722:	2406      	movs	r4, #6
{
 8002724:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002726:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002728:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = Argument;
 800272a:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800272c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800272e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002730:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8002734:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002736:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002738:	f7ff fd47 	bl	80021ca <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4621      	mov	r1, r4
 8002742:	4628      	mov	r0, r5
 8002744:	f7ff fd5e 	bl	8002204 <SDMMC_GetCmdResp1>
}
 8002748:	b007      	add	sp, #28
 800274a:	bd30      	pop	{r4, r5, pc}

0800274c <SDMMC_CmdBusWidth>:
 800274c:	f7ff bfe6 	b.w	800271c <SDMMC_CmdSwitch>

08002750 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <FATFS_LinkDriverEx+0x40>)
{
 8002752:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8002754:	7a5d      	ldrb	r5, [r3, #9]
 8002756:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800275a:	b9b5      	cbnz	r5, 800278a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800275c:	7a5d      	ldrb	r5, [r3, #9]
 800275e:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8002760:	7a5d      	ldrb	r5, [r3, #9]
 8002762:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8002766:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8002768:	7a58      	ldrb	r0, [r3, #9]
 800276a:	4418      	add	r0, r3
 800276c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800276e:	7a5a      	ldrb	r2, [r3, #9]
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8002774:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8002776:	b2c0      	uxtb	r0, r0
 8002778:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800277a:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800277c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 800277e:	4620      	mov	r0, r4
    path[1] = ':';
 8002780:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8002782:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8002784:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 8002786:	708b      	strb	r3, [r1, #2]
 8002788:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800278a:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 800278c:	bd30      	pop	{r4, r5, pc}
 800278e:	bf00      	nop
 8002790:	2000002c 	.word	0x2000002c

08002794 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8002794:	2200      	movs	r2, #0
 8002796:	f7ff bfdb 	b.w	8002750 <FATFS_LinkDriverEx>
	...

0800279c <BSP_SD_Init>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 800279c:	2301      	movs	r3, #1
{
 800279e:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 80027a0:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80027a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d10e      	bne.n	80027ca <BSP_SD_Init+0x2e>
  sd_state = HAL_SD_Init(&hsd1);
 80027ac:	4808      	ldr	r0, [pc, #32]	; (80027d0 <BSP_SD_Init+0x34>)
 80027ae:	f7ff fbaa 	bl	8001f06 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80027b2:	b938      	cbnz	r0, 80027c4 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80027b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027b8:	4805      	ldr	r0, [pc, #20]	; (80027d0 <BSP_SD_Init+0x34>)
 80027ba:	f7ff fbd0 	bl	8001f5e <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 80027be:	3000      	adds	r0, #0
 80027c0:	bf18      	it	ne
 80027c2:	2001      	movne	r0, #1
}
 80027c4:	b003      	add	sp, #12
 80027c6:	f85d fb04 	ldr.w	pc, [sp], #4
    return MSD_ERROR_SD_NOT_PRESENT;
 80027ca:	2002      	movs	r0, #2
 80027cc:	e7fa      	b.n	80027c4 <BSP_SD_Init+0x28>
 80027ce:	bf00      	nop
 80027d0:	200004ac 	.word	0x200004ac

080027d4 <BSP_SD_ReadBlocks_DMA>:
{
 80027d4:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80027d6:	4613      	mov	r3, r2
 80027d8:	460a      	mov	r2, r1
 80027da:	4601      	mov	r1, r0
 80027dc:	4803      	ldr	r0, [pc, #12]	; (80027ec <BSP_SD_ReadBlocks_DMA+0x18>)
 80027de:	f7ff f8a3 	bl	8001928 <HAL_SD_ReadBlocks_DMA>
}
 80027e2:	3000      	adds	r0, #0
 80027e4:	bf18      	it	ne
 80027e6:	2001      	movne	r0, #1
 80027e8:	bd08      	pop	{r3, pc}
 80027ea:	bf00      	nop
 80027ec:	200004ac 	.word	0x200004ac

080027f0 <BSP_SD_WriteBlocks_DMA>:
{
 80027f0:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80027f2:	4613      	mov	r3, r2
 80027f4:	460a      	mov	r2, r1
 80027f6:	4601      	mov	r1, r0
 80027f8:	4803      	ldr	r0, [pc, #12]	; (8002808 <BSP_SD_WriteBlocks_DMA+0x18>)
 80027fa:	f7ff f917 	bl	8001a2c <HAL_SD_WriteBlocks_DMA>
}
 80027fe:	3000      	adds	r0, #0
 8002800:	bf18      	it	ne
 8002802:	2001      	movne	r0, #1
 8002804:	bd08      	pop	{r3, pc}
 8002806:	bf00      	nop
 8002808:	200004ac 	.word	0x200004ac

0800280c <BSP_SD_GetCardState>:
{
 800280c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800280e:	4803      	ldr	r0, [pc, #12]	; (800281c <BSP_SD_GetCardState+0x10>)
 8002810:	f7ff fc29 	bl	8002066 <HAL_SD_GetCardState>
}
 8002814:	3804      	subs	r0, #4
 8002816:	bf18      	it	ne
 8002818:	2001      	movne	r0, #1
 800281a:	bd08      	pop	{r3, pc}
 800281c:	200004ac 	.word	0x200004ac

08002820 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8002820:	4601      	mov	r1, r0
 8002822:	4801      	ldr	r0, [pc, #4]	; (8002828 <BSP_SD_GetCardInfo+0x8>)
 8002824:	f7ff bb89 	b.w	8001f3a <HAL_SD_GetCardInfo>
 8002828:	200004ac 	.word	0x200004ac

0800282c <HAL_SD_RxCpltCallback>:
{
 800282c:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800282e:	f000 f951 	bl	8002ad4 <BSP_SD_ReadCpltCallback>
 8002832:	bd08      	pop	{r3, pc}

08002834 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002834:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8002836:	4903      	ldr	r1, [pc, #12]	; (8002844 <MX_FATFS_Init+0x10>)
 8002838:	4803      	ldr	r0, [pc, #12]	; (8002848 <MX_FATFS_Init+0x14>)
 800283a:	f7ff ffab 	bl	8002794 <FATFS_LinkDriver>
 800283e:	4b03      	ldr	r3, [pc, #12]	; (800284c <MX_FATFS_Init+0x18>)
 8002840:	7018      	strb	r0, [r3, #0]
 8002842:	bd08      	pop	{r3, pc}
 8002844:	20000045 	.word	0x20000045
 8002848:	08002f3c 	.word	0x08002f3c
 800284c:	20000044 	.word	0x20000044

08002850 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002850:	4b2e      	ldr	r3, [pc, #184]	; (800290c <SystemClock_Config+0xbc>)
 8002852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002854:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8002858:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
{
 800285c:	b0b8      	sub	sp, #224	; 0xe0
  __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002860:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002862:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800286c:	4b28      	ldr	r3, [pc, #160]	; (8002910 <SystemClock_Config+0xc0>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002878:	9407      	str	r4, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800287a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800287e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002880:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002886:	2301      	movs	r3, #1
 8002888:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800288a:	2310      	movs	r3, #16
 800288c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800288e:	2300      	movs	r3, #0
 8002890:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002892:	2308      	movs	r3, #8
 8002894:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002896:	23d8      	movs	r3, #216	; 0xd8
 8002898:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800289a:	2309      	movs	r3, #9
 800289c:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800289e:	f7fe fac3 	bl	8000e28 <HAL_RCC_OscConfig>
 80028a2:	b100      	cbz	r0, 80028a6 <SystemClock_Config+0x56>
 80028a4:	e7fe      	b.n	80028a4 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80028a6:	f7fe fa87 	bl	8000db8 <HAL_PWREx_EnableOverDrive>
 80028aa:	b100      	cbz	r0, 80028ae <SystemClock_Config+0x5e>
 80028ac:	e7fe      	b.n	80028ac <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ae:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80028b2:	2107      	movs	r1, #7
 80028b4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028b6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028bc:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028be:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80028c6:	f7fe fc71 	bl	80011ac <HAL_RCC_ClockConfig>
 80028ca:	b100      	cbz	r0, 80028ce <SystemClock_Config+0x7e>
 80028cc:	e7fe      	b.n	80028cc <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80028ce:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80028d2:	9033      	str	r0, [sp, #204]	; 0xcc
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80028d4:	9034      	str	r0, [sp, #208]	; 0xd0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028d6:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80028d8:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028da:	f7fe fd0b 	bl	80012f4 <HAL_RCCEx_PeriphCLKConfig>
 80028de:	4604      	mov	r4, r0
 80028e0:	b100      	cbz	r0, 80028e4 <SystemClock_Config+0x94>
 80028e2:	e7fe      	b.n	80028e2 <SystemClock_Config+0x92>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80028e4:	f7fe fd00 	bl	80012e8 <HAL_RCC_GetHCLKFreq>
 80028e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80028f0:	f7fd fec8 	bl	8000684 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80028f4:	2004      	movs	r0, #4
 80028f6:	f7fd fedb 	bl	80006b0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80028fa:	4622      	mov	r2, r4
 80028fc:	4621      	mov	r1, r4
 80028fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002902:	f7fd fe87 	bl	8000614 <HAL_NVIC_SetPriority>
}
 8002906:	b038      	add	sp, #224	; 0xe0
 8002908:	bd10      	pop	{r4, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40007000 	.word	0x40007000

08002914 <main>:
{
 8002914:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8002916:	f7fd fe3b 	bl	8000590 <HAL_Init>
  SystemClock_Config();
 800291a:	f7ff ff99 	bl	8002850 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <main+0x5c>)
  hjpeg.Instance = JPEG;
 8002920:	4814      	ldr	r0, [pc, #80]	; (8002974 <main+0x60>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002924:	f042 0204 	orr.w	r2, r2, #4
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
 800292a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292c:	f002 0204 	and.w	r2, r2, #4
 8002930:	9200      	str	r2, [sp, #0]
 8002932:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002936:	f042 0208 	orr.w	r2, r2, #8
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	9b01      	ldr	r3, [sp, #4]
  hjpeg.Instance = JPEG;
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <main+0x64>)
 8002948:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800294a:	f7fe f8f9 	bl	8000b40 <HAL_JPEG_Init>
 800294e:	b100      	cbz	r0, 8002952 <main+0x3e>
 8002950:	e7fe      	b.n	8002950 <main+0x3c>
  hsd1.Instance = SDMMC1;
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <main+0x68>)
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <main+0x6c>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002956:	6058      	str	r0, [r3, #4]
  hsd1.Instance = SDMMC1;
 8002958:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_ENABLE;
 800295a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800295e:	60d8      	str	r0, [r3, #12]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_ENABLE;
 8002960:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockDiv = 10;
 8002962:	220a      	movs	r2, #10
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002964:	6118      	str	r0, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002966:	6158      	str	r0, [r3, #20]
  hsd1.Init.ClockDiv = 10;
 8002968:	619a      	str	r2, [r3, #24]
  MX_FATFS_Init();
 800296a:	f7ff ff63 	bl	8002834 <MX_FATFS_Init>
 800296e:	e7fe      	b.n	800296e <main+0x5a>
 8002970:	40023800 	.word	0x40023800
 8002974:	20000530 	.word	0x20000530
 8002978:	50051000 	.word	0x50051000
 800297c:	200004ac 	.word	0x200004ac
 8002980:	40012c00 	.word	0x40012c00

08002984 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8002984:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8002986:	2301      	movs	r3, #1
 8002988:	4c05      	ldr	r4, [pc, #20]	; (80029a0 <SD_CheckStatus.isra.0+0x1c>)
 800298a:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800298c:	f7ff ff3e 	bl	800280c <BSP_SD_GetCardState>
 8002990:	4623      	mov	r3, r4
 8002992:	b918      	cbnz	r0, 800299c <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8002994:	7822      	ldrb	r2, [r4, #0]
 8002996:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800299a:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 800299c:	7818      	ldrb	r0, [r3, #0]
}
 800299e:	bd10      	pop	{r4, pc}
 80029a0:	20000008 	.word	0x20000008

080029a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80029a4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80029a6:	2301      	movs	r3, #1
 80029a8:	4c04      	ldr	r4, [pc, #16]	; (80029bc <SD_initialize+0x18>)
 80029aa:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80029ac:	f7ff fef6 	bl	800279c <BSP_SD_Init>
 80029b0:	b910      	cbnz	r0, 80029b8 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 80029b2:	f7ff ffe7 	bl	8002984 <SD_CheckStatus.isra.0>
 80029b6:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80029b8:	7820      	ldrb	r0, [r4, #0]
}
 80029ba:	bd10      	pop	{r4, pc}
 80029bc:	20000008 	.word	0x20000008

080029c0 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 80029c0:	f7ff bfe0 	b.w	8002984 <SD_CheckStatus.isra.0>

080029c4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80029c4:	b570      	push	{r4, r5, r6, lr}
 80029c6:	4608      	mov	r0, r1
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 80029c8:	4c15      	ldr	r4, [pc, #84]	; (8002a20 <SD_read+0x5c>)
{
 80029ca:	4611      	mov	r1, r2
  ReadStatus = 0;
 80029cc:	2200      	movs	r2, #0
 80029ce:	6022      	str	r2, [r4, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80029d0:	461a      	mov	r2, r3
 80029d2:	f7ff feff 	bl	80027d4 <BSP_SD_ReadBlocks_DMA>
 80029d6:	b108      	cbz	r0, 80029dc <SD_read+0x18>
  DRESULT res = RES_ERROR;
 80029d8:	2001      	movs	r0, #1
 80029da:	bd70      	pop	{r4, r5, r6, pc}
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 80029dc:	f7fd fdf0 	bl	80005c0 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80029e0:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 80029e4:	4606      	mov	r6, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	b19b      	cbz	r3, 8002a12 <SD_read+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f3      	beq.n	80029d8 <SD_read+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      ReadStatus = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 80029f4:	f7fd fde4 	bl	80005c0 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80029f8:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 80029fc:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80029fe:	f7fd fddf 	bl	80005c0 <HAL_GetTick>
 8002a02:	1b40      	subs	r0, r0, r5
 8002a04:	42a0      	cmp	r0, r4
 8002a06:	d8e7      	bhi.n	80029d8 <SD_read+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002a08:	f7ff ff00 	bl	800280c <BSP_SD_GetCardState>
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	d1f6      	bne.n	80029fe <SD_read+0x3a>
      }
    }
  }

  return res;
}
 8002a10:	bd70      	pop	{r4, r5, r6, pc}
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8002a12:	f7fd fdd5 	bl	80005c0 <HAL_GetTick>
 8002a16:	1b80      	subs	r0, r0, r6
 8002a18:	42a8      	cmp	r0, r5
 8002a1a:	d9e4      	bls.n	80029e6 <SD_read+0x22>
 8002a1c:	e7e5      	b.n	80029ea <SD_read+0x26>
 8002a1e:	bf00      	nop
 8002a20:	20000038 	.word	0x20000038

08002a24 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	4608      	mov	r0, r1
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 8002a28:	4c15      	ldr	r4, [pc, #84]	; (8002a80 <SD_write+0x5c>)
{
 8002a2a:	4611      	mov	r1, r2
  WriteStatus = 0;
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	6022      	str	r2, [r4, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8002a30:	461a      	mov	r2, r3
 8002a32:	f7ff fedd 	bl	80027f0 <BSP_SD_WriteBlocks_DMA>
 8002a36:	b108      	cbz	r0, 8002a3c <SD_write+0x18>
  DRESULT res = RES_ERROR;
 8002a38:	2001      	movs	r0, #1
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */

    timeout = HAL_GetTick();
 8002a3c:	f7fd fdc0 	bl	80005c0 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8002a40:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 8002a44:	4606      	mov	r6, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	b19b      	cbz	r3, 8002a72 <SD_write+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f3      	beq.n	8002a38 <SD_write+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      WriteStatus = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 8002a54:	f7fd fdb4 	bl	80005c0 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8002a58:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 8002a5c:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8002a5e:	f7fd fdaf 	bl	80005c0 <HAL_GetTick>
 8002a62:	1b40      	subs	r0, r0, r5
 8002a64:	42a0      	cmp	r0, r4
 8002a66:	d8e7      	bhi.n	8002a38 <SD_write+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002a68:	f7ff fed0 	bl	800280c <BSP_SD_GetCardState>
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	d1f6      	bne.n	8002a5e <SD_write+0x3a>
      }
    }
  }

  return res;
}
 8002a70:	bd70      	pop	{r4, r5, r6, pc}
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8002a72:	f7fd fda5 	bl	80005c0 <HAL_GetTick>
 8002a76:	1b80      	subs	r0, r0, r6
 8002a78:	42a8      	cmp	r0, r5
 8002a7a:	d9e4      	bls.n	8002a46 <SD_write+0x22>
 8002a7c:	e7e5      	b.n	8002a4a <SD_write+0x26>
 8002a7e:	bf00      	nop
 8002a80:	2000003c 	.word	0x2000003c

08002a84 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <SD_ioctl+0x4c>)
{
 8002a86:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002a88:	781b      	ldrb	r3, [r3, #0]
{
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002a8e:	07db      	lsls	r3, r3, #31
 8002a90:	d41b      	bmi.n	8002aca <SD_ioctl+0x46>

  switch (cmd)
 8002a92:	2903      	cmp	r1, #3
 8002a94:	d803      	bhi.n	8002a9e <SD_ioctl+0x1a>
 8002a96:	e8df f001 	tbb	[pc, r1]
 8002a9a:	0510      	.short	0x0510
 8002a9c:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8002a9e:	2004      	movs	r0, #4
  }

  return res;
}
 8002aa0:	b008      	add	sp, #32
 8002aa2:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8002aa4:	4668      	mov	r0, sp
 8002aa6:	f7ff febb 	bl	8002820 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8002aaa:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002aac:	6023      	str	r3, [r4, #0]
 8002aae:	e004      	b.n	8002aba <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8002ab0:	4668      	mov	r0, sp
 8002ab2:	f7ff feb5 	bl	8002820 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8002ab6:	9b07      	ldr	r3, [sp, #28]
 8002ab8:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8002aba:	2000      	movs	r0, #0
 8002abc:	e7f0      	b.n	8002aa0 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8002abe:	4668      	mov	r0, sp
 8002ac0:	f7ff feae 	bl	8002820 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002ac4:	9b07      	ldr	r3, [sp, #28]
 8002ac6:	0a5b      	lsrs	r3, r3, #9
 8002ac8:	e7f0      	b.n	8002aac <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002aca:	2003      	movs	r0, #3
 8002acc:	e7e8      	b.n	8002aa0 <SD_ioctl+0x1c>
 8002ace:	bf00      	nop
 8002ad0:	20000008 	.word	0x20000008

08002ad4 <BSP_SD_ReadCpltCallback>:
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	4b01      	ldr	r3, [pc, #4]	; (8002adc <BSP_SD_ReadCpltCallback+0x8>)
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	4770      	bx	lr
 8002adc:	20000038 	.word	0x20000038

08002ae0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae0:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <HAL_MspInit+0x88>)
{
 8002ae2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae6:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
 8002aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002af4:	9200      	str	r2, [sp, #0]
 8002af6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0a:	f7fd fd71 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f06f 000b 	mvn.w	r0, #11
 8002b14:	4611      	mov	r1, r2
 8002b16:	f7fd fd7d 	bl	8000614 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f06f 000a 	mvn.w	r0, #10
 8002b20:	4611      	mov	r1, r2
 8002b22:	f7fd fd77 	bl	8000614 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	f06f 0009 	mvn.w	r0, #9
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	f7fd fd71 	bl	8000614 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	f06f 0004 	mvn.w	r0, #4
 8002b38:	4611      	mov	r1, r2
 8002b3a:	f7fd fd6b 	bl	8000614 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f06f 0003 	mvn.w	r0, #3
 8002b44:	4611      	mov	r1, r2
 8002b46:	f7fd fd65 	bl	8000614 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f06f 0001 	mvn.w	r0, #1
 8002b50:	4611      	mov	r1, r2
 8002b52:	f7fd fd5f 	bl	8000614 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	f7fd fd59 	bl	8000614 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b62:	b003      	add	sp, #12
 8002b64:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b68:	40023800 	.word	0x40023800

08002b6c <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{

  if(hjpeg->Instance==JPEG)
 8002b6c:	6802      	ldr	r2, [r0, #0]
{
 8002b6e:	b082      	sub	sp, #8
  if(hjpeg->Instance==JPEG)
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <HAL_JPEG_MspInit+0x24>)
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d109      	bne.n	8002b8a <HAL_JPEG_MspInit+0x1e>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_JPEG_MspInit+0x28>)
 8002b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7a:	f042 0202 	orr.w	r2, r2, #2
 8002b7e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8002b8a:	b002      	add	sp, #8
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	50051000 	.word	0x50051000
 8002b94:	40023800 	.word	0x40023800

08002b98 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 8002b98:	6802      	ldr	r2, [r0, #0]
 8002b9a:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <HAL_SD_MspInit+0x5c>)
 8002b9c:	429a      	cmp	r2, r3
{
 8002b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba0:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 8002ba2:	d124      	bne.n	8002bee <HAL_SD_MspInit+0x56>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002ba4:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bac:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002bae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002bb0:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb2:	a901      	add	r1, sp, #4
 8002bb4:	4810      	ldr	r0, [pc, #64]	; (8002bf8 <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bba:	645a      	str	r2, [r3, #68]	; 0x44
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc6:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002bcc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002bd0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002bd2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd4:	f7fd fdbc 	bl	8000750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bd8:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bda:	4808      	ldr	r0, [pc, #32]	; (8002bfc <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	9702      	str	r7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bde:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002be2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002be8:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bea:	f7fd fdb1 	bl	8000750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002bee:	b007      	add	sp, #28
 8002bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40020800 	.word	0x40020800
 8002bfc:	40020c00 	.word	0x40020c00

08002c00 <NMI_Handler>:
 8002c00:	4770      	bx	lr

08002c02 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002c02:	e7fe      	b.n	8002c02 <HardFault_Handler>

08002c04 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002c04:	e7fe      	b.n	8002c04 <MemManage_Handler>

08002c06 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002c06:	e7fe      	b.n	8002c06 <BusFault_Handler>

08002c08 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002c08:	e7fe      	b.n	8002c08 <UsageFault_Handler>

08002c0a <SVC_Handler>:
 8002c0a:	4770      	bx	lr

08002c0c <DebugMon_Handler>:
 8002c0c:	4770      	bx	lr

08002c0e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002c0e:	4770      	bx	lr

08002c10 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002c10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c12:	f7fd fcc9 	bl	80005a8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002c1a:	f7fd bd56 	b.w	80006ca <HAL_SYSTICK_IRQHandler>
	...

08002c20 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c20:	490f      	ldr	r1, [pc, #60]	; (8002c60 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c22:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c24:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <SystemInit+0x44>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002c3a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c46:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002c48:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <SystemInit+0x48>)
 8002c4a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c52:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c54:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c5a:	608b      	str	r3, [r1, #8]
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000ed00 	.word	0xe000ed00
 8002c64:	40023800 	.word	0x40023800
 8002c68:	24003010 	.word	0x24003010

08002c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c72:	e003      	b.n	8002c7c <LoopCopyDataInit>

08002c74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c7a:	3104      	adds	r1, #4

08002c7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c7c:	480b      	ldr	r0, [pc, #44]	; (8002cac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c84:	d3f6      	bcc.n	8002c74 <CopyDataInit>
  ldr  r2, =_sbss
 8002c86:	4a0b      	ldr	r2, [pc, #44]	; (8002cb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c88:	e002      	b.n	8002c90 <LoopFillZerobss>

08002c8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c8c:	f842 3b04 	str.w	r3, [r2], #4

08002c90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c94:	d3f9      	bcc.n	8002c8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c96:	f7ff ffc3 	bl	8002c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9a:	f000 f811 	bl	8002cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c9e:	f7ff fe39 	bl	8002914 <main>
  bx  lr    
 8002ca2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ca4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002ca8:	08002f70 	.word	0x08002f70
  ldr  r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cb0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002cb4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002cb8:	20000584 	.word	0x20000584

08002cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cbc:	e7fe      	b.n	8002cbc <ADC_IRQHandler>
	...

08002cc0 <__libc_init_array>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	4e0d      	ldr	r6, [pc, #52]	; (8002cf8 <__libc_init_array+0x38>)
 8002cc4:	4c0d      	ldr	r4, [pc, #52]	; (8002cfc <__libc_init_array+0x3c>)
 8002cc6:	1ba4      	subs	r4, r4, r6
 8002cc8:	10a4      	asrs	r4, r4, #2
 8002cca:	2500      	movs	r5, #0
 8002ccc:	42a5      	cmp	r5, r4
 8002cce:	d109      	bne.n	8002ce4 <__libc_init_array+0x24>
 8002cd0:	4e0b      	ldr	r6, [pc, #44]	; (8002d00 <__libc_init_array+0x40>)
 8002cd2:	4c0c      	ldr	r4, [pc, #48]	; (8002d04 <__libc_init_array+0x44>)
 8002cd4:	f000 f818 	bl	8002d08 <_init>
 8002cd8:	1ba4      	subs	r4, r4, r6
 8002cda:	10a4      	asrs	r4, r4, #2
 8002cdc:	2500      	movs	r5, #0
 8002cde:	42a5      	cmp	r5, r4
 8002ce0:	d105      	bne.n	8002cee <__libc_init_array+0x2e>
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
 8002ce4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ce8:	4798      	blx	r3
 8002cea:	3501      	adds	r5, #1
 8002cec:	e7ee      	b.n	8002ccc <__libc_init_array+0xc>
 8002cee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cf2:	4798      	blx	r3
 8002cf4:	3501      	adds	r5, #1
 8002cf6:	e7f2      	b.n	8002cde <__libc_init_array+0x1e>
 8002cf8:	08002f68 	.word	0x08002f68
 8002cfc:	08002f68 	.word	0x08002f68
 8002d00:	08002f68 	.word	0x08002f68
 8002d04:	08002f6c 	.word	0x08002f6c

08002d08 <_init>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr

08002d14 <_fini>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	bf00      	nop
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr
