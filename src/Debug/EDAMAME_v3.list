
EDAMAME_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003994  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08003b8c  08003b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08003df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000073c  20000010  08003e08  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000074c  08003e08  0002074c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020fa7  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003ca6  00000000  00000000  00040fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c39e  00000000  00000000  00044c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e60  00000000  00000000  00051030  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013e0  00000000  00000000  00051e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008857  00000000  00000000  00053270  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005fd5  00000000  00000000  0005bac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00061a9c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002ac4  00000000  00000000  00061b18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08003b74 	.word	0x08003b74

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08003b74 	.word	0x08003b74

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_InitTick+0x3c>)
{
 800054c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_InitTick+0x40>)
 8000550:	7818      	ldrb	r0, [r3, #0]
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f0 	udiv	r3, r3, r0
 800055a:	6810      	ldr	r0, [r2, #0]
 800055c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000560:	f000 f89a 	bl	8000698 <HAL_SYSTICK_Config>
 8000564:	4604      	mov	r4, r0
 8000566:	b958      	cbnz	r0, 8000580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000568:	2d0f      	cmp	r5, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	4602      	mov	r2, r0
 800056e:	4629      	mov	r1, r5
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 f858 	bl	8000628 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_InitTick+0x44>)
 800057a:	4620      	mov	r0, r4
 800057c:	601d      	str	r5, [r3, #0]
 800057e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	2000000c 	.word	0x2000000c
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_Init>:
{
 8000590:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000594:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800059c:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005a4:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a6:	f000 f82d 	bl	8000604 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f7ff ffcc 	bl	8000548 <HAL_InitTick>
  HAL_MspInit();
 80005b0:	f003 f912 	bl	80037d8 <HAL_MspInit>
}
 80005b4:	2000      	movs	r0, #0
 80005b6:	bd08      	pop	{r3, pc}
 80005b8:	40023c00 	.word	0x40023c00

080005bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005bc:	4a03      	ldr	r2, [pc, #12]	; (80005cc <HAL_IncTick+0x10>)
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_IncTick+0x14>)
 80005c0:	6811      	ldr	r1, [r2, #0]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	440b      	add	r3, r1
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000038 	.word	0x20000038
 80005d0:	20000000 	.word	0x20000000

080005d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005d4:	4b01      	ldr	r3, [pc, #4]	; (80005dc <HAL_GetTick+0x8>)
 80005d6:	6818      	ldr	r0, [r3, #0]
}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000038 	.word	0x20000038

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b538      	push	{r3, r4, r5, lr}
 80005e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005e4:	f7ff fff6 	bl	80005d4 <HAL_GetTick>
 80005e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ea:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005ec:	bf1e      	ittt	ne
 80005ee:	4b04      	ldrne	r3, [pc, #16]	; (8000600 <HAL_Delay+0x20>)
 80005f0:	781b      	ldrbne	r3, [r3, #0]
 80005f2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005f4:	f7ff ffee 	bl	80005d4 <HAL_GetTick>
 80005f8:	1b40      	subs	r0, r0, r5
 80005fa:	4284      	cmp	r4, r0
 80005fc:	d8fa      	bhi.n	80005f4 <HAL_Delay+0x14>
  {
  }
}
 80005fe:	bd38      	pop	{r3, r4, r5, pc}
 8000600:	20000000 	.word	0x20000000

08000604 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000606:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800060a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000612:	041b      	lsls	r3, r3, #16
 8000614:	0c1b      	lsrs	r3, r3, #16
 8000616:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800061e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000620:	60d3      	str	r3, [r2, #12]
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	68dc      	ldr	r4, [r3, #12]
 800062e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000632:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000636:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000638:	2b04      	cmp	r3, #4
 800063a:	bf28      	it	cs
 800063c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000644:	bf8c      	ite	hi
 8000646:	3c03      	subhi	r4, #3
 8000648:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800064e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	f103 33ff 	add.w	r3, r3, #4294967295
 8000654:	ea01 0103 	and.w	r1, r1, r3
 8000658:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800065c:	fa05 f404 	lsl.w	r4, r5, r4
 8000660:	f104 34ff 	add.w	r4, r4, #4294967295
 8000664:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	ea42 0201 	orr.w	r2, r2, r1
 800066c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000670:	da05      	bge.n	800067e <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	f000 000f 	and.w	r0, r0, #15
 8000676:	b2d2      	uxtb	r2, r2
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_NVIC_SetPriority+0x6c>)
 800067a:	541a      	strb	r2, [r3, r0]
 800067c:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000688:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00
 8000694:	e000ed14 	.word	0xe000ed14

08000698 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000698:	3801      	subs	r0, #1
 800069a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800069e:	d20a      	bcs.n	80006b6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	21f0      	movs	r1, #240	; 0xf0
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a6:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000e010 	.word	0xe000e010
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c8:	680b      	ldr	r3, [r1, #0]
{
 80006ca:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000890 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d0:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80006d2:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006d4:	4a6c      	ldr	r2, [pc, #432]	; (8000888 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006d6:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000894 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80006da:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006de:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80006e0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006e8:	45b6      	cmp	lr, r6
 80006ea:	f040 80b3 	bne.w	8000854 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006ee:	684c      	ldr	r4, [r1, #4]
 80006f0:	f024 0710 	bic.w	r7, r4, #16
 80006f4:	2f02      	cmp	r7, #2
 80006f6:	d116      	bne.n	8000726 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80006f8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006fc:	f003 0b07 	and.w	fp, r3, #7
 8000700:	f04f 0c0f 	mov.w	ip, #15
 8000704:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000708:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800070c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000710:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000714:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000718:	690d      	ldr	r5, [r1, #16]
 800071a:	fa05 f50b 	lsl.w	r5, r5, fp
 800071e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000722:	f8ca 5020 	str.w	r5, [sl, #32]
 8000726:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800072a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800072c:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000730:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000734:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000738:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800073a:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800073e:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000740:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000742:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000746:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 800074a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800074e:	d811      	bhi.n	8000774 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000750:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000752:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000756:	68cf      	ldr	r7, [r1, #12]
 8000758:	fa07 fc0a 	lsl.w	ip, r7, sl
 800075c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000760:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000762:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000764:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000768:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800076c:	409f      	lsls	r7, r3
 800076e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000772:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000774:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000776:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000778:	688f      	ldr	r7, [r1, #8]
 800077a:	fa07 f70a 	lsl.w	r7, r7, sl
 800077e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000780:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000782:	00e5      	lsls	r5, r4, #3
 8000784:	d566      	bpl.n	8000854 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800078a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800078e:	f003 0e03 	and.w	lr, r3, #3
 8000792:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800079a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800079e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80007a6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80007aa:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80007ae:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80007b2:	9503      	str	r5, [sp, #12]
 80007b4:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007b6:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80007ba:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007be:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007c2:	4d32      	ldr	r5, [pc, #200]	; (800088c <HAL_GPIO_Init+0x1c8>)
 80007c4:	42a8      	cmp	r0, r5
 80007c6:	d04c      	beq.n	8000862 <HAL_GPIO_Init+0x19e>
 80007c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007cc:	42a8      	cmp	r0, r5
 80007ce:	d04a      	beq.n	8000866 <HAL_GPIO_Init+0x1a2>
 80007d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d4:	42a8      	cmp	r0, r5
 80007d6:	d048      	beq.n	800086a <HAL_GPIO_Init+0x1a6>
 80007d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007dc:	42a8      	cmp	r0, r5
 80007de:	d046      	beq.n	800086e <HAL_GPIO_Init+0x1aa>
 80007e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e4:	42a8      	cmp	r0, r5
 80007e6:	d044      	beq.n	8000872 <HAL_GPIO_Init+0x1ae>
 80007e8:	4548      	cmp	r0, r9
 80007ea:	d044      	beq.n	8000876 <HAL_GPIO_Init+0x1b2>
 80007ec:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007f0:	42a8      	cmp	r0, r5
 80007f2:	d042      	beq.n	800087a <HAL_GPIO_Init+0x1b6>
 80007f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f8:	42a8      	cmp	r0, r5
 80007fa:	d040      	beq.n	800087e <HAL_GPIO_Init+0x1ba>
 80007fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000800:	42a8      	cmp	r0, r5
 8000802:	d03e      	beq.n	8000882 <HAL_GPIO_Init+0x1be>
 8000804:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000808:	42a8      	cmp	r0, r5
 800080a:	bf14      	ite	ne
 800080c:	250a      	movne	r5, #10
 800080e:	2509      	moveq	r5, #9
 8000810:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000814:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000818:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800081c:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800081e:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000822:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000824:	bf0c      	ite	eq
 8000826:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000828:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800082a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800082e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000830:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000832:	bf0c      	ite	eq
 8000834:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000836:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000838:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 800083c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800083e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000840:	bf0c      	ite	eq
 8000842:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000844:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000846:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000848:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800084a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800084c:	bf54      	ite	pl
 800084e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000850:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000852:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000854:	3301      	adds	r3, #1
 8000856:	2b10      	cmp	r3, #16
 8000858:	f47f af3f 	bne.w	80006da <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800085c:	b005      	add	sp, #20
 800085e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000862:	2500      	movs	r5, #0
 8000864:	e7d4      	b.n	8000810 <HAL_GPIO_Init+0x14c>
 8000866:	2501      	movs	r5, #1
 8000868:	e7d2      	b.n	8000810 <HAL_GPIO_Init+0x14c>
 800086a:	2502      	movs	r5, #2
 800086c:	e7d0      	b.n	8000810 <HAL_GPIO_Init+0x14c>
 800086e:	2503      	movs	r5, #3
 8000870:	e7ce      	b.n	8000810 <HAL_GPIO_Init+0x14c>
 8000872:	2504      	movs	r5, #4
 8000874:	e7cc      	b.n	8000810 <HAL_GPIO_Init+0x14c>
 8000876:	2505      	movs	r5, #5
 8000878:	e7ca      	b.n	8000810 <HAL_GPIO_Init+0x14c>
 800087a:	2506      	movs	r5, #6
 800087c:	e7c8      	b.n	8000810 <HAL_GPIO_Init+0x14c>
 800087e:	2507      	movs	r5, #7
 8000880:	e7c6      	b.n	8000810 <HAL_GPIO_Init+0x14c>
 8000882:	2508      	movs	r5, #8
 8000884:	e7c4      	b.n	8000810 <HAL_GPIO_Init+0x14c>
 8000886:	bf00      	nop
 8000888:	40013c00 	.word	0x40013c00
 800088c:	40020000 	.word	0x40020000
 8000890:	40023800 	.word	0x40023800
 8000894:	40021400 	.word	0x40021400

08000898 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000898:	6903      	ldr	r3, [r0, #16]
 800089a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800089c:	bf14      	ite	ne
 800089e:	2001      	movne	r0, #1
 80008a0:	2000      	moveq	r0, #0
 80008a2:	4770      	bx	lr

080008a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008a4:	b10a      	cbz	r2, 80008aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80008a6:	6181      	str	r1, [r0, #24]
 80008a8:	4770      	bx	lr
 80008aa:	0409      	lsls	r1, r1, #16
 80008ac:	e7fb      	b.n	80008a6 <HAL_GPIO_WritePin+0x2>

080008ae <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension) 
  * @retval HAL status
  */   
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{  
 80008ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008b0:	f100 0e10 	add.w	lr, r0, #16
 80008b4:	4607      	mov	r7, r0
  uint32_t i, p, l, code, si;
   
  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80008b6:	2500      	movs	r5, #0
  for (l = 0; l < 16; l++) 
  {
    i = (uint32_t)Bits[l];
 80008b8:	f817 4b01 	ldrb.w	r4, [r7], #1
    if ( (p + i) > 256)
 80008bc:	1966      	adds	r6, r4, r5
 80008be:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80008c2:	d80f      	bhi.n	80008e4 <JPEG_Bits_To_SizeCodes+0x36>
 80008c4:	440d      	add	r5, r1
    {  /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0)
    {
      Huffsize[p++] = (uint8_t) l+1;
 80008c6:	eba7 0c00 	sub.w	ip, r7, r0
    while (i != 0)
 80008ca:	b96c      	cbnz	r4, 80008e8 <JPEG_Bits_To_SizeCodes+0x3a>
  for (l = 0; l < 16; l++) 
 80008cc:	4577      	cmp	r7, lr
 80008ce:	4635      	mov	r5, r6
 80008d0:	d1f2      	bne.n	80008b8 <JPEG_Bits_To_SizeCodes+0xa>
      i--;
    }
  }
  Huffsize[p] = 0;
 80008d2:	558c      	strb	r4, [r1, r6]
  *LastK = p; 
 80008d4:	601e      	str	r6, [r3, #0]
  
  /* Figure C.2: Generation of table of Huffman codes */ 
  code = 0;
 80008d6:	4623      	mov	r3, r4
  si = Huffsize[0];
 80008d8:	780d      	ldrb	r5, [r1, #0]
    {
      Huffcode[p++] = code;
      code++;
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80008da:	2601      	movs	r6, #1
  while (Huffsize[p] != 0) 
 80008dc:	5d08      	ldrb	r0, [r1, r4]
 80008de:	b1a8      	cbz	r0, 800090c <JPEG_Bits_To_SizeCodes+0x5e>
 80008e0:	1b1b      	subs	r3, r3, r4
 80008e2:	e008      	b.n	80008f6 <JPEG_Bits_To_SizeCodes+0x48>
      return HAL_ERROR;
 80008e4:	2001      	movs	r0, #1
 80008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Huffsize[p++] = (uint8_t) l+1;
 80008e8:	f805 cb01 	strb.w	ip, [r5], #1
      i--;
 80008ec:	3c01      	subs	r4, #1
 80008ee:	e7ec      	b.n	80008ca <JPEG_Bits_To_SizeCodes+0x1c>
      Huffcode[p++] = code;
 80008f0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80008f4:	3401      	adds	r4, #1
    while (((uint32_t) Huffsize[p]) == si) 
 80008f6:	5d0f      	ldrb	r7, [r1, r4]
 80008f8:	1918      	adds	r0, r3, r4
 80008fa:	42bd      	cmp	r5, r7
 80008fc:	d0f8      	beq.n	80008f0 <JPEG_Bits_To_SizeCodes+0x42>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80008fe:	fa06 f305 	lsl.w	r3, r6, r5
 8000902:	4283      	cmp	r3, r0
 8000904:	d9ee      	bls.n	80008e4 <JPEG_Bits_To_SizeCodes+0x36>
    {
      return HAL_ERROR;
    }
    code <<= 1;
 8000906:	0043      	lsls	r3, r0, #1
    si++;
 8000908:	3501      	adds	r5, #1
 800090a:	e7e7      	b.n	80008dc <JPEG_Bits_To_SizeCodes+0x2e>
  }    
  /* Return function status */
  return HAL_OK;
}
 800090c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800090e <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_BitsValsTable pointer to DC huffman bits/vals table
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table 
  * @retval HAL status
  */ 
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable, JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800090e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000910:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 8000914:	460d      	mov	r5, r1
 8000916:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];  
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8000918:	ae43      	add	r6, sp, #268	; 0x10c
 800091a:	af02      	add	r7, sp, #8
 800091c:	ab01      	add	r3, sp, #4
 800091e:	4632      	mov	r2, r6
 8000920:	4639      	mov	r1, r7
 8000922:	f7ff ffc4 	bl	80008ae <JPEG_Bits_To_SizeCodes>
  if(error != HAL_OK)
 8000926:	b930      	cbnz	r0, 8000936 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>
    return  error;
  }  
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k=0;
    
  while(k < lastK)
 8000928:	f8dd e004 	ldr.w	lr, [sp, #4]
 800092c:	f104 0210 	add.w	r2, r4, #16
 8000930:	4603      	mov	r3, r0
 8000932:	4573      	cmp	r3, lr
 8000934:	d102      	bne.n	800093c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2e>
    }      
  }
  
  /* Return function status */
  return HAL_OK;  
}
 8000936:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 800093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800093c:	f812 1b01 	ldrb.w	r1, [r2], #1
    if(l >= JPEG_DC_HUFF_TABLE_SIZE)
 8000940:	290b      	cmp	r1, #11
 8000942:	d80a      	bhi.n	800095a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8000944:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
 8000948:	eb05 0c81 	add.w	ip, r5, r1, lsl #2
 800094c:	f8cc 400c 	str.w	r4, [ip, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1;
 8000950:	5cfc      	ldrb	r4, [r7, r3]
      k++;
 8000952:	3301      	adds	r3, #1
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1;
 8000954:	3c01      	subs	r4, #1
 8000956:	546c      	strb	r4, [r5, r1]
 8000958:	e7eb      	b.n	8000932 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x24>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800095a:	2001      	movs	r0, #1
 800095c:	e7eb      	b.n	8000936 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>

0800095e <JPEG_Set_HuffDC_Mem>:
  * @param  HuffTableDC pointer to DC huffman table
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1. 
  * @retval HAL status
  */    
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC, uint32_t *DCTableAddress)
{
 800095e:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef error = HAL_OK;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;
  
  if(DCTableAddress == (uint32_t *)(hjpeg->Instance->HUFFENC_DC0))
 8000960:	6804      	ldr	r4, [r0, #0]
{
 8000962:	460b      	mov	r3, r1
 8000964:	b090      	sub	sp, #64	; 0x40
  if(DCTableAddress == (uint32_t *)(hjpeg->Instance->HUFFENC_DC0))
 8000966:	f504 61f8 	add.w	r1, r4, #1984	; 0x7c0
 800096a:	428a      	cmp	r2, r1
 800096c:	d105      	bne.n	800097a <JPEG_Set_HuffDC_Mem+0x1c>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE/2));
 800096e:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
  else
  {
    return HAL_ERROR;
  }

  if(HuffTableDC != NULL)
 8000972:	b94b      	cbnz	r3, 8000988 <JPEG_Set_HuffDC_Mem+0x2a>
      *address = lsb | (msb << 16);
    }        
  }
  
  /* Return function status */
  return HAL_OK;  
 8000974:	2000      	movs	r0, #0
}
 8000976:	b010      	add	sp, #64	; 0x40
 8000978:	bd70      	pop	{r4, r5, r6, pc}
  else if (DCTableAddress == (uint32_t *)(hjpeg->Instance->HUFFENC_DC1))
 800097a:	f504 61fc 	add.w	r1, r4, #2016	; 0x7e0
 800097e:	428a      	cmp	r2, r1
 8000980:	d128      	bne.n	80009d4 <JPEG_Set_HuffDC_Mem+0x76>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE/2));
 8000982:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
 8000986:	e7f4      	b.n	8000972 <JPEG_Set_HuffDC_Mem+0x14>
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8000988:	ad01      	add	r5, sp, #4
 800098a:	4618      	mov	r0, r3
 800098c:	4629      	mov	r1, r5
 800098e:	f7ff ffbe 	bl	800090e <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if(error != HAL_OK)
 8000992:	2800      	cmp	r0, #0
 8000994:	d1ef      	bne.n	8000976 <JPEG_Set_HuffDC_Mem+0x18>
    *addressDef = 0x0FFF0FFF;
 8000996:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 800099a:	4628      	mov	r0, r5
    i = JPEG_DC_HUFF_TABLE_SIZE;
 800099c:	210c      	movs	r1, #12
    *addressDef = 0x0FFF0FFF;
 800099e:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 80009a0:	6063      	str	r3, [r4, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] & 0xFF);
 80009a2:	186b      	adds	r3, r5, r1
 80009a4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
      i--;
 80009a8:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] & 0xFF);
 80009aa:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] & 0xFF);
 80009ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80009b2:	3808      	subs	r0, #8
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80009ba:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] & 0xFF);
 80009bc:	5c6b      	ldrb	r3, [r5, r1]
 80009be:	021b      	lsls	r3, r3, #8
 80009c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80009c4:	4333      	orrs	r3, r6
      *address = lsb | (msb << 16);
 80009c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009ca:	f844 3d04 	str.w	r3, [r4, #-4]!
    while(i>0)
 80009ce:	2900      	cmp	r1, #0
 80009d0:	d1e7      	bne.n	80009a2 <JPEG_Set_HuffDC_Mem+0x44>
 80009d2:	e7cf      	b.n	8000974 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 80009d4:	2001      	movs	r0, #1
 80009d6:	e7ce      	b.n	8000976 <JPEG_Set_HuffDC_Mem+0x18>

080009d8 <JPEG_Set_HuffAC_Mem>:
  * @param  HuffTableAC pointer to AC huffman table
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1. 
  * @retval HAL status
  */  
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC, uint32_t *ACTableAddress)
{
 80009d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error = HAL_OK;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;
  
  if(ACTableAddress == (uint32_t *)(hjpeg->Instance->HUFFENC_AC0))
 80009dc:	6804      	ldr	r4, [r0, #0]
{
 80009de:	f6ad 0d38 	subw	sp, sp, #2104	; 0x838
 80009e2:	460f      	mov	r7, r1
  if(ACTableAddress == (uint32_t *)(hjpeg->Instance->HUFFENC_AC0))
 80009e4:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d107      	bne.n	80009fc <JPEG_Set_HuffAC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE/2));
 80009ec:	f204 6444 	addw	r4, r4, #1604	; 0x644
  else
  {
    return HAL_ERROR;
  } 
    
  if(HuffTableAC != NULL)
 80009f0:	b95f      	cbnz	r7, 8000a0a <JPEG_Set_HuffAC_Mem+0x32>
      *address = lsb | (msb << 16);       
    }  
  }
  
  /* Return function status */
  return HAL_OK;
 80009f2:	2000      	movs	r0, #0
}
 80009f4:	f60d 0d38 	addw	sp, sp, #2104	; 0x838
 80009f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (uint32_t *)(hjpeg->Instance->HUFFENC_AC1))
 80009fc:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d152      	bne.n	8000aaa <JPEG_Set_HuffAC_Mem+0xd2>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE/2));
 8000a04:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
 8000a08:	e7f2      	b.n	80009f0 <JPEG_Set_HuffAC_Mem+0x18>
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8000a0a:	f20d 4534 	addw	r5, sp, #1076	; 0x434
 8000a0e:	ae01      	add	r6, sp, #4
 8000a10:	466b      	mov	r3, sp
 8000a12:	4638      	mov	r0, r7
 8000a14:	462a      	mov	r2, r5
 8000a16:	4631      	mov	r1, r6
 8000a18:	f7ff ff49 	bl	80008ae <JPEG_Bits_To_SizeCodes>
  if(error != HAL_OK)
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d1e9      	bne.n	80009f4 <JPEG_Set_HuffAC_Mem+0x1c>
 8000a20:	f107 0110 	add.w	r1, r7, #16
  while(k < lastK)
 8000a24:	f8dd e000 	ldr.w	lr, [sp]
      l = (msb * 10) + lsb - 1; 
 8000a28:	f04f 0c0a 	mov.w	ip, #10
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8000a2c:	af42      	add	r7, sp, #264	; 0x108
  while(k < lastK)
 8000a2e:	4570      	cmp	r0, lr
 8000a30:	d12e      	bne.n	8000a90 <JPEG_Set_HuffAC_Mem+0xb8>
      *addressDef = 0x0FFF0FFF;
 8000a32:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 8000a36:	a942      	add	r1, sp, #264	; 0x108
    i = JPEG_AC_HUFF_TABLE_SIZE;
 8000a38:	20a2      	movs	r0, #162	; 0xa2
      *addressDef = 0x0FFF0FFF;
 8000a3a:	6023      	str	r3, [r4, #0]
 8000a3c:	460d      	mov	r5, r1
 8000a3e:	6063      	str	r3, [r4, #4]
 8000a40:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8000a42:	f103 33d1 	add.w	r3, r3, #3520188881	; 0xd1d1d1d1
 8000a46:	f103 232e 	add.w	r3, r3, #771763712	; 0x2e002e00
 8000a4a:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8000a4c:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8000a50:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8000a52:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8000a56:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8000a58:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8000a5c:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] & 0xFF);
 8000a5e:	182b      	adds	r3, r5, r0
 8000a60:	f891 2328 	ldrb.w	r2, [r1, #808]	; 0x328
      i--;
 8000a64:	3802      	subs	r0, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] & 0xFF);
 8000a66:	f891 6324 	ldrb.w	r6, [r1, #804]	; 0x324
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] & 0xFF);
 8000a6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8000a6e:	3908      	subs	r1, #8
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a76:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xF) << 8 )) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] & 0xFF);
 8000a78:	5c2b      	ldrb	r3, [r5, r0]
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a80:	4333      	orrs	r3, r6
      *address = lsb | (msb << 16);       
 8000a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a86:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 0)
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	d1e7      	bne.n	8000a5e <JPEG_Set_HuffAC_Mem+0x86>
 8000a8e:	e7b0      	b.n	80009f2 <JPEG_Set_HuffAC_Mem+0x1a>
    l = AC_BitsValsTable->HuffVal[k];
 8000a90:	f811 3b01 	ldrb.w	r3, [r1], #1
    if(l == 0)
 8000a94:	b15b      	cbz	r3, 8000aae <JPEG_Set_HuffAC_Mem+0xd6>
    else if(l == 0xF0)/* l = 0xF0 ZRL code*/
 8000a96:	2bf0      	cmp	r3, #240	; 0xf0
 8000a98:	d015      	beq.n	8000ac6 <JPEG_Set_HuffAC_Mem+0xee>
      l = (msb * 10) + lsb - 1; 
 8000a9a:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0F);
 8000a9c:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10) + lsb - 1; 
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	fb1c 3302 	smlabb	r3, ip, r2, r3
    if(l >= JPEG_AC_HUFF_TABLE_SIZE)
 8000aa6:	2ba1      	cmp	r3, #161	; 0xa1
 8000aa8:	d902      	bls.n	8000ab0 <JPEG_Set_HuffAC_Mem+0xd8>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8000aaa:	2001      	movs	r0, #1
 8000aac:	e7a2      	b.n	80009f4 <JPEG_Set_HuffAC_Mem+0x1c>
      l = 160; /*l = 0x00 EOB code*/
 8000aae:	23a0      	movs	r3, #160	; 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8000ab0:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
 8000ab4:	eb07 0883 	add.w	r8, r7, r3, lsl #2
 8000ab8:	f8c8 20a4 	str.w	r2, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1;
 8000abc:	5c32      	ldrb	r2, [r6, r0]
      k++;
 8000abe:	3001      	adds	r0, #1
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1;
 8000ac0:	3a01      	subs	r2, #1
 8000ac2:	54fa      	strb	r2, [r7, r3]
 8000ac4:	e7b3      	b.n	8000a2e <JPEG_Set_HuffAC_Mem+0x56>
      l = 161;
 8000ac6:	23a1      	movs	r3, #161	; 0xa1
 8000ac8:	e7f2      	b.n	8000ab0 <JPEG_Set_HuffAC_Mem+0xd8>
	...

08000acc <HAL_JPEG_Init>:
{
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hjpeg == NULL)
 8000ace:	4604      	mov	r4, r0
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	f000 810f 	beq.w	8000cf4 <HAL_JPEG_Init+0x228>
  if(hjpeg->State == HAL_JPEG_STATE_RESET)
 8000ad6:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8000ada:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ade:	b91b      	cbnz	r3, 8000ae8 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8000ae0:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    HAL_JPEG_MspInit(hjpeg);
 8000ae4:	f002 fe90 	bl	8003808 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8000ae8:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8000aea:	2302      	movs	r3, #2
 8000aec:	4989      	ldr	r1, [pc, #548]	; (8000d14 <HAL_JPEG_Init+0x248>)
 8000aee:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
  __IO uint32_t *address;
  if(HuffTableDC0 != NULL)
  {
    /* DC0 Huffman Table : BITS*/
    /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
    address = (hjpeg->Instance->DHTMEM + 3); 
 8000af2:	f502 705b 	add.w	r0, r2, #876	; 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8000af6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000af8:	f502 7557 	add.w	r5, r2, #860	; 0x35c
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8000b02:	6813      	ldr	r3, [r2, #0]
 8000b04:	f023 0301 	bic.w	r3, r3, #1
 8000b08:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg,JPEG_INTERRUPT_MASK);
 8000b0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b0c:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
  JPEG_DISABLE_DMA(hjpeg,JPEG_DMA_MASK);
 8000b12:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b14:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8000b1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;  
 8000b22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg,JPEG_FLAG_ALL);
 8000b2a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000b2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000b30:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)JPEG_LUM_QuantTable;
 8000b32:	4b79      	ldr	r3, [pc, #484]	; (8000d18 <HAL_JPEG_Init+0x24c>)
 8000b34:	63a3      	str	r3, [r4, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)JPEG_CHROM_QuantTable;
 8000b36:	4b79      	ldr	r3, [pc, #484]	; (8000d1c <HAL_JPEG_Init+0x250>)
 8000b38:	63e3      	str	r3, [r4, #60]	; 0x3c
  hjpeg->QuantTable2 = NULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable3 = NULL;
 8000b3e:	6463      	str	r3, [r4, #68]	; 0x44
    index = 16;
    while(index > 0)
    {

      *address = (((uint32_t)HuffTableDC0->Bits[index-1] & 0xFF) << 24)|
                 (((uint32_t)HuffTableDC0->Bits[index-2] & 0xFF) << 16)|
 8000b40:	7b8b      	ldrb	r3, [r1, #14]
 8000b42:	3904      	subs	r1, #4
      *address = (((uint32_t)HuffTableDC0->Bits[index-1] & 0xFF) << 24)|
 8000b44:	7cce      	ldrb	r6, [r1, #19]
                 (((uint32_t)HuffTableDC0->Bits[index-2] & 0xFF) << 16)|
 8000b46:	041b      	lsls	r3, r3, #16
      *address = (((uint32_t)HuffTableDC0->Bits[index-1] & 0xFF) << 24)|
 8000b48:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
                 (((uint32_t)HuffTableDC0->Bits[index-3] & 0xFF) << 8) |
                 ((uint32_t)HuffTableDC0->Bits[index-4] & 0xFF);
 8000b4c:	7c0e      	ldrb	r6, [r1, #16]
                 (((uint32_t)HuffTableDC0->Bits[index-3] & 0xFF) << 8) |
 8000b4e:	4333      	orrs	r3, r6
 8000b50:	7c4e      	ldrb	r6, [r1, #17]
 8000b52:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      *address = (((uint32_t)HuffTableDC0->Bits[index-1] & 0xFF) << 24)|
 8000b56:	f840 3904 	str.w	r3, [r0], #-4
    while(index > 0)
 8000b5a:	42a8      	cmp	r0, r5
 8000b5c:	d1f0      	bne.n	8000b40 <HAL_JPEG_Init+0x74>
    /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
    address = (hjpeg->Instance->DHTMEM + 6);
    index = 12;
    while(index > 0)
    {
      *address = (((uint32_t)HuffTableDC0->HuffVal[index-1] & 0xFF) << 24)|
 8000b5e:	4b70      	ldr	r3, [pc, #448]	; (8000d20 <HAL_JPEG_Init+0x254>)

  if(HuffTableAC0 != NULL)
  {
    /* AC0 Huffman Table : BITS*/
    /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
    address = (hjpeg->Instance->DHTMEM + 10); 
 8000b60:	f502 7662 	add.w	r6, r2, #904	; 0x388
 8000b64:	496f      	ldr	r1, [pc, #444]	; (8000d24 <HAL_JPEG_Init+0x258>)
 8000b66:	f502 775e 	add.w	r7, r2, #888	; 0x378
      *address = (((uint32_t)HuffTableDC0->HuffVal[index-1] & 0xFF) << 24)|
 8000b6a:	f8c2 3378 	str.w	r3, [r2, #888]	; 0x378
 8000b6e:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
    address = (hjpeg->Instance->DHTMEM + 10); 
 8000b72:	460d      	mov	r5, r1
 8000b74:	4630      	mov	r0, r6
      *address = (((uint32_t)HuffTableDC0->HuffVal[index-1] & 0xFF) << 24)|
 8000b76:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
 8000b7a:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 8000b7e:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
    index = 16;
    while(index > 0)
    {

      *address = (((uint32_t)HuffTableAC0->Bits[index-1] & 0xFF) << 24)|
                 (((uint32_t)HuffTableAC0->Bits[index-2] & 0xFF) << 16)|
 8000b82:	7bab      	ldrb	r3, [r5, #14]
 8000b84:	3d04      	subs	r5, #4
      *address = (((uint32_t)HuffTableAC0->Bits[index-1] & 0xFF) << 24)|
 8000b86:	f895 e013 	ldrb.w	lr, [r5, #19]
                 (((uint32_t)HuffTableAC0->Bits[index-2] & 0xFF) << 16)|
 8000b8a:	041b      	lsls	r3, r3, #16
      *address = (((uint32_t)HuffTableAC0->Bits[index-1] & 0xFF) << 24)|
 8000b8c:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
                 (((uint32_t)HuffTableAC0->Bits[index-3] & 0xFF) << 8) |
                 ((uint32_t)HuffTableAC0->Bits[index-4] & 0xFF);
 8000b90:	f895 e010 	ldrb.w	lr, [r5, #16]
                 (((uint32_t)HuffTableAC0->Bits[index-3] & 0xFF) << 8) |
 8000b94:	ea43 030e 	orr.w	r3, r3, lr
 8000b98:	f895 e011 	ldrb.w	lr, [r5, #17]
 8000b9c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
      *address = (((uint32_t)HuffTableAC0->Bits[index-1] & 0xFF) << 24)|
 8000ba0:	f846 3904 	str.w	r3, [r6], #-4
    while(index > 0)
 8000ba4:	42be      	cmp	r6, r7
 8000ba6:	d1ec      	bne.n	8000b82 <HAL_JPEG_Init+0xb6>
    }
    /* AC0 Huffman Table : Val*/
    /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
    /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
    address = (hjpeg->Instance->DHTMEM + 51);    
    value = *address & 0xFFFF0000U;
 8000ba8:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFF) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFF);
    *address = value;
    
    /*continue setting 160 AC0 huffman values */
    address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8000bac:	f502 6585 	add.w	r5, r2, #1064	; 0x428
    value = *address & 0xFFFF0000U;
 8000bb0:	0c1b      	lsrs	r3, r3, #16
 8000bb2:	041b      	lsls	r3, r3, #16
    value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFF) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFF);
 8000bb4:	f443 437a 	orr.w	r3, r3, #64000	; 0xfa00
 8000bb8:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
    *address = value;
 8000bbc:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
    index = 160;
    while(index > 0)
    {
      *address = (((uint32_t)HuffTableAC0->HuffVal[index-1] & 0xFF) << 24)|
                 (((uint32_t)HuffTableAC0->HuffVal[index-2] & 0xFF) << 16)|
 8000bc0:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
 8000bc4:	3904      	subs	r1, #4
      *address = (((uint32_t)HuffTableAC0->HuffVal[index-1] & 0xFF) << 24)|
 8000bc6:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
                 (((uint32_t)HuffTableAC0->HuffVal[index-2] & 0xFF) << 16)|
 8000bca:	041b      	lsls	r3, r3, #16
      *address = (((uint32_t)HuffTableAC0->HuffVal[index-1] & 0xFF) << 24)|
 8000bcc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
                 (((uint32_t)HuffTableAC0->HuffVal[index-3] & 0xFF) << 8) |
                 ((uint32_t)HuffTableAC0->HuffVal[index-4] & 0xFF);
 8000bd0:	f891 60b0 	ldrb.w	r6, [r1, #176]	; 0xb0
                 (((uint32_t)HuffTableAC0->HuffVal[index-3] & 0xFF) << 8) |
 8000bd4:	4333      	orrs	r3, r6
 8000bd6:	f891 60b1 	ldrb.w	r6, [r1, #177]	; 0xb1
 8000bda:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      *address = (((uint32_t)HuffTableAC0->HuffVal[index-1] & 0xFF) << 24)|
 8000bde:	f845 3904 	str.w	r3, [r5], #-4
    while(index > 0)
 8000be2:	4285      	cmp	r5, r0
 8000be4:	d1ec      	bne.n	8000bc0 <HAL_JPEG_Init+0xf4>
  {
    /* DC1 Huffman Table : BITS*/
    /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
    /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
    address = (hjpeg->Instance->DHTMEM + 51);
    value = *address & 0x0000FFFFU;
 8000be6:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
 8000bea:	f502 658b 	add.w	r5, r2, #1112	; 0x458
    value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFF) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFF) << 16);
    *address = value;
    
    /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
    address = (hjpeg->Instance->DHTMEM + 55);
    value = *address & 0xFFFF0000U;
 8000bee:	484e      	ldr	r0, [pc, #312]	; (8000d28 <HAL_JPEG_Init+0x25c>)
    value = *address & 0x0000FFFFU;
 8000bf0:	b29b      	uxth	r3, r3
    value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFF) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFF) << 16);
 8000bf2:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
    *address = value;
 8000bf6:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
    value = *address & 0xFFFF0000U;
 8000bfa:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 8000bfe:	4003      	ands	r3, r0
    value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFF) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFF);    
    *address = value;
 8000c00:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    address--;
    index = 12;
    while(index > 0)
    {

      *address = (((uint32_t)HuffTableDC1->Bits[index+1] & 0xFF) << 24)|
 8000c04:	2301      	movs	r3, #1
 8000c06:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438
 8000c0a:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8000c0e:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 8000c12:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
    }
    /* DC1 Huffman Table : Val*/
    /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
    /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
    address = (hjpeg->Instance->DHTMEM + 55);
    value = *address & 0x0000FFFF;
 8000c16:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
    address--;
    index = 8;
    while(index > 0)
    {
      *address = (((uint32_t)HuffTableDC1->HuffVal[index+1] & 0xFF) << 24)|
 8000c1a:	4b44      	ldr	r3, [pc, #272]	; (8000d2c <HAL_JPEG_Init+0x260>)
    value = *address & 0x0000FFFF;
 8000c1c:	b289      	uxth	r1, r1
    value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFF) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFF) << 16);
 8000c1e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    *address = value;
 8000c22:	f8c2 143c 	str.w	r1, [r2, #1084]	; 0x43c
    value = *address & 0xFFFF0000U;
 8000c26:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 8000c2a:	4001      	ands	r1, r0
    value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFF) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFF);
 8000c2c:	f441 6130 	orr.w	r1, r1, #2816	; 0xb00
 8000c30:	f041 010a 	orr.w	r1, r1, #10
    *address = value;
 8000c34:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
      *address = (((uint32_t)HuffTableDC1->HuffVal[index+1] & 0xFF) << 24)|
 8000c38:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
 8000c3c:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 8000c40:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  {
    /* AC1 Huffman Table : BITS*/
    /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
    /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
    address = (hjpeg->Instance->DHTMEM + 58);
    value = *address & 0x0000FFFFU;
 8000c44:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 8000c48:	b289      	uxth	r1, r1
    value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFF) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFF) << 16);
 8000c4a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    *address = value;
 8000c4e:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
    
    /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
    address = (hjpeg->Instance->DHTMEM + 62);
    value = *address & 0xFFFF0000U;
 8000c52:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 8000c56:	4936      	ldr	r1, [pc, #216]	; (8000d30 <HAL_JPEG_Init+0x264>)
 8000c58:	4003      	ands	r3, r0
    value = *address & 0x0000FFFF;
    value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFF) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFF) << 16);
    *address = value;
    
    /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
    address = (hjpeg->Instance->DHTMEM + 102);
 8000c5a:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFF) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFF);
 8000c5e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000c62:	f043 0302 	orr.w	r3, r3, #2
    *address = value;
 8000c66:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
      *address = (((uint32_t)HuffTableAC1->Bits[index+1] & 0xFF) << 24)|
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <HAL_JPEG_Init+0x268>)
 8000c6c:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 8000c70:	4b31      	ldr	r3, [pc, #196]	; (8000d38 <HAL_JPEG_Init+0x26c>)
 8000c72:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 8000c76:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <HAL_JPEG_Init+0x270>)
 8000c78:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
    value = *address & 0x0000FFFF;
 8000c7c:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 8000c80:	b29b      	uxth	r3, r3
    value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFF) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFF) << 16);
 8000c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    *address = value;
 8000c86:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
    index = 160;
    while(index > 0)
    {
      *address = (((uint32_t)HuffTableAC1->HuffVal[index+1] & 0xFF) << 24)|
                 (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFF) << 16)|
 8000c8a:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
 8000c8e:	3904      	subs	r1, #4
      *address = (((uint32_t)HuffTableAC1->HuffVal[index+1] & 0xFF) << 24)|
 8000c90:	f891 60b5 	ldrb.w	r6, [r1, #181]	; 0xb5
                 (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFF) << 16)|
 8000c94:	041b      	lsls	r3, r3, #16
                 (((uint32_t)HuffTableAC1->HuffVal[index-1] & 0xFF) << 8) |
 8000c96:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
                 ((uint32_t)HuffTableAC1->HuffVal[index-2] & 0xFF);
 8000c9a:	f891 60b2 	ldrb.w	r6, [r1, #178]	; 0xb2
                 (((uint32_t)HuffTableAC1->HuffVal[index-1] & 0xFF) << 8) |
 8000c9e:	4333      	orrs	r3, r6
 8000ca0:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
 8000ca4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      *address = (((uint32_t)HuffTableAC1->HuffVal[index+1] & 0xFF) << 24)|
 8000ca8:	f840 3904 	str.w	r3, [r0], #-4
    while(index > 0)
 8000cac:	42a8      	cmp	r0, r5
 8000cae:	d1ec      	bne.n	8000c8a <HAL_JPEG_Init+0x1be>
    error = JPEG_Set_HuffAC_Mem(hjpeg, HuffTableAC0, (uint32_t *)(hjpeg->Instance->HUFFENC_AC0));
 8000cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000cb4:	491b      	ldr	r1, [pc, #108]	; (8000d24 <HAL_JPEG_Init+0x258>)
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f7ff fe8e 	bl	80009d8 <JPEG_Set_HuffAC_Mem>
    if(error != HAL_OK)
 8000cbc:	b9b8      	cbnz	r0, 8000cee <HAL_JPEG_Init+0x222>
    error = JPEG_Set_HuffAC_Mem(hjpeg, HuffTableAC1, (uint32_t *)(hjpeg->Instance->HUFFENC_AC1));
 8000cbe:	6822      	ldr	r2, [r4, #0]
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	491b      	ldr	r1, [pc, #108]	; (8000d30 <HAL_JPEG_Init+0x264>)
 8000cc4:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 8000cc8:	f7ff fe86 	bl	80009d8 <JPEG_Set_HuffAC_Mem>
    if(error != HAL_OK)
 8000ccc:	b978      	cbnz	r0, 8000cee <HAL_JPEG_Init+0x222>
    error = JPEG_Set_HuffDC_Mem(hjpeg, HuffTableDC0, (uint32_t *)hjpeg->Instance->HUFFENC_DC0);
 8000cce:	6822      	ldr	r2, [r4, #0]
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4910      	ldr	r1, [pc, #64]	; (8000d14 <HAL_JPEG_Init+0x248>)
 8000cd4:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8000cd8:	f7ff fe41 	bl	800095e <JPEG_Set_HuffDC_Mem>
    if(error != HAL_OK)
 8000cdc:	b938      	cbnz	r0, 8000cee <HAL_JPEG_Init+0x222>
    error = JPEG_Set_HuffDC_Mem(hjpeg, HuffTableDC1, (uint32_t *)hjpeg->Instance->HUFFENC_DC1);
 8000cde:	6822      	ldr	r2, [r4, #0]
 8000ce0:	4620      	mov	r0, r4
 8000ce2:	4917      	ldr	r1, [pc, #92]	; (8000d40 <HAL_JPEG_Init+0x274>)
 8000ce4:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 8000ce8:	f7ff fe39 	bl	800095e <JPEG_Set_HuffDC_Mem>
    if(error != HAL_OK)
 8000cec:	b120      	cbz	r0, 8000cf8 <HAL_JPEG_Init+0x22c>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8000cee:	2001      	movs	r0, #1
 8000cf0:	64e0      	str	r0, [r4, #76]	; 0x4c
    return HAL_ERROR;
 8000cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8000cf8:	6822      	ldr	r2, [r4, #0]
 8000cfa:	6853      	ldr	r3, [r2, #4]
 8000cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d00:	6053      	str	r3, [r2, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8000d02:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8000d04:	61e0      	str	r0, [r4, #28]
  hjpeg->JpegOutCount = 0;
 8000d06:	6220      	str	r0, [r4, #32]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8000d08:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8000d0c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hjpeg->Context = 0;
 8000d0e:	6520      	str	r0, [r4, #80]	; 0x50
}
 8000d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	08003d4c 	.word	0x08003d4c
 8000d18:	08003d68 	.word	0x08003d68
 8000d1c:	08003cf0 	.word	0x08003cf0
 8000d20:	0b0a0908 	.word	0x0b0a0908
 8000d24:	08003c3e 	.word	0x08003c3e
 8000d28:	ffff0000 	.word	0xffff0000
 8000d2c:	09080706 	.word	0x09080706
 8000d30:	08003b8c 	.word	0x08003b8c
 8000d34:	01000404 	.word	0x01000404
 8000d38:	05070403 	.word	0x05070403
 8000d3c:	04040201 	.word	0x04040201
 8000d40:	08003d30 	.word	0x08003d30

08000d44 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000d46:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d4a:	4c19      	ldr	r4, [pc, #100]	; (8000db0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d50:	641a      	str	r2, [r3, #64]	; 0x40
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d62:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d64:	f7ff fc36 	bl	80005d4 <HAL_GetTick>
 8000d68:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d6a:	6863      	ldr	r3, [r4, #4]
 8000d6c:	03da      	lsls	r2, r3, #15
 8000d6e:	d50c      	bpl.n	8000d8a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d76:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d78:	f7ff fc2c 	bl	80005d4 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d7c:	4c0c      	ldr	r4, [pc, #48]	; (8000db0 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000d7e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d80:	6863      	ldr	r3, [r4, #4]
 8000d82:	039b      	lsls	r3, r3, #14
 8000d84:	d50a      	bpl.n	8000d9c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000d86:	2000      	movs	r0, #0
 8000d88:	e006      	b.n	8000d98 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d8a:	f7ff fc23 	bl	80005d4 <HAL_GetTick>
 8000d8e:	1b40      	subs	r0, r0, r5
 8000d90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d94:	d9e9      	bls.n	8000d6a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000d96:	2003      	movs	r0, #3
}
 8000d98:	b003      	add	sp, #12
 8000d9a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d9c:	f7ff fc1a 	bl	80005d4 <HAL_GetTick>
 8000da0:	1b40      	subs	r0, r0, r5
 8000da2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000da6:	d9eb      	bls.n	8000d80 <HAL_PWREx_EnableOverDrive+0x3c>
 8000da8:	e7f5      	b.n	8000d96 <HAL_PWREx_EnableOverDrive+0x52>
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40007000 	.word	0x40007000

08000db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000db8:	4604      	mov	r4, r0
 8000dba:	b918      	cbnz	r0, 8000dc4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000dbc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000dbe:	b002      	add	sp, #8
 8000dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc4:	6803      	ldr	r3, [r0, #0]
 8000dc6:	07d8      	lsls	r0, r3, #31
 8000dc8:	d410      	bmi.n	8000dec <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	0799      	lsls	r1, r3, #30
 8000dce:	d45e      	bmi.n	8000e8e <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	0719      	lsls	r1, r3, #28
 8000dd4:	f100 80a3 	bmi.w	8000f1e <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	075a      	lsls	r2, r3, #29
 8000ddc:	f100 80c4 	bmi.w	8000f68 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000de0:	69a2      	ldr	r2, [r4, #24]
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	f040 812e 	bne.w	8001044 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7e8      	b.n	8000dbe <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dec:	4b93      	ldr	r3, [pc, #588]	; (800103c <HAL_RCC_OscConfig+0x288>)
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	f002 020c 	and.w	r2, r2, #12
 8000df4:	2a04      	cmp	r2, #4
 8000df6:	d007      	beq.n	8000e08 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	f002 020c 	and.w	r2, r2, #12
 8000dfe:	2a08      	cmp	r2, #8
 8000e00:	d10a      	bne.n	8000e18 <HAL_RCC_OscConfig+0x64>
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	025a      	lsls	r2, r3, #9
 8000e06:	d507      	bpl.n	8000e18 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e08:	4b8c      	ldr	r3, [pc, #560]	; (800103c <HAL_RCC_OscConfig+0x288>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	039b      	lsls	r3, r3, #14
 8000e0e:	d5dc      	bpl.n	8000dca <HAL_RCC_OscConfig+0x16>
 8000e10:	6863      	ldr	r3, [r4, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1d9      	bne.n	8000dca <HAL_RCC_OscConfig+0x16>
 8000e16:	e7d1      	b.n	8000dbc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e18:	6863      	ldr	r3, [r4, #4]
 8000e1a:	4d88      	ldr	r5, [pc, #544]	; (800103c <HAL_RCC_OscConfig+0x288>)
 8000e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e20:	d111      	bne.n	8000e46 <HAL_RCC_OscConfig+0x92>
 8000e22:	682b      	ldr	r3, [r5, #0]
 8000e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e28:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fbd3 	bl	80005d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2e:	4d83      	ldr	r5, [pc, #524]	; (800103c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000e30:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e32:	682b      	ldr	r3, [r5, #0]
 8000e34:	039f      	lsls	r7, r3, #14
 8000e36:	d4c8      	bmi.n	8000dca <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fbcc 	bl	80005d4 <HAL_GetTick>
 8000e3c:	1b80      	subs	r0, r0, r6
 8000e3e:	2864      	cmp	r0, #100	; 0x64
 8000e40:	d9f7      	bls.n	8000e32 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000e42:	2003      	movs	r0, #3
 8000e44:	e7bb      	b.n	8000dbe <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e46:	b99b      	cbnz	r3, 8000e70 <HAL_RCC_OscConfig+0xbc>
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e4e:	602b      	str	r3, [r5, #0]
 8000e50:	682b      	ldr	r3, [r5, #0]
 8000e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e58:	f7ff fbbc 	bl	80005d4 <HAL_GetTick>
 8000e5c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5e:	682b      	ldr	r3, [r5, #0]
 8000e60:	0398      	lsls	r0, r3, #14
 8000e62:	d5b2      	bpl.n	8000dca <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fbb6 	bl	80005d4 <HAL_GetTick>
 8000e68:	1b80      	subs	r0, r0, r6
 8000e6a:	2864      	cmp	r0, #100	; 0x64
 8000e6c:	d9f7      	bls.n	8000e5e <HAL_RCC_OscConfig+0xaa>
 8000e6e:	e7e8      	b.n	8000e42 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	d103      	bne.n	8000e80 <HAL_RCC_OscConfig+0xcc>
 8000e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e7c:	602b      	str	r3, [r5, #0]
 8000e7e:	e7d0      	b.n	8000e22 <HAL_RCC_OscConfig+0x6e>
 8000e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e84:	602b      	str	r3, [r5, #0]
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e8c:	e7cc      	b.n	8000e28 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e8e:	4b6b      	ldr	r3, [pc, #428]	; (800103c <HAL_RCC_OscConfig+0x288>)
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	f012 0f0c 	tst.w	r2, #12
 8000e96:	d007      	beq.n	8000ea8 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	f002 020c 	and.w	r2, r2, #12
 8000e9e:	2a08      	cmp	r2, #8
 8000ea0:	d111      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x112>
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	0259      	lsls	r1, r3, #9
 8000ea6:	d40e      	bmi.n	8000ec6 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea8:	4b64      	ldr	r3, [pc, #400]	; (800103c <HAL_RCC_OscConfig+0x288>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	0792      	lsls	r2, r2, #30
 8000eae:	d502      	bpl.n	8000eb6 <HAL_RCC_OscConfig+0x102>
 8000eb0:	68e2      	ldr	r2, [r4, #12]
 8000eb2:	2a01      	cmp	r2, #1
 8000eb4:	d182      	bne.n	8000dbc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	6921      	ldr	r1, [r4, #16]
 8000eba:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000ebe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000ec2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec4:	e784      	b.n	8000dd0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ec6:	68e3      	ldr	r3, [r4, #12]
 8000ec8:	4d5c      	ldr	r5, [pc, #368]	; (800103c <HAL_RCC_OscConfig+0x288>)
 8000eca:	b1bb      	cbz	r3, 8000efc <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000ecc:	682b      	ldr	r3, [r5, #0]
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fb7e 	bl	80005d4 <HAL_GetTick>
 8000ed8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eda:	682b      	ldr	r3, [r5, #0]
 8000edc:	079f      	lsls	r7, r3, #30
 8000ede:	d507      	bpl.n	8000ef0 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	6922      	ldr	r2, [r4, #16]
 8000ee4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ee8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000eec:	602b      	str	r3, [r5, #0]
 8000eee:	e76f      	b.n	8000dd0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ef0:	f7ff fb70 	bl	80005d4 <HAL_GetTick>
 8000ef4:	1b80      	subs	r0, r0, r6
 8000ef6:	2802      	cmp	r0, #2
 8000ef8:	d9ef      	bls.n	8000eda <HAL_RCC_OscConfig+0x126>
 8000efa:	e7a2      	b.n	8000e42 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000efc:	682b      	ldr	r3, [r5, #0]
 8000efe:	f023 0301 	bic.w	r3, r3, #1
 8000f02:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f04:	f7ff fb66 	bl	80005d4 <HAL_GetTick>
 8000f08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0a:	682b      	ldr	r3, [r5, #0]
 8000f0c:	0798      	lsls	r0, r3, #30
 8000f0e:	f57f af5f 	bpl.w	8000dd0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f12:	f7ff fb5f 	bl	80005d4 <HAL_GetTick>
 8000f16:	1b80      	subs	r0, r0, r6
 8000f18:	2802      	cmp	r0, #2
 8000f1a:	d9f6      	bls.n	8000f0a <HAL_RCC_OscConfig+0x156>
 8000f1c:	e791      	b.n	8000e42 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f1e:	6963      	ldr	r3, [r4, #20]
 8000f20:	4d46      	ldr	r5, [pc, #280]	; (800103c <HAL_RCC_OscConfig+0x288>)
 8000f22:	b183      	cbz	r3, 8000f46 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000f24:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000f2c:	f7ff fb52 	bl	80005d4 <HAL_GetTick>
 8000f30:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f32:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f34:	079b      	lsls	r3, r3, #30
 8000f36:	f53f af4f 	bmi.w	8000dd8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fb4b 	bl	80005d4 <HAL_GetTick>
 8000f3e:	1b80      	subs	r0, r0, r6
 8000f40:	2802      	cmp	r0, #2
 8000f42:	d9f6      	bls.n	8000f32 <HAL_RCC_OscConfig+0x17e>
 8000f44:	e77d      	b.n	8000e42 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000f46:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f48:	f023 0301 	bic.w	r3, r3, #1
 8000f4c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fb41 	bl	80005d4 <HAL_GetTick>
 8000f52:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f54:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f56:	079f      	lsls	r7, r3, #30
 8000f58:	f57f af3e 	bpl.w	8000dd8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fb3a 	bl	80005d4 <HAL_GetTick>
 8000f60:	1b80      	subs	r0, r0, r6
 8000f62:	2802      	cmp	r0, #2
 8000f64:	d9f6      	bls.n	8000f54 <HAL_RCC_OscConfig+0x1a0>
 8000f66:	e76c      	b.n	8000e42 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f68:	4b34      	ldr	r3, [pc, #208]	; (800103c <HAL_RCC_OscConfig+0x288>)
 8000f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f6c:	00d0      	lsls	r0, r2, #3
 8000f6e:	d427      	bmi.n	8000fc0 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000f72:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f78:	641a      	str	r2, [r3, #64]	; 0x40
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f84:	4d2e      	ldr	r5, [pc, #184]	; (8001040 <HAL_RCC_OscConfig+0x28c>)
 8000f86:	682b      	ldr	r3, [r5, #0]
 8000f88:	05d9      	lsls	r1, r3, #23
 8000f8a:	d51b      	bpl.n	8000fc4 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8c:	68a3      	ldr	r3, [r4, #8]
 8000f8e:	4d2b      	ldr	r5, [pc, #172]	; (800103c <HAL_RCC_OscConfig+0x288>)
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d127      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x230>
 8000f94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f9c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fb18 	bl	80005d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa4:	4f25      	ldr	r7, [pc, #148]	; (800103c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000fa6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000faa:	079b      	lsls	r3, r3, #30
 8000fac:	d53f      	bpl.n	800102e <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	f43f af16 	beq.w	8000de0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb4:	4a21      	ldr	r2, [pc, #132]	; (800103c <HAL_RCC_OscConfig+0x288>)
 8000fb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	e70f      	b.n	8000de0 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	e7df      	b.n	8000f84 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000fcc:	f7ff fb02 	bl	80005d4 <HAL_GetTick>
 8000fd0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fd2:	682b      	ldr	r3, [r5, #0]
 8000fd4:	05da      	lsls	r2, r3, #23
 8000fd6:	d4d9      	bmi.n	8000f8c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000fd8:	f7ff fafc 	bl	80005d4 <HAL_GetTick>
 8000fdc:	1bc0      	subs	r0, r0, r7
 8000fde:	2864      	cmp	r0, #100	; 0x64
 8000fe0:	d9f7      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x21e>
 8000fe2:	e72e      	b.n	8000e42 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe4:	b9ab      	cbnz	r3, 8001012 <HAL_RCC_OscConfig+0x25e>
 8000fe6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fec:	f023 0301 	bic.w	r3, r3, #1
 8000ff0:	672b      	str	r3, [r5, #112]	; 0x70
 8000ff2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ff4:	f023 0304 	bic.w	r3, r3, #4
 8000ff8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ffa:	f7ff faeb 	bl	80005d4 <HAL_GetTick>
 8000ffe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001000:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001002:	0798      	lsls	r0, r3, #30
 8001004:	d5d3      	bpl.n	8000fae <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001006:	f7ff fae5 	bl	80005d4 <HAL_GetTick>
 800100a:	1bc0      	subs	r0, r0, r7
 800100c:	4540      	cmp	r0, r8
 800100e:	d9f7      	bls.n	8001000 <HAL_RCC_OscConfig+0x24c>
 8001010:	e717      	b.n	8000e42 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001012:	2b05      	cmp	r3, #5
 8001014:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001016:	d103      	bne.n	8001020 <HAL_RCC_OscConfig+0x26c>
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	672b      	str	r3, [r5, #112]	; 0x70
 800101e:	e7b9      	b.n	8000f94 <HAL_RCC_OscConfig+0x1e0>
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	672b      	str	r3, [r5, #112]	; 0x70
 8001026:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001028:	f023 0304 	bic.w	r3, r3, #4
 800102c:	e7b5      	b.n	8000f9a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800102e:	f7ff fad1 	bl	80005d4 <HAL_GetTick>
 8001032:	eba0 0008 	sub.w	r0, r0, r8
 8001036:	42a8      	cmp	r0, r5
 8001038:	d9b6      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x1f4>
 800103a:	e702      	b.n	8000e42 <HAL_RCC_OscConfig+0x8e>
 800103c:	40023800 	.word	0x40023800
 8001040:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001044:	4d24      	ldr	r5, [pc, #144]	; (80010d8 <HAL_RCC_OscConfig+0x324>)
 8001046:	68ab      	ldr	r3, [r5, #8]
 8001048:	f003 030c 	and.w	r3, r3, #12
 800104c:	2b08      	cmp	r3, #8
 800104e:	f43f aeb5 	beq.w	8000dbc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001052:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001054:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800105a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800105c:	d12f      	bne.n	80010be <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 800105e:	f7ff fab9 	bl	80005d4 <HAL_GetTick>
 8001062:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	0199      	lsls	r1, r3, #6
 8001068:	d423      	bmi.n	80010b2 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800106a:	6a22      	ldr	r2, [r4, #32]
 800106c:	69e3      	ldr	r3, [r4, #28]
 800106e:	4313      	orrs	r3, r2
 8001070:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001072:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001076:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001078:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800107c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800107e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001082:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001084:	4c14      	ldr	r4, [pc, #80]	; (80010d8 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001086:	0852      	lsrs	r2, r2, #1
 8001088:	3a01      	subs	r2, #1
 800108a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800108e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001090:	682b      	ldr	r3, [r5, #0]
 8001092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001096:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001098:	f7ff fa9c 	bl	80005d4 <HAL_GetTick>
 800109c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	019a      	lsls	r2, r3, #6
 80010a2:	f53f aea1 	bmi.w	8000de8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a6:	f7ff fa95 	bl	80005d4 <HAL_GetTick>
 80010aa:	1b40      	subs	r0, r0, r5
 80010ac:	2802      	cmp	r0, #2
 80010ae:	d9f6      	bls.n	800109e <HAL_RCC_OscConfig+0x2ea>
 80010b0:	e6c7      	b.n	8000e42 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b2:	f7ff fa8f 	bl	80005d4 <HAL_GetTick>
 80010b6:	1b80      	subs	r0, r0, r6
 80010b8:	2802      	cmp	r0, #2
 80010ba:	d9d3      	bls.n	8001064 <HAL_RCC_OscConfig+0x2b0>
 80010bc:	e6c1      	b.n	8000e42 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80010be:	f7ff fa89 	bl	80005d4 <HAL_GetTick>
 80010c2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	019b      	lsls	r3, r3, #6
 80010c8:	f57f ae8e 	bpl.w	8000de8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010cc:	f7ff fa82 	bl	80005d4 <HAL_GetTick>
 80010d0:	1b00      	subs	r0, r0, r4
 80010d2:	2802      	cmp	r0, #2
 80010d4:	d9f6      	bls.n	80010c4 <HAL_RCC_OscConfig+0x310>
 80010d6:	e6b4      	b.n	8000e42 <HAL_RCC_OscConfig+0x8e>
 80010d8:	40023800 	.word	0x40023800

080010dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010dc:	4913      	ldr	r1, [pc, #76]	; (800112c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80010de:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010e0:	688b      	ldr	r3, [r1, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d003      	beq.n	80010f2 <HAL_RCC_GetSysClockFreq+0x16>
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d003      	beq.n	80010f6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010ee:	4810      	ldr	r0, [pc, #64]	; (8001130 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010f0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80010f2:	4810      	ldr	r0, [pc, #64]	; (8001134 <HAL_RCC_GetSysClockFreq+0x58>)
 80010f4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010f6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80010f8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010fa:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010fc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001100:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001104:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001108:	bf1a      	itte	ne
 800110a:	480a      	ldrne	r0, [pc, #40]	; (8001134 <HAL_RCC_GetSysClockFreq+0x58>)
 800110c:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800110e:	4808      	ldreq	r0, [pc, #32]	; (8001130 <HAL_RCC_GetSysClockFreq+0x54>)
 8001110:	fba1 0100 	umull	r0, r1, r1, r0
 8001114:	f7ff f890 	bl	8000238 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <HAL_RCC_GetSysClockFreq+0x50>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001120:	3301      	adds	r3, #1
 8001122:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001124:	fbb0 f0f3 	udiv	r0, r0, r3
 8001128:	bd08      	pop	{r3, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	00f42400 	.word	0x00f42400
 8001134:	017d7840 	.word	0x017d7840

08001138 <HAL_RCC_ClockConfig>:
{
 8001138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800113c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800113e:	4604      	mov	r4, r0
 8001140:	b910      	cbnz	r0, 8001148 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
 8001144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001148:	4a46      	ldr	r2, [pc, #280]	; (8001264 <HAL_RCC_ClockConfig+0x12c>)
 800114a:	6813      	ldr	r3, [r2, #0]
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	428b      	cmp	r3, r1
 8001152:	d328      	bcc.n	80011a6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001154:	6821      	ldr	r1, [r4, #0]
 8001156:	078f      	lsls	r7, r1, #30
 8001158:	d430      	bmi.n	80011bc <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800115a:	07c8      	lsls	r0, r1, #31
 800115c:	d443      	bmi.n	80011e6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800115e:	4a41      	ldr	r2, [pc, #260]	; (8001264 <HAL_RCC_ClockConfig+0x12c>)
 8001160:	6813      	ldr	r3, [r2, #0]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	429d      	cmp	r5, r3
 8001168:	d367      	bcc.n	800123a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800116a:	6822      	ldr	r2, [r4, #0]
 800116c:	0751      	lsls	r1, r2, #29
 800116e:	d470      	bmi.n	8001252 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001170:	0713      	lsls	r3, r2, #28
 8001172:	d507      	bpl.n	8001184 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001174:	4a3c      	ldr	r2, [pc, #240]	; (8001268 <HAL_RCC_ClockConfig+0x130>)
 8001176:	6921      	ldr	r1, [r4, #16]
 8001178:	6893      	ldr	r3, [r2, #8]
 800117a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800117e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001182:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001184:	f7ff ffaa 	bl	80010dc <HAL_RCC_GetSysClockFreq>
 8001188:	4b37      	ldr	r3, [pc, #220]	; (8001268 <HAL_RCC_ClockConfig+0x130>)
 800118a:	4a38      	ldr	r2, [pc, #224]	; (800126c <HAL_RCC_ClockConfig+0x134>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	40d8      	lsrs	r0, r3
 8001196:	4b36      	ldr	r3, [pc, #216]	; (8001270 <HAL_RCC_ClockConfig+0x138>)
 8001198:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff f9d4 	bl	8000548 <HAL_InitTick>
  return HAL_OK;
 80011a0:	2000      	movs	r0, #0
 80011a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a6:	6813      	ldr	r3, [r2, #0]
 80011a8:	f023 030f 	bic.w	r3, r3, #15
 80011ac:	430b      	orrs	r3, r1
 80011ae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b0:	6813      	ldr	r3, [r2, #0]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	4299      	cmp	r1, r3
 80011b8:	d1c3      	bne.n	8001142 <HAL_RCC_ClockConfig+0xa>
 80011ba:	e7cb      	b.n	8001154 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011bc:	f011 0f04 	tst.w	r1, #4
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <HAL_RCC_ClockConfig+0x130>)
 80011c2:	d003      	beq.n	80011cc <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80011ca:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011cc:	070e      	lsls	r6, r1, #28
 80011ce:	d503      	bpl.n	80011d8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80011d6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	68a0      	ldr	r0, [r4, #8]
 80011dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80011e0:	4302      	orrs	r2, r0
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	e7b9      	b.n	800115a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e6:	6861      	ldr	r1, [r4, #4]
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <HAL_RCC_ClockConfig+0x130>)
 80011ea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ec:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ee:	d11c      	bne.n	800122a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	d0a5      	beq.n	8001142 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f6:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f8:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fc:	4e1a      	ldr	r6, [pc, #104]	; (8001268 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011fe:	f022 0203 	bic.w	r2, r2, #3
 8001202:	430a      	orrs	r2, r1
 8001204:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001206:	f7ff f9e5 	bl	80005d4 <HAL_GetTick>
 800120a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120c:	68b3      	ldr	r3, [r6, #8]
 800120e:	6862      	ldr	r2, [r4, #4]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001218:	d0a1      	beq.n	800115e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800121a:	f7ff f9db 	bl	80005d4 <HAL_GetTick>
 800121e:	1bc0      	subs	r0, r0, r7
 8001220:	4540      	cmp	r0, r8
 8001222:	d9f3      	bls.n	800120c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001224:	2003      	movs	r0, #3
}
 8001226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800122a:	2902      	cmp	r1, #2
 800122c:	d102      	bne.n	8001234 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001232:	e7df      	b.n	80011f4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	f012 0f02 	tst.w	r2, #2
 8001238:	e7dc      	b.n	80011f4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	6813      	ldr	r3, [r2, #0]
 800123c:	f023 030f 	bic.w	r3, r3, #15
 8001240:	432b      	orrs	r3, r5
 8001242:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001244:	6813      	ldr	r3, [r2, #0]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	429d      	cmp	r5, r3
 800124c:	f47f af79 	bne.w	8001142 <HAL_RCC_ClockConfig+0xa>
 8001250:	e78b      	b.n	800116a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001252:	4905      	ldr	r1, [pc, #20]	; (8001268 <HAL_RCC_ClockConfig+0x130>)
 8001254:	68e0      	ldr	r0, [r4, #12]
 8001256:	688b      	ldr	r3, [r1, #8]
 8001258:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800125c:	4303      	orrs	r3, r0
 800125e:	608b      	str	r3, [r1, #8]
 8001260:	e786      	b.n	8001170 <HAL_RCC_ClockConfig+0x38>
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00
 8001268:	40023800 	.word	0x40023800
 800126c:	08003dd0 	.word	0x08003dd0
 8001270:	2000000c 	.word	0x2000000c

08001274 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800127e:	5cd3      	ldrb	r3, [r2, r3]
 8001280:	4a03      	ldr	r2, [pc, #12]	; (8001290 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001282:	6810      	ldr	r0, [r2, #0]
}
 8001284:	40d8      	lsrs	r0, r3
 8001286:	4770      	bx	lr
 8001288:	40023800 	.word	0x40023800
 800128c:	08003de0 	.word	0x08003de0
 8001290:	2000000c 	.word	0x2000000c

08001294 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <HAL_RCC_GetPCLK2Freq+0x18>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80012a2:	6810      	ldr	r0, [r2, #0]
}
 80012a4:	40d8      	lsrs	r0, r3
 80012a6:	4770      	bx	lr
 80012a8:	40023800 	.word	0x40023800
 80012ac:	08003de0 	.word	0x08003de0
 80012b0:	2000000c 	.word	0x2000000c

080012b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80012b8:	6802      	ldr	r2, [r0, #0]
{
 80012ba:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80012bc:	f012 0601 	ands.w	r6, r2, #1
 80012c0:	d00b      	beq.n	80012da <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80012c2:	4bba      	ldr	r3, [pc, #744]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80012c4:	6899      	ldr	r1, [r3, #8]
 80012c6:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80012ca:	6099      	str	r1, [r3, #8]
 80012cc:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80012ce:	6899      	ldr	r1, [r3, #8]
 80012d0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80012d2:	fab6 f686 	clz	r6, r6
 80012d6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80012d8:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80012da:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80012de:	d012      	beq.n	8001306 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80012e0:	49b2      	ldr	r1, [pc, #712]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80012e2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80012e4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80012e8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80012ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80012f0:	bf08      	it	eq
 80012f2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80012f4:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80012f8:	bf16      	itet	ne
 80012fa:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80012fe:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001300:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001302:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001306:	02d7      	lsls	r7, r2, #11
 8001308:	d510      	bpl.n	800132c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800130a:	48a8      	ldr	r0, [pc, #672]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800130c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800130e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001312:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001316:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800131a:	ea43 0301 	orr.w	r3, r3, r1
 800131e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001322:	f000 81a9 	beq.w	8001678 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001326:	2900      	cmp	r1, #0
 8001328:	bf08      	it	eq
 800132a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800132c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001330:	bf18      	it	ne
 8001332:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001334:	0690      	lsls	r0, r2, #26
 8001336:	d531      	bpl.n	800139c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001338:	4b9c      	ldr	r3, [pc, #624]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800133a:	4f9d      	ldr	r7, [pc, #628]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800133c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800133e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001342:	641a      	str	r2, [r3, #64]	; 0x40
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001354:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001356:	f7ff f93d 	bl	80005d4 <HAL_GetTick>
 800135a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	05d9      	lsls	r1, r3, #23
 8001360:	f140 818c 	bpl.w	800167c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001364:	4f91      	ldr	r7, [pc, #580]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001366:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001368:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800136c:	f040 8191 	bne.w	8001692 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001370:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001372:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001376:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800137a:	4a8c      	ldr	r2, [pc, #560]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800137c:	f040 81af 	bne.w	80016de <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001380:	6891      	ldr	r1, [r2, #8]
 8001382:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001386:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800138a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800138e:	4301      	orrs	r1, r0
 8001390:	6091      	str	r1, [r2, #8]
 8001392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001396:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001398:	430b      	orrs	r3, r1
 800139a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800139c:	6823      	ldr	r3, [r4, #0]
 800139e:	06df      	lsls	r7, r3, #27
 80013a0:	d50c      	bpl.n	80013bc <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80013a2:	4a82      	ldr	r2, [pc, #520]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013a4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80013a8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80013ac:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80013b0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80013b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013b6:	4301      	orrs	r1, r0
 80013b8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013bc:	0458      	lsls	r0, r3, #17
 80013be:	d508      	bpl.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013c0:	497a      	ldr	r1, [pc, #488]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013c2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80013c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013c8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80013cc:	4302      	orrs	r2, r0
 80013ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80013d2:	0419      	lsls	r1, r3, #16
 80013d4:	d508      	bpl.n	80013e8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80013d6:	4975      	ldr	r1, [pc, #468]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013d8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80013da:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013de:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80013e2:	4302      	orrs	r2, r0
 80013e4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80013e8:	03da      	lsls	r2, r3, #15
 80013ea:	d508      	bpl.n	80013fe <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80013ec:	496f      	ldr	r1, [pc, #444]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013ee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80013f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013f4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80013f8:	4302      	orrs	r2, r0
 80013fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80013fe:	039f      	lsls	r7, r3, #14
 8001400:	d508      	bpl.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001402:	496a      	ldr	r1, [pc, #424]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001404:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001406:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800140a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800140e:	4302      	orrs	r2, r0
 8001410:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001414:	0658      	lsls	r0, r3, #25
 8001416:	d508      	bpl.n	800142a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001418:	4964      	ldr	r1, [pc, #400]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800141a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800141c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001420:	f022 0203 	bic.w	r2, r2, #3
 8001424:	4302      	orrs	r2, r0
 8001426:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800142a:	0619      	lsls	r1, r3, #24
 800142c:	d508      	bpl.n	8001440 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800142e:	495f      	ldr	r1, [pc, #380]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001430:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001432:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001436:	f022 020c 	bic.w	r2, r2, #12
 800143a:	4302      	orrs	r2, r0
 800143c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001440:	05da      	lsls	r2, r3, #23
 8001442:	d508      	bpl.n	8001456 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001444:	4959      	ldr	r1, [pc, #356]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001446:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001448:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800144c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001450:	4302      	orrs	r2, r0
 8001452:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001456:	059f      	lsls	r7, r3, #22
 8001458:	d508      	bpl.n	800146c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800145a:	4954      	ldr	r1, [pc, #336]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800145c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800145e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001462:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001466:	4302      	orrs	r2, r0
 8001468:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800146c:	0558      	lsls	r0, r3, #21
 800146e:	d508      	bpl.n	8001482 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001470:	494e      	ldr	r1, [pc, #312]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001472:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001474:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001478:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800147c:	4302      	orrs	r2, r0
 800147e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001482:	0519      	lsls	r1, r3, #20
 8001484:	d508      	bpl.n	8001498 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001486:	4949      	ldr	r1, [pc, #292]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800148a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800148e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001492:	4302      	orrs	r2, r0
 8001494:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001498:	04da      	lsls	r2, r3, #19
 800149a:	d508      	bpl.n	80014ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800149c:	4943      	ldr	r1, [pc, #268]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800149e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80014a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014a4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80014a8:	4302      	orrs	r2, r0
 80014aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80014ae:	049f      	lsls	r7, r3, #18
 80014b0:	d508      	bpl.n	80014c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80014b2:	493e      	ldr	r1, [pc, #248]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014b4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80014b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014ba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80014be:	4302      	orrs	r2, r0
 80014c0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80014c4:	0258      	lsls	r0, r3, #9
 80014c6:	d508      	bpl.n	80014da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80014c8:	4938      	ldr	r1, [pc, #224]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014ca:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80014cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014d0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80014d4:	4302      	orrs	r2, r0
 80014d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80014da:	0299      	lsls	r1, r3, #10
 80014dc:	d50c      	bpl.n	80014f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80014de:	4833      	ldr	r0, [pc, #204]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014e0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80014e2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80014e6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80014ea:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80014ee:	bf08      	it	eq
 80014f0:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80014f2:	430a      	orrs	r2, r1
 80014f4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80014f8:	f013 0f08 	tst.w	r3, #8
 80014fc:	bf18      	it	ne
 80014fe:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001500:	035a      	lsls	r2, r3, #13
 8001502:	d508      	bpl.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001504:	4929      	ldr	r1, [pc, #164]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001506:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001508:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800150c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001510:	4302      	orrs	r2, r0
 8001512:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001516:	021f      	lsls	r7, r3, #8
 8001518:	d509      	bpl.n	800152e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800151a:	4924      	ldr	r1, [pc, #144]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800151c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001520:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001524:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001528:	4302      	orrs	r2, r0
 800152a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800152e:	0158      	lsls	r0, r3, #5
 8001530:	d509      	bpl.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001532:	491e      	ldr	r1, [pc, #120]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001534:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001538:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800153c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001540:	4302      	orrs	r2, r0
 8001542:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001546:	0119      	lsls	r1, r3, #4
 8001548:	d509      	bpl.n	800155e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800154a:	4918      	ldr	r1, [pc, #96]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800154c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001550:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001554:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001558:	4302      	orrs	r2, r0
 800155a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800155e:	00da      	lsls	r2, r3, #3
 8001560:	d509      	bpl.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001562:	4912      	ldr	r1, [pc, #72]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001564:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001568:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800156c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001570:	4302      	orrs	r2, r0
 8001572:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001576:	2e01      	cmp	r6, #1
 8001578:	f000 80b5 	beq.w	80016e6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800157c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001580:	f000 80b1 	beq.w	80016e6 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001584:	2d01      	cmp	r5, #1
 8001586:	d175      	bne.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001588:	4d08      	ldr	r5, [pc, #32]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800158a:	682b      	ldr	r3, [r5, #0]
 800158c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001590:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001592:	f7ff f81f 	bl	80005d4 <HAL_GetTick>
 8001596:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	009f      	lsls	r7, r3, #2
 800159c:	f100 8127 	bmi.w	80017ee <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80015a0:	6821      	ldr	r1, [r4, #0]
 80015a2:	030e      	lsls	r6, r1, #12
 80015a4:	d506      	bpl.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80015a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015a8:	b143      	cbz	r3, 80015bc <HAL_RCCEx_PeriphCLKConfig+0x308>
 80015aa:	e003      	b.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40007000 	.word	0x40007000
 80015b4:	02cd      	lsls	r5, r1, #11
 80015b6:	d51d      	bpl.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80015b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015ba:	b9db      	cbnz	r3, 80015f4 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80015bc:	4a93      	ldr	r2, [pc, #588]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80015be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80015c2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80015c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ca:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80015ce:	4303      	orrs	r3, r0
 80015d0:	6960      	ldr	r0, [r4, #20]
 80015d2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80015d6:	69a0      	ldr	r0, [r4, #24]
 80015d8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80015e0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80015e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80015e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80015ea:	3801      	subs	r0, #1
 80015ec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80015f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80015f4:	0288      	lsls	r0, r1, #10
 80015f6:	d515      	bpl.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x370>
 80015f8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80015fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015fe:	d111      	bne.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001600:	4a82      	ldr	r2, [pc, #520]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001602:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001606:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800160a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800160e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001612:	4303      	orrs	r3, r0
 8001614:	6960      	ldr	r0, [r4, #20]
 8001616:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800161a:	6a20      	ldr	r0, [r4, #32]
 800161c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001624:	070a      	lsls	r2, r1, #28
 8001626:	d519      	bpl.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001628:	4978      	ldr	r1, [pc, #480]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800162a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800162e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001632:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001636:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800163a:	4313      	orrs	r3, r2
 800163c:	6962      	ldr	r2, [r4, #20]
 800163e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001642:	69e2      	ldr	r2, [r4, #28]
 8001644:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800164c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001650:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001652:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001656:	4313      	orrs	r3, r2
 8001658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800165c:	4c6b      	ldr	r4, [pc, #428]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001666:	f7fe ffb5 	bl	80005d4 <HAL_GetTick>
 800166a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	f140 80c4 	bpl.w	80017fc <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001674:	2000      	movs	r0, #0
 8001676:	e009      	b.n	800168c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001678:	2601      	movs	r6, #1
 800167a:	e657      	b.n	800132c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167c:	f7fe ffaa 	bl	80005d4 <HAL_GetTick>
 8001680:	eba0 0008 	sub.w	r0, r0, r8
 8001684:	2864      	cmp	r0, #100	; 0x64
 8001686:	f67f ae69 	bls.w	800135c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800168a:	2003      	movs	r0, #3
}
 800168c:	b003      	add	sp, #12
 800168e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001692:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001694:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001698:	4293      	cmp	r3, r2
 800169a:	f43f ae69 	beq.w	8001370 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800169e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80016a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80016a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016aa:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80016ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016b2:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80016b4:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80016b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016b8:	07da      	lsls	r2, r3, #31
 80016ba:	f57f ae59 	bpl.w	8001370 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80016be:	f7fe ff89 	bl	80005d4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80016c6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016ca:	079b      	lsls	r3, r3, #30
 80016cc:	f53f ae50 	bmi.w	8001370 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7fe ff80 	bl	80005d4 <HAL_GetTick>
 80016d4:	eba0 0008 	sub.w	r0, r0, r8
 80016d8:	4548      	cmp	r0, r9
 80016da:	d9f5      	bls.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80016dc:	e7d5      	b.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016de:	6891      	ldr	r1, [r2, #8]
 80016e0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80016e4:	e654      	b.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80016e6:	4e49      	ldr	r6, [pc, #292]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016e8:	6833      	ldr	r3, [r6, #0]
 80016ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80016ee:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80016f0:	f7fe ff70 	bl	80005d4 <HAL_GetTick>
 80016f4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80016f6:	6833      	ldr	r3, [r6, #0]
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	d472      	bmi.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80016fc:	6822      	ldr	r2, [r4, #0]
 80016fe:	07d7      	lsls	r7, r2, #31
 8001700:	d512      	bpl.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001704:	b983      	cbnz	r3, 8001728 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001706:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800170a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800170e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001712:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001716:	430b      	orrs	r3, r1
 8001718:	6861      	ldr	r1, [r4, #4]
 800171a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800171e:	68a1      	ldr	r1, [r4, #8]
 8001720:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001724:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001728:	0316      	lsls	r6, r2, #12
 800172a:	d503      	bpl.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800172c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800172e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001732:	d005      	beq.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001734:	02d0      	lsls	r0, r2, #11
 8001736:	d51e      	bpl.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800173a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800173e:	d11a      	bne.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001740:	4932      	ldr	r1, [pc, #200]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001742:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001746:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800174a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800174e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001752:	4303      	orrs	r3, r0
 8001754:	6860      	ldr	r0, [r4, #4]
 8001756:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800175a:	68e0      	ldr	r0, [r4, #12]
 800175c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001760:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001764:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800176a:	f020 001f 	bic.w	r0, r0, #31
 800176e:	3b01      	subs	r3, #1
 8001770:	4303      	orrs	r3, r0
 8001772:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001776:	01d1      	lsls	r1, r2, #7
 8001778:	d511      	bpl.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800177a:	4924      	ldr	r1, [pc, #144]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800177c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001780:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001784:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001788:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800178c:	4303      	orrs	r3, r0
 800178e:	6860      	ldr	r0, [r4, #4]
 8001790:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001794:	6920      	ldr	r0, [r4, #16]
 8001796:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800179a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800179e:	0192      	lsls	r2, r2, #6
 80017a0:	d50d      	bpl.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80017a2:	6923      	ldr	r3, [r4, #16]
 80017a4:	6862      	ldr	r2, [r4, #4]
 80017a6:	041b      	lsls	r3, r3, #16
 80017a8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80017ac:	68e2      	ldr	r2, [r4, #12]
 80017ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017b2:	68a2      	ldr	r2, [r4, #8]
 80017b4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80017ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80017be:	4e13      	ldr	r6, [pc, #76]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80017c0:	6833      	ldr	r3, [r6, #0]
 80017c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017c6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80017c8:	f7fe ff04 	bl	80005d4 <HAL_GetTick>
 80017cc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80017ce:	6833      	ldr	r3, [r6, #0]
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	f53f aed7 	bmi.w	8001584 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80017d6:	f7fe fefd 	bl	80005d4 <HAL_GetTick>
 80017da:	1bc0      	subs	r0, r0, r7
 80017dc:	2864      	cmp	r0, #100	; 0x64
 80017de:	d9f6      	bls.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80017e0:	e753      	b.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80017e2:	f7fe fef7 	bl	80005d4 <HAL_GetTick>
 80017e6:	1bc0      	subs	r0, r0, r7
 80017e8:	2864      	cmp	r0, #100	; 0x64
 80017ea:	d984      	bls.n	80016f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80017ec:	e74d      	b.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80017ee:	f7fe fef1 	bl	80005d4 <HAL_GetTick>
 80017f2:	1b80      	subs	r0, r0, r6
 80017f4:	2864      	cmp	r0, #100	; 0x64
 80017f6:	f67f aecf 	bls.w	8001598 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80017fa:	e746      	b.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80017fc:	f7fe feea 	bl	80005d4 <HAL_GetTick>
 8001800:	1b40      	subs	r0, r0, r5
 8001802:	2864      	cmp	r0, #100	; 0x64
 8001804:	f67f af32 	bls.w	800166c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001808:	e73f      	b.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8001810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001814:	4605      	mov	r5, r0
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 800181a:	f7fe fedb 	bl	80005d4 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 800181e:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8001820:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8001822:	2108      	movs	r1, #8
 8001824:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2] = {0, 0};
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 800182a:	f001 faea 	bl	8002e02 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 800182e:	4604      	mov	r4, r0
 8001830:	bb40      	cbnz	r0, 8001884 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8001832:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001834:	6828      	ldr	r0, [r5, #0]
 8001836:	0409      	lsls	r1, r1, #16
 8001838:	f001 fbee 	bl	8003018 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 800183c:	4604      	mov	r4, r0
 800183e:	bb08      	cbnz	r0, 8001884 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8001844:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  SDMMC_ConfigData(hsd->Instance, &config);
 8001846:	a902      	add	r1, sp, #8
 8001848:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800184a:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 800184c:	2308      	movs	r3, #8
 800184e:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8001850:	2330      	movs	r3, #48	; 0x30
 8001852:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8001854:	2302      	movs	r3, #2
 8001856:	9305      	str	r3, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8001858:	2301      	movs	r3, #1
 800185a:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 800185c:	f001 fabe 	bl	8002ddc <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8001860:	6828      	ldr	r0, [r5, #0]
 8001862:	f001 fc0a 	bl	800307a <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8001866:	4604      	mov	r4, r0
 8001868:	b960      	cbnz	r0, 8001884 <SD_FindSCR+0x74>
 800186a:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800186c:	f240 482a 	movw	r8, #1066	; 0x42a
 8001870:	6828      	ldr	r0, [r5, #0]
 8001872:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001874:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8001878:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800187a:	d007      	beq.n	800188c <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800187c:	0719      	lsls	r1, r3, #28
 800187e:	d518      	bpl.n	80018b2 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8001880:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8001882:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8001884:	4620      	mov	r0, r4
 8001886:	b009      	add	sp, #36	; 0x24
 8001888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800188c:	029b      	lsls	r3, r3, #10
 800188e:	d507      	bpl.n	80018a0 <SD_FindSCR+0x90>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8001890:	f001 f9e8 	bl	8002c64 <SDMMC_ReadFIFO>
 8001894:	ab08      	add	r3, sp, #32
 8001896:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 800189a:	3701      	adds	r7, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800189c:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80018a0:	f7fe fe98 	bl	80005d4 <HAL_GetTick>
 80018a4:	eba0 0009 	sub.w	r0, r0, r9
 80018a8:	3001      	adds	r0, #1
 80018aa:	d1e1      	bne.n	8001870 <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 80018ac:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80018b0:	e7e8      	b.n	8001884 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80018b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018b4:	079a      	lsls	r2, r3, #30
 80018b6:	d501      	bpl.n	80018bc <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80018b8:	2402      	movs	r4, #2
 80018ba:	e7e2      	b.n	8001882 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80018bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018be:	069b      	lsls	r3, r3, #26
 80018c0:	d501      	bpl.n	80018c6 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80018c2:	2420      	movs	r4, #32
 80018c4:	e7dd      	b.n	8001882 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80018c6:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80018ca:	6383      	str	r3, [r0, #56]	; 0x38
 80018cc:	9b00      	ldr	r3, [sp, #0]
 80018ce:	ba1b      	rev	r3, r3
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80018d0:	6073      	str	r3, [r6, #4]
 80018d2:	9b01      	ldr	r3, [sp, #4]
 80018d4:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80018d6:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80018d8:	e7d4      	b.n	8001884 <SD_FindSCR+0x74>

080018da <HAL_SD_ReadBlocks>:
{
 80018da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018de:	460d      	mov	r5, r1
 80018e0:	b087      	sub	sp, #28
 80018e2:	4604      	mov	r4, r0
 80018e4:	4691      	mov	r9, r2
 80018e6:	4698      	mov	r8, r3
 80018e8:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80018ea:	f7fe fe73 	bl	80005d4 <HAL_GetTick>
 80018ee:	4607      	mov	r7, r0
  if(NULL == pData)
 80018f0:	b92d      	cbnz	r5, 80018fe <HAL_SD_ReadBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80018f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80018f8:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80018fa:	2001      	movs	r0, #1
 80018fc:	e010      	b.n	8001920 <HAL_SD_ReadBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 80018fe:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001902:	b2c0      	uxtb	r0, r0
 8001904:	2801      	cmp	r0, #1
 8001906:	f040 80c1 	bne.w	8001a8c <HAL_SD_ReadBlocks+0x1b2>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800190a:	eb09 0308 	add.w	r3, r9, r8
 800190e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001910:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001912:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001914:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001916:	d906      	bls.n	8001926 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001918:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800191a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800191e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001920:	b007      	add	sp, #28
 8001922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001926:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0;
 8001928:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800192a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800192e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0;
 8001930:	62c1      	str	r1, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001932:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001936:	2b01      	cmp	r3, #1
      BlockAdd *= 512;
 8001938:	bf18      	it	ne
 800193a:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800193e:	f001 fa60 	bl	8002e02 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001942:	b150      	cbz	r0, 800195a <HAL_SD_ReadBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800194c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800194e:	4318      	orrs	r0, r3
 8001950:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001952:	2001      	movs	r0, #1
 8001954:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        return HAL_ERROR;
 8001958:	e7e2      	b.n	8001920 <HAL_SD_ReadBlocks+0x46>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800195e:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8001962:	f04f 0b02 	mov.w	fp, #2
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8001966:	9004      	str	r0, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001968:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800196a:	ea4f 2348 	mov.w	r3, r8, lsl #9
    SDMMC_ConfigData(hsd->Instance, &config);
 800196e:	4669      	mov	r1, sp
 8001970:	6820      	ldr	r0, [r4, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001972:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8001974:	2390      	movs	r3, #144	; 0x90
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8001976:	f8cd b00c 	str.w	fp, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800197a:	9302      	str	r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800197c:	f8cd a014 	str.w	sl, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8001980:	f001 fa2c 	bl	8002ddc <SDMMC_ConfigData>
    if(NumberOfBlocks > 1)
 8001984:	45d0      	cmp	r8, sl
 8001986:	d925      	bls.n	80019d4 <HAL_SD_ReadBlocks+0xfa>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001988:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800198c:	4649      	mov	r1, r9
 800198e:	6820      	ldr	r0, [r4, #0]
 8001990:	f001 fa67 	bl	8002e62 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001994:	2800      	cmp	r0, #0
 8001996:	d1d5      	bne.n	8001944 <HAL_SD_ReadBlocks+0x6a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8001998:	6820      	ldr	r0, [r4, #0]
 800199a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800199c:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80019a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80019a2:	d01e      	beq.n	80019e2 <HAL_SD_ReadBlocks+0x108>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80019a4:	05db      	lsls	r3, r3, #23
 80019a6:	d509      	bpl.n	80019bc <HAL_SD_ReadBlocks+0xe2>
 80019a8:	f1b8 0f01 	cmp.w	r8, #1
 80019ac:	d906      	bls.n	80019bc <HAL_SD_ReadBlocks+0xe2>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80019ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d003      	beq.n	80019bc <HAL_SD_ReadBlocks+0xe2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80019b4:	f001 fa9e 	bl	8002ef4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d1c3      	bne.n	8001944 <HAL_SD_ReadBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c0:	0710      	lsls	r0, r2, #28
 80019c2:	d530      	bpl.n	8001a26 <HAL_SD_ReadBlocks+0x14c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80019c4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80019c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80019ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019cc:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80019d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80019d2:	e7be      	b.n	8001952 <HAL_SD_ReadBlocks+0x78>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80019d4:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80019d8:	4649      	mov	r1, r9
 80019da:	6820      	ldr	r0, [r4, #0]
 80019dc:	f001 fa29 	bl	8002e32 <SDMMC_CmdReadSingleBlock>
 80019e0:	e7d8      	b.n	8001994 <HAL_SD_ReadBlocks+0xba>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80019e2:	041a      	lsls	r2, r3, #16
 80019e4:	d50b      	bpl.n	80019fe <HAL_SD_ReadBlocks+0x124>
 80019e6:	f1a5 0904 	sub.w	r9, r5, #4
 80019ea:	f105 0a1c 	add.w	sl, r5, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 80019ee:	6820      	ldr	r0, [r4, #0]
 80019f0:	f001 f938 	bl	8002c64 <SDMMC_ReadFIFO>
 80019f4:	f849 0f04 	str.w	r0, [r9, #4]!
        for(count = 0U; count < 8U; count++)
 80019f8:	45d1      	cmp	r9, sl
 80019fa:	d1f8      	bne.n	80019ee <HAL_SD_ReadBlocks+0x114>
        tempbuff += 8U;
 80019fc:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80019fe:	b966      	cbnz	r6, 8001a1a <HAL_SD_ReadBlocks+0x140>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	f240 52ff 	movw	r2, #1535	; 0x5ff
        return HAL_TIMEOUT;
 8001a06:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001a08:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001a0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a10:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001a18:	e782      	b.n	8001920 <HAL_SD_ReadBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001a1a:	f7fe fddb 	bl	80005d4 <HAL_GetTick>
 8001a1e:	1bc0      	subs	r0, r0, r7
 8001a20:	4286      	cmp	r6, r0
 8001a22:	d8b9      	bhi.n	8001998 <HAL_SD_ReadBlocks+0xbe>
 8001a24:	e7ec      	b.n	8001a00 <HAL_SD_ReadBlocks+0x126>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8001a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a28:	0791      	lsls	r1, r2, #30
 8001a2a:	d506      	bpl.n	8001a3a <HAL_SD_ReadBlocks+0x160>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001a2c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001a30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001a32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	e7ca      	b.n	80019d0 <HAL_SD_ReadBlocks+0xf6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8001a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a3c:	0692      	lsls	r2, r2, #26
 8001a3e:	d518      	bpl.n	8001a72 <HAL_SD_ReadBlocks+0x198>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001a40:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001a46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a48:	f043 0320 	orr.w	r3, r3, #32
 8001a4c:	e7c0      	b.n	80019d0 <HAL_SD_ReadBlocks+0xf6>
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8001a4e:	f001 f909 	bl	8002c64 <SDMMC_ReadFIFO>
 8001a52:	f845 0b04 	str.w	r0, [r5], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001a56:	b93e      	cbnz	r6, 8001a68 <HAL_SD_ReadBlocks+0x18e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001a5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001a60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a66:	e7b3      	b.n	80019d0 <HAL_SD_ReadBlocks+0xf6>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001a68:	f7fe fdb4 	bl	80005d4 <HAL_GetTick>
 8001a6c:	1bc0      	subs	r0, r0, r7
 8001a6e:	4286      	cmp	r6, r0
 8001a70:	d9f2      	bls.n	8001a58 <HAL_SD_ReadBlocks+0x17e>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8001a72:	6820      	ldr	r0, [r4, #0]
 8001a74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a76:	f413 1300 	ands.w	r3, r3, #2097152	; 0x200000
 8001a7a:	d1e8      	bne.n	8001a4e <HAL_SD_ReadBlocks+0x174>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001a7c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001a80:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001a82:	2201      	movs	r2, #1
    return HAL_OK;
 8001a84:	4618      	mov	r0, r3
    hsd->State = HAL_SD_STATE_READY;
 8001a86:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8001a8a:	e749      	b.n	8001920 <HAL_SD_ReadBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001a8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a92:	e731      	b.n	80018f8 <HAL_SD_ReadBlocks+0x1e>

08001a94 <HAL_SD_WriteBlocks>:
{
 8001a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a98:	460d      	mov	r5, r1
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	4604      	mov	r4, r0
 8001a9e:	4691      	mov	r9, r2
 8001aa0:	461e      	mov	r6, r3
 8001aa2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7fe fd96 	bl	80005d4 <HAL_GetTick>
 8001aa8:	4680      	mov	r8, r0
  if(NULL == pData)
 8001aaa:	b92d      	cbnz	r5, 8001ab8 <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001aac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001aae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001ab2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	e010      	b.n	8001ada <HAL_SD_WriteBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8001ab8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001abc:	b2c0      	uxtb	r0, r0
 8001abe:	2801      	cmp	r0, #1
 8001ac0:	f040 809d 	bne.w	8001bfe <HAL_SD_WriteBlocks+0x16a>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001ac4:	eb09 0306 	add.w	r3, r9, r6
 8001ac8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aca:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001acc:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ace:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001ad0:	d906      	bls.n	8001ae0 <HAL_SD_WriteBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001ada:	b007      	add	sp, #28
 8001adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001ae0:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0;
 8001ae2:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8001ae4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001ae8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0;
 8001aea:	62c1      	str	r1, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001aec:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001af0:	2b01      	cmp	r3, #1
      BlockAdd *= 512;
 8001af2:	bf18      	it	ne
 8001af4:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001af8:	f001 f983 	bl	8002e02 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001afc:	b150      	cbz	r0, 8001b14 <HAL_SD_WriteBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001b06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b08:	4318      	orrs	r0, r3
 8001b0a:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001b12:	e7e2      	b.n	8001ada <HAL_SD_WriteBlocks+0x46>
    if(NumberOfBlocks > 1U)
 8001b14:	2e01      	cmp	r6, #1
 8001b16:	d933      	bls.n	8001b80 <HAL_SD_WriteBlocks+0xec>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001b18:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001b1a:	4649      	mov	r1, r9
 8001b1c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001b1e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001b20:	f001 f9cf 	bl	8002ec2 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001b24:	2800      	cmp	r0, #0
 8001b26:	d1ea      	bne.n	8001afe <HAL_SD_WriteBlocks+0x6a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8001b2c:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8001b2e:	9004      	str	r0, [sp, #16]
    SDMMC_ConfigData(hsd->Instance, &config);
 8001b30:	4669      	mov	r1, sp
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001b32:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001b34:	0273      	lsls	r3, r6, #9
    SDMMC_ConfigData(hsd->Instance, &config);
 8001b36:	6820      	ldr	r0, [r4, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001b38:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8001b3a:	2390      	movs	r3, #144	; 0x90
 8001b3c:	9302      	str	r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8001b42:	f001 f94b 	bl	8002ddc <SDMMC_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8001b46:	6820      	ldr	r0, [r4, #0]
 8001b48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b4a:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8001b4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8001b50:	d01d      	beq.n	8001b8e <HAL_SD_WriteBlocks+0xfa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001b52:	05dd      	lsls	r5, r3, #23
 8001b54:	d508      	bpl.n	8001b68 <HAL_SD_WriteBlocks+0xd4>
 8001b56:	2e01      	cmp	r6, #1
 8001b58:	d906      	bls.n	8001b68 <HAL_SD_WriteBlocks+0xd4>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001b5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d003      	beq.n	8001b68 <HAL_SD_WriteBlocks+0xd4>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001b60:	f001 f9c8 	bl	8002ef4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d1ca      	bne.n	8001afe <HAL_SD_WriteBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6c:	0711      	lsls	r1, r2, #28
 8001b6e:	d52d      	bpl.n	8001bcc <HAL_SD_WriteBlocks+0x138>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001b70:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001b76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b78:	f043 0308 	orr.w	r3, r3, #8
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001b7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b7e:	e7c5      	b.n	8001b0c <HAL_SD_WriteBlocks+0x78>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001b80:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001b82:	4649      	mov	r1, r9
 8001b84:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001b86:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001b88:	f001 f983 	bl	8002e92 <SDMMC_CmdWriteSingleBlock>
 8001b8c:	e7ca      	b.n	8001b24 <HAL_SD_WriteBlocks+0x90>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8001b8e:	045b      	lsls	r3, r3, #17
 8001b90:	d509      	bpl.n	8001ba6 <HAL_SD_WriteBlocks+0x112>
 8001b92:	46a9      	mov	r9, r5
 8001b94:	3520      	adds	r5, #32
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8001b96:	4649      	mov	r1, r9
 8001b98:	f109 0904 	add.w	r9, r9, #4
 8001b9c:	6820      	ldr	r0, [r4, #0]
 8001b9e:	f001 f864 	bl	8002c6a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001ba2:	454d      	cmp	r5, r9
 8001ba4:	d1f7      	bne.n	8001b96 <HAL_SD_WriteBlocks+0x102>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001ba6:	b957      	cbnz	r7, 8001bbe <HAL_SD_WriteBlocks+0x12a>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	f240 52ff 	movw	r2, #1535	; 0x5ff
        return HAL_TIMEOUT;
 8001bae:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8001bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001bb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bb4:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001bbc:	e78d      	b.n	8001ada <HAL_SD_WriteBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001bbe:	f7fe fd09 	bl	80005d4 <HAL_GetTick>
 8001bc2:	eba0 0008 	sub.w	r0, r0, r8
 8001bc6:	4287      	cmp	r7, r0
 8001bc8:	d8bd      	bhi.n	8001b46 <HAL_SD_WriteBlocks+0xb2>
 8001bca:	e7ed      	b.n	8001ba8 <HAL_SD_WriteBlocks+0x114>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8001bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bce:	0792      	lsls	r2, r2, #30
 8001bd0:	d506      	bpl.n	8001be0 <HAL_SD_WriteBlocks+0x14c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001bd2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001bd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8001bd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	e7cd      	b.n	8001b7c <HAL_SD_WriteBlocks+0xe8>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8001be0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001be2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001be6:	f010 0010 	ands.w	r0, r0, #16
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8001bec:	d003      	beq.n	8001bf6 <HAL_SD_WriteBlocks+0x162>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001bee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bf0:	f043 0310 	orr.w	r3, r3, #16
 8001bf4:	e7c2      	b.n	8001b7c <HAL_SD_WriteBlocks+0xe8>
    hsd->State = HAL_SD_STATE_READY;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8001bfc:	e76d      	b.n	8001ada <HAL_SD_WriteBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001bfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c04:	e755      	b.n	8001ab2 <HAL_SD_WriteBlocks+0x1e>

08001c06 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8001c06:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8001c08:	0f9a      	lsrs	r2, r3, #30
 8001c0a:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8001c0c:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8001c10:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8001c12:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8001c16:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8001c18:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001c1c:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8001c1e:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8001c22:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8001c24:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8001c26:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8001c28:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001c2a:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8001c2c:	0112      	lsls	r2, r2, #4
 8001c2e:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8001c30:	88ca      	ldrh	r2, [r1, #6]
{
 8001c32:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8001c34:	b292      	uxth	r2, r2
 8001c36:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8001c3a:	4322      	orrs	r2, r4
 8001c3c:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8001c3e:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8001c42:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8001c44:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8001c48:	09d4      	lsrs	r4, r2, #7
 8001c4a:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8001c4c:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8001c50:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8001c52:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8001c56:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8001c58:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8001c5c:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8001c5e:	2400      	movs	r4, #0
 8001c60:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001c62:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001c64:	2c00      	cmp	r4, #0
 8001c66:	f040 8083 	bne.w	8001d70 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8001c6a:	0292      	lsls	r2, r2, #10
    pCSD->DeviceSize |= (tmp) << 2;
 8001c6c:	009b      	lsls	r3, r3, #2
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8001c6e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSize |= (tmp) << 2;
 8001c72:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8001c76:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8001c78:	690a      	ldr	r2, [r1, #16]
 8001c7a:	4313      	orrs	r3, r2
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8001c7c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 8001c7e:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8001c80:	690b      	ldr	r3, [r1, #16]
 8001c82:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8001c86:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8001c88:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8001c8c:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8001c8e:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8001c92:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8001c94:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8001c98:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8001c9a:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8001c9e:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8001ca0:	0bd3      	lsrs	r3, r2, #15
 8001ca2:	f003 0306 	and.w	r3, r3, #6
 8001ca6:	760b      	strb	r3, [r1, #24]
 8001ca8:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8001cac:	7e0c      	ldrb	r4, [r1, #24]
 8001cae:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8001cb2:	4322      	orrs	r2, r4
 8001cb4:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8001cb6:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8001cb8:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8001cba:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8001cbc:	3402      	adds	r4, #2
 8001cbe:	40a2      	lsls	r2, r4
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8001cc0:	2401      	movs	r4, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8001cc2:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8001cc4:	7a0d      	ldrb	r5, [r1, #8]
 8001cc6:	40ac      	lsls	r4, r5
 8001cc8:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8001cca:	0a64      	lsrs	r4, r4, #9
 8001ccc:	4362      	muls	r2, r4
 8001cce:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8001cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8001cd4:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8001cd6:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8001cda:	005b      	lsls	r3, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8001cdc:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8001cde:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001ce2:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8001ce4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8001ce6:	7e8a      	ldrb	r2, [r1, #26]
 8001ce8:	f3c3 14c0 	ubfx	r4, r3, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8001cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8001cf0:	4322      	orrs	r2, r4
 8001cf2:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8001cf4:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8001cf6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8001cf8:	0fda      	lsrs	r2, r3, #31
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8001cfa:	f3c3 5081 	ubfx	r0, r3, #22, #2
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8001cfe:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8001d00:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8001d04:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8001d06:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8001d0a:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8001d0c:	0d9a      	lsrs	r2, r3, #22
 8001d0e:	f002 020c 	and.w	r2, r2, #12
 8001d12:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8001d14:	7fca      	ldrb	r2, [r1, #31]
 8001d16:	4302      	orrs	r2, r0
  pCSD->Reserved3           = 0;
 8001d18:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8001d1a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8001d1c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8001d20:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8001d24:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 8001d28:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8001d2c:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8001d30:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8001d34:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8001d38:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001d3c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8001d40:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8001d44:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8001d48:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8001d4c:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8001d50:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8001d54:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8001d58:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8001d5c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 8001d60:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8001d64:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8001d6e:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001d70:	2c01      	cmp	r4, #1
 8001d72:	d11a      	bne.n	8001daa <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001d7a:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8001d7c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8);
 8001d7e:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8001d80:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 8001d82:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001d86:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8001d88:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001d8c:	690c      	ldr	r4, [r1, #16]
 8001d8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001d92:	4322      	orrs	r2, r4
 8001d94:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8001d96:	690a      	ldr	r2, [r1, #16]
 8001d98:	0292      	lsls	r2, r2, #10
 8001d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d9e:	6542      	str	r2, [r0, #84]	; 0x54
 8001da0:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8001da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da6:	6582      	str	r2, [r0, #88]	; 0x58
 8001da8:	e794      	b.n	8001cd4 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8001daa:	6803      	ldr	r3, [r0, #0]
 8001dac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001db2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd30      	pop	{r4, r5, pc}

08001dc4 <HAL_SD_InitCard>:
{
 8001dc4:	b570      	push	{r4, r5, r6, lr}
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8001dc6:	2376      	movs	r3, #118	; 0x76
{
 8001dc8:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001dca:	2500      	movs	r5, #0
{
 8001dcc:	4604      	mov	r4, r0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8001dce:	930c      	str	r3, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, Init);
 8001dd0:	ab0a      	add	r3, sp, #40	; 0x28
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8001dd2:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001dd4:	950b      	str	r5, [sp, #44]	; 0x2c
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001dd6:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8001dd8:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001dda:	9509      	str	r5, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 8001ddc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001de0:	ab07      	add	r3, sp, #28
 8001de2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001de6:	6820      	ldr	r0, [r4, #0]
 8001de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dea:	f000 ff1f 	bl	8002c2c <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 8001dee:	6820      	ldr	r0, [r4, #0]
 8001df0:	6843      	ldr	r3, [r0, #4]
 8001df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df6:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8001df8:	f000 ff3c 	bl	8002c74 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8001dfc:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8001dfe:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8001e00:	6853      	ldr	r3, [r2, #4]
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8001e08:	f7fe fbea 	bl	80005e0 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001e0c:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 8001e0e:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001e10:	f001 f8a2 	bl	8002f58 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001e14:	4606      	mov	r6, r0
 8001e16:	b968      	cbnz	r0, 8001e34 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8001e18:	6820      	ldr	r0, [r4, #0]
 8001e1a:	f001 f8c5 	bl	8002fa8 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001e1e:	b380      	cbz	r0, 8001e82 <HAL_SD_InitCard+0xbe>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001e20:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 8001e24:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001e26:	9b06      	ldr	r3, [sp, #24]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	42ab      	cmp	r3, r5
 8001e2c:	9206      	str	r2, [sp, #24]
 8001e2e:	d108      	bne.n	8001e42 <HAL_SD_InitCard+0x7e>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8001e30:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8001e34:	2001      	movs	r0, #1
 8001e36:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001e3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001e3c:	430e      	orrs	r6, r1
 8001e3e:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001e40:	e083      	b.n	8001f4a <HAL_SD_InitCard+0x186>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001e42:	2100      	movs	r1, #0
 8001e44:	6820      	ldr	r0, [r4, #0]
 8001e46:	f001 f8e7 	bl	8003018 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001e4a:	4601      	mov	r1, r0
 8001e4c:	b110      	cbz	r0, 8001e54 <HAL_SD_InitCard+0x90>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001e4e:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8001e52:	e7ef      	b.n	8001e34 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	f001 f8f7 	bl	8003048 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001e5a:	4601      	mov	r1, r0
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d1f6      	bne.n	8001e4e <HAL_SD_InitCard+0x8a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001e60:	6820      	ldr	r0, [r4, #0]
 8001e62:	f000 ff22 	bl	8002caa <SDMMC_GetResponse>
    while(validvoltage == 0)
 8001e66:	2800      	cmp	r0, #0
 8001e68:	dadd      	bge.n	8001e26 <HAL_SD_InitCard+0x62>
    hsd->SdCard.CardType = CARD_SDSC;
 8001e6a:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8001e6c:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 8001e6e:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8001e70:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8001e72:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8001e76:	f000 ff01 	bl	8002c7c <SDMMC_GetPowerState>
 8001e7a:	bb20      	cbnz	r0, 8001ec6 <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8001e7c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8001e80:	e06d      	b.n	8001f5e <HAL_SD_InitCard+0x19a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8001e82:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001e84:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 8001e88:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001e8a:	9b06      	ldr	r3, [sp, #24]
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	42ab      	cmp	r3, r5
 8001e90:	9206      	str	r2, [sp, #24]
 8001e92:	d0cd      	beq.n	8001e30 <HAL_SD_InitCard+0x6c>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001e94:	2100      	movs	r1, #0
 8001e96:	6820      	ldr	r0, [r4, #0]
 8001e98:	f001 f8be 	bl	8003018 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001e9c:	4606      	mov	r6, r0
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d1c8      	bne.n	8001e34 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8001ea2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ea6:	6820      	ldr	r0, [r4, #0]
 8001ea8:	f001 f8ce 	bl	8003048 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001eac:	4606      	mov	r6, r0
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d1c0      	bne.n	8001e34 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001eb2:	4601      	mov	r1, r0
 8001eb4:	6820      	ldr	r0, [r4, #0]
 8001eb6:	f000 fef8 	bl	8002caa <SDMMC_GetResponse>
    while(validvoltage == 0)
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	dae5      	bge.n	8001e8a <HAL_SD_InitCard+0xc6>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8001ebe:	0043      	lsls	r3, r0, #1
 8001ec0:	d5d3      	bpl.n	8001e6a <HAL_SD_InitCard+0xa6>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e7d2      	b.n	8001e6c <HAL_SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001ec6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d01a      	beq.n	8001f02 <HAL_SD_InitCard+0x13e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8001ecc:	6820      	ldr	r0, [r4, #0]
 8001ece:	f001 f8ec 	bl	80030aa <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ed2:	4605      	mov	r5, r0
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	d142      	bne.n	8001f5e <HAL_SD_InitCard+0x19a>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001ed8:	4601      	mov	r1, r0
 8001eda:	6820      	ldr	r0, [r4, #0]
 8001edc:	f000 fee5 	bl	8002caa <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001ee0:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001ee2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001ee4:	6820      	ldr	r0, [r4, #0]
 8001ee6:	f000 fee0 	bl	8002caa <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001eea:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001eec:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001eee:	6820      	ldr	r0, [r4, #0]
 8001ef0:	f000 fedb 	bl	8002caa <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001ef4:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001ef6:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001ef8:	6820      	ldr	r0, [r4, #0]
 8001efa:	f000 fed6 	bl	8002caa <SDMMC_GetResponse>
 8001efe:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001f02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d122      	bne.n	8001f4e <HAL_SD_InitCard+0x18a>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001f08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d12e      	bne.n	8001f6c <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8001f0e:	2104      	movs	r1, #4
 8001f10:	6820      	ldr	r0, [r4, #0]
 8001f12:	f000 feca 	bl	8002caa <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 8001f16:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8001f18:	0d00      	lsrs	r0, r0, #20
 8001f1a:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff fe72 	bl	8001c06 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8001f22:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001f24:	2300      	movs	r3, #0
 8001f26:	6820      	ldr	r0, [r4, #0]
 8001f28:	0412      	lsls	r2, r2, #16
 8001f2a:	f000 fffd 	bl	8002f28 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f2e:	4605      	mov	r5, r0
 8001f30:	b9a8      	cbnz	r0, 8001f5e <HAL_SD_InitCard+0x19a>
  SDMMC_Init(hsd->Instance, hsd->Init);
 8001f32:	f104 0310 	add.w	r3, r4, #16
 8001f36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f3a:	1d23      	adds	r3, r4, #4
 8001f3c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001f40:	6820      	ldr	r0, [r4, #0]
 8001f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f44:	f000 fe72 	bl	8002c2c <SDMMC_Init>
  return HAL_OK;
 8001f48:	4628      	mov	r0, r5
}
 8001f4a:	b018      	add	sp, #96	; 0x60
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8001f4e:	f10d 0116 	add.w	r1, sp, #22
 8001f52:	6820      	ldr	r0, [r4, #0]
 8001f54:	f001 f8d4 	bl	8003100 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001f58:	4605      	mov	r5, r0
 8001f5a:	2800      	cmp	r0, #0
 8001f5c:	d0d4      	beq.n	8001f08 <HAL_SD_InitCard+0x144>
    hsd->State = HAL_SD_STATE_READY;
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f66:	431d      	orrs	r5, r3
 8001f68:	63a5      	str	r5, [r4, #56]	; 0x38
 8001f6a:	e7ee      	b.n	8001f4a <HAL_SD_InitCard+0x186>
    hsd->SdCard.RelCardAdd = sd_rca;
 8001f6c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001f70:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8001f72:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001f74:	0409      	lsls	r1, r1, #16
 8001f76:	f001 f8ad 	bl	80030d4 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001f7a:	4605      	mov	r5, r0
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_SD_InitCard+0x19a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001f80:	4601      	mov	r1, r0
 8001f82:	6820      	ldr	r0, [r4, #0]
 8001f84:	f000 fe91 	bl	8002caa <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001f88:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001f8a:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001f8c:	6820      	ldr	r0, [r4, #0]
 8001f8e:	f000 fe8c 	bl	8002caa <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001f92:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001f94:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001f96:	6820      	ldr	r0, [r4, #0]
 8001f98:	f000 fe87 	bl	8002caa <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001f9c:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001f9e:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001fa0:	6820      	ldr	r0, [r4, #0]
 8001fa2:	f000 fe82 	bl	8002caa <SDMMC_GetResponse>
 8001fa6:	6720      	str	r0, [r4, #112]	; 0x70
 8001fa8:	e7b1      	b.n	8001f0e <HAL_SD_InitCard+0x14a>

08001faa <HAL_SD_Init>:
{
 8001faa:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8001fac:	4604      	mov	r4, r0
 8001fae:	b1a0      	cbz	r0, 8001fda <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8001fb0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001fb4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fb8:	b913      	cbnz	r3, 8001fc0 <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 8001fba:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8001fbc:	f001 fc3a 	bl	8003834 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8001fc0:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 8001fc2:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8001fc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8001fc8:	f7ff fefc 	bl	8001dc4 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fcc:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 8001fce:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd0:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8001fd2:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8001fd4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8001fd8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fda:	2001      	movs	r0, #1
}
 8001fdc:	bd10      	pop	{r4, pc}

08001fde <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8001fde:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001fe0:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8001fe2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001fe4:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8001fe6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001fe8:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8001fea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001fec:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8001fee:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001ff0:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8001ff2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001ff4:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8001ff6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001ff8:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001ffa:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 8001ffc:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001ffe:	61cb      	str	r3, [r1, #28]
}
 8002000:	4770      	bx	lr

08002002 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8002002:	2303      	movs	r3, #3
{
 8002004:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8002006:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 800200a:	b08a      	sub	sp, #40	; 0x28
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800200c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800200e:	4604      	mov	r4, r0
 8002010:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002012:	2b03      	cmp	r3, #3
 8002014:	d002      	beq.n	800201c <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8002016:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800201a:	d103      	bne.n	8002024 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800201c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800201e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002022:	e056      	b.n	80020d2 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8002024:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002028:	d12d      	bne.n	8002086 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 800202a:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800202c:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 800202e:	9104      	str	r1, [sp, #16]
 8002030:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002032:	f000 fe3a 	bl	8002caa <SDMMC_GetResponse>
 8002036:	0180      	lsls	r0, r0, #6
 8002038:	d420      	bmi.n	800207c <HAL_SD_ConfigWideBusOperation+0x7a>
  errorstate = SD_FindSCR(hsd, scr);
 800203a:	a904      	add	r1, sp, #16
 800203c:	4620      	mov	r0, r4
 800203e:	f7ff fbe7 	bl	8001810 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8002042:	b960      	cbnz	r0, 800205e <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002044:	9b05      	ldr	r3, [sp, #20]
 8002046:	0359      	lsls	r1, r3, #13
 8002048:	d51a      	bpl.n	8002080 <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800204a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800204c:	6820      	ldr	r0, [r4, #0]
 800204e:	0409      	lsls	r1, r1, #16
 8002050:	f000 ffe2 	bl	8003018 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8002054:	b918      	cbnz	r0, 800205e <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8002056:	2102      	movs	r1, #2
 8002058:	6820      	ldr	r0, [r4, #0]
 800205a:	f001 f8d5 	bl	8003208 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800205e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002060:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8002062:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002064:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002066:	2d00      	cmp	r5, #0
 8002068:	d035      	beq.n	80020d6 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 8002070:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002074:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8002078:	b00a      	add	sp, #40	; 0x28
 800207a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800207c:	4630      	mov	r0, r6
 800207e:	e7ee      	b.n	800205e <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002080:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002084:	e7eb      	b.n	800205e <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8002086:	bb09      	cbnz	r1, 80020cc <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002088:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 800208a:	9104      	str	r1, [sp, #16]
 800208c:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800208e:	f000 fe0c 	bl	8002caa <SDMMC_GetResponse>
 8002092:	0182      	lsls	r2, r0, #6
 8002094:	d414      	bmi.n	80020c0 <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 8002096:	a904      	add	r1, sp, #16
 8002098:	4620      	mov	r0, r4
 800209a:	f7ff fbb9 	bl	8001810 <SD_FindSCR>
  if(errorstate != HAL_OK)
 800209e:	b960      	cbnz	r0, 80020ba <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80020a0:	9b05      	ldr	r3, [sp, #20]
 80020a2:	03db      	lsls	r3, r3, #15
 80020a4:	d50f      	bpl.n	80020c6 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80020a6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80020a8:	6820      	ldr	r0, [r4, #0]
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	f000 ffb4 	bl	8003018 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80020b0:	b918      	cbnz	r0, 80020ba <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80020b2:	4601      	mov	r1, r0
 80020b4:	6820      	ldr	r0, [r4, #0]
 80020b6:	f001 f8a7 	bl	8003208 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80020ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80020bc:	4308      	orrs	r0, r1
 80020be:	e7d0      	b.n	8002062 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80020c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020c4:	e7f9      	b.n	80020ba <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80020c6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80020ca:	e7f6      	b.n	80020ba <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80020cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80020ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80020d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80020d4:	e7c6      	b.n	8002064 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80020d6:	6863      	ldr	r3, [r4, #4]
    Init.BusWide             = WideMode;
 80020d8:	9607      	str	r6, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80020da:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80020dc:	68a3      	ldr	r3, [r4, #8]
 80020de:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80020e0:	68e3      	ldr	r3, [r4, #12]
 80020e2:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80020e4:	6963      	ldr	r3, [r4, #20]
 80020e6:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80020e8:	69a3      	ldr	r3, [r4, #24]
 80020ea:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 80020ec:	ab0a      	add	r3, sp, #40	; 0x28
 80020ee:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80020f2:	ab04      	add	r3, sp, #16
 80020f4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80020f8:	6820      	ldr	r0, [r4, #0]
 80020fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fc:	f000 fd96 	bl	8002c2c <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8002100:	2301      	movs	r3, #1
  return HAL_OK;
 8002102:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8002104:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002108:	e7b6      	b.n	8002078 <HAL_SD_ConfigWideBusOperation+0x76>

0800210a <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800210a:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800210c:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800210e:	0409      	lsls	r1, r1, #16
{
 8002110:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8002112:	6800      	ldr	r0, [r0, #0]
 8002114:	f001 f848 	bl	80031a8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8002118:	4601      	mov	r1, r0
 800211a:	b928      	cbnz	r0, 8002128 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800211c:	6820      	ldr	r0, [r4, #0]
 800211e:	f000 fdc4 	bl	8002caa <SDMMC_GetResponse>
  return cardstate;
 8002122:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8002126:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8002128:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800212a:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 800212c:	4319      	orrs	r1, r3
 800212e:	63a1      	str	r1, [r4, #56]	; 0x38
 8002130:	e7f7      	b.n	8002122 <HAL_SD_GetCardState+0x18>

08002132 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002132:	6a03      	ldr	r3, [r0, #32]
{
 8002134:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002136:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002138:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800213c:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8002140:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002142:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002144:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002146:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800214a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800214e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002150:	6203      	str	r3, [r0, #32]
 8002152:	bd10      	pop	{r4, pc}

08002154 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002154:	6a03      	ldr	r3, [r0, #32]
 8002156:	f023 0310 	bic.w	r3, r3, #16
{
 800215a:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800215c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800215e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002160:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002162:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002166:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 800216a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 800216e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002172:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002174:	6203      	str	r3, [r0, #32]
 8002176:	bd10      	pop	{r4, pc}

08002178 <HAL_TIM_PWM_MspInit>:
 8002178:	4770      	bx	lr
	...

0800217c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800217c:	4a30      	ldr	r2, [pc, #192]	; (8002240 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800217e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002180:	4290      	cmp	r0, r2
 8002182:	d012      	beq.n	80021aa <TIM_Base_SetConfig+0x2e>
 8002184:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002188:	d00f      	beq.n	80021aa <TIM_Base_SetConfig+0x2e>
 800218a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800218e:	4290      	cmp	r0, r2
 8002190:	d00b      	beq.n	80021aa <TIM_Base_SetConfig+0x2e>
 8002192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002196:	4290      	cmp	r0, r2
 8002198:	d007      	beq.n	80021aa <TIM_Base_SetConfig+0x2e>
 800219a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800219e:	4290      	cmp	r0, r2
 80021a0:	d003      	beq.n	80021aa <TIM_Base_SetConfig+0x2e>
 80021a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021a6:	4290      	cmp	r0, r2
 80021a8:	d11d      	bne.n	80021e6 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80021aa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021b0:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021b2:	4a23      	ldr	r2, [pc, #140]	; (8002240 <TIM_Base_SetConfig+0xc4>)
 80021b4:	4290      	cmp	r0, r2
 80021b6:	d104      	bne.n	80021c2 <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021bc:	68ca      	ldr	r2, [r1, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	e028      	b.n	8002214 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021c2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021c6:	d0f7      	beq.n	80021b8 <TIM_Base_SetConfig+0x3c>
 80021c8:	4a1e      	ldr	r2, [pc, #120]	; (8002244 <TIM_Base_SetConfig+0xc8>)
 80021ca:	4290      	cmp	r0, r2
 80021cc:	d0f4      	beq.n	80021b8 <TIM_Base_SetConfig+0x3c>
 80021ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021d2:	4290      	cmp	r0, r2
 80021d4:	d0f0      	beq.n	80021b8 <TIM_Base_SetConfig+0x3c>
 80021d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021da:	4290      	cmp	r0, r2
 80021dc:	d0ec      	beq.n	80021b8 <TIM_Base_SetConfig+0x3c>
 80021de:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021e2:	4290      	cmp	r0, r2
 80021e4:	d0e8      	beq.n	80021b8 <TIM_Base_SetConfig+0x3c>
 80021e6:	4a18      	ldr	r2, [pc, #96]	; (8002248 <TIM_Base_SetConfig+0xcc>)
 80021e8:	4290      	cmp	r0, r2
 80021ea:	d0e5      	beq.n	80021b8 <TIM_Base_SetConfig+0x3c>
 80021ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021f0:	4290      	cmp	r0, r2
 80021f2:	d0e1      	beq.n	80021b8 <TIM_Base_SetConfig+0x3c>
 80021f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021f8:	4290      	cmp	r0, r2
 80021fa:	d0dd      	beq.n	80021b8 <TIM_Base_SetConfig+0x3c>
 80021fc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002200:	4290      	cmp	r0, r2
 8002202:	d0d9      	beq.n	80021b8 <TIM_Base_SetConfig+0x3c>
 8002204:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002208:	4290      	cmp	r0, r2
 800220a:	d0d5      	beq.n	80021b8 <TIM_Base_SetConfig+0x3c>
 800220c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002210:	4290      	cmp	r0, r2
 8002212:	d0d1      	beq.n	80021b8 <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	694a      	ldr	r2, [r1, #20]
 8002216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800221a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800221c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800221e:	688b      	ldr	r3, [r1, #8]
 8002220:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002222:	680b      	ldr	r3, [r1, #0]
 8002224:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <TIM_Base_SetConfig+0xc4>)
 8002228:	4298      	cmp	r0, r3
 800222a:	d006      	beq.n	800223a <TIM_Base_SetConfig+0xbe>
 800222c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002230:	4298      	cmp	r0, r3
 8002232:	d002      	beq.n	800223a <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 8002234:	2301      	movs	r3, #1
 8002236:	6143      	str	r3, [r0, #20]
}
 8002238:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800223a:	690b      	ldr	r3, [r1, #16]
 800223c:	6303      	str	r3, [r0, #48]	; 0x30
 800223e:	e7f9      	b.n	8002234 <TIM_Base_SetConfig+0xb8>
 8002240:	40010000 	.word	0x40010000
 8002244:	40000400 	.word	0x40000400
 8002248:	40014000 	.word	0x40014000

0800224c <HAL_TIM_Base_Init>:
{ 
 800224c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800224e:	4604      	mov	r4, r0
 8002250:	b1a0      	cbz	r0, 800227c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002252:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002256:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800225a:	b91b      	cbnz	r3, 8002264 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800225c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002260:	f001 fb34 	bl	80038cc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002264:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002266:	6820      	ldr	r0, [r4, #0]
 8002268:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 800226a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800226e:	f7ff ff85 	bl	800217c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002272:	2301      	movs	r3, #1
  return HAL_OK;
 8002274:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002276:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800227a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800227c:	2001      	movs	r0, #1
}
 800227e:	bd10      	pop	{r4, pc}

08002280 <HAL_TIM_PWM_Init>:
{
 8002280:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002282:	4604      	mov	r4, r0
 8002284:	b1a0      	cbz	r0, 80022b0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002286:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800228a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800228e:	b91b      	cbnz	r3, 8002298 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002290:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002294:	f7ff ff70 	bl	8002178 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002298:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800229a:	6820      	ldr	r0, [r4, #0]
 800229c:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 800229e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022a2:	f7ff ff6b 	bl	800217c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022a6:	2301      	movs	r3, #1
  return HAL_OK;
 80022a8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80022aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80022ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022b0:	2001      	movs	r0, #1
}  
 80022b2:	bd10      	pop	{r4, pc}

080022b4 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b4:	6a03      	ldr	r3, [r0, #32]
 80022b6:	f023 0301 	bic.w	r3, r3, #1
{
 80022ba:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022bc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80022be:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80022c0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80022c2:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80022c4:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 80022c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022ca:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80022ce:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80022d2:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 80022d4:	688d      	ldr	r5, [r1, #8]
 80022d6:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80022d8:	4d0c      	ldr	r5, [pc, #48]	; (800230c <TIM_OC1_SetConfig+0x58>)
 80022da:	42a8      	cmp	r0, r5
 80022dc:	d009      	beq.n	80022f2 <TIM_OC1_SetConfig+0x3e>
 80022de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022e2:	42a8      	cmp	r0, r5
 80022e4:	d005      	beq.n	80022f2 <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 80022e6:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 80022e8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80022ea:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80022ec:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 80022ee:	6203      	str	r3, [r0, #32]
} 
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 80022f2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80022f4:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 80022f8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 80022fe:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002300:	694d      	ldr	r5, [r1, #20]
 8002302:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002304:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002308:	432a      	orrs	r2, r5
 800230a:	e7ec      	b.n	80022e6 <TIM_OC1_SetConfig+0x32>
 800230c:	40010000 	.word	0x40010000

08002310 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002310:	6a03      	ldr	r3, [r0, #32]
 8002312:	f023 0310 	bic.w	r3, r3, #16
{
 8002316:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002318:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800231a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800231c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800231e:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002320:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002324:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002326:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800232a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 800232e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002332:	688d      	ldr	r5, [r1, #8]
 8002334:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002338:	4d0d      	ldr	r5, [pc, #52]	; (8002370 <TIM_OC2_SetConfig+0x60>)
 800233a:	42a8      	cmp	r0, r5
 800233c:	d009      	beq.n	8002352 <TIM_OC2_SetConfig+0x42>
 800233e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002342:	42a8      	cmp	r0, r5
 8002344:	d005      	beq.n	8002352 <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8002346:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002348:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800234a:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800234c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800234e:	6203      	str	r3, [r0, #32]
}
 8002350:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002352:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002358:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800235a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800235e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002362:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002364:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800236a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800236e:	e7ea      	b.n	8002346 <TIM_OC2_SetConfig+0x36>
 8002370:	40010000 	.word	0x40010000

08002374 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002374:	6a03      	ldr	r3, [r0, #32]
 8002376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800237a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800237c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800237e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002380:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002382:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8002384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8002388:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800238a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800238e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002392:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002394:	688d      	ldr	r5, [r1, #8]
 8002396:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800239a:	4d0e      	ldr	r5, [pc, #56]	; (80023d4 <TIM_OC3_SetConfig+0x60>)
 800239c:	42a8      	cmp	r0, r5
 800239e:	d009      	beq.n	80023b4 <TIM_OC3_SetConfig+0x40>
 80023a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023a4:	42a8      	cmp	r0, r5
 80023a6:	d005      	beq.n	80023b4 <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 80023a8:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 80023aa:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80023ac:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80023ae:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80023b0:	6203      	str	r3, [r0, #32]
}
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80023b4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80023b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80023ba:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023bc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80023c0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80023c4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80023c6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80023c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80023cc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80023d0:	e7ea      	b.n	80023a8 <TIM_OC3_SetConfig+0x34>
 80023d2:	bf00      	nop
 80023d4:	40010000 	.word	0x40010000

080023d8 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023d8:	6a03      	ldr	r3, [r0, #32]
 80023da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80023de:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023e0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80023e2:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80023e4:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80023e6:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80023e8:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80023ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023f2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80023f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 80023fa:	688d      	ldr	r5, [r1, #8]
 80023fc:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002400:	4d09      	ldr	r5, [pc, #36]	; (8002428 <TIM_OC4_SetConfig+0x50>)
 8002402:	42a8      	cmp	r0, r5
 8002404:	d009      	beq.n	800241a <TIM_OC4_SetConfig+0x42>
 8002406:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800240a:	42a8      	cmp	r0, r5
 800240c:	d005      	beq.n	800241a <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 800240e:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002410:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002412:	684b      	ldr	r3, [r1, #4]
 8002414:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002416:	6204      	str	r4, [r0, #32]
}
 8002418:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 800241a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800241e:	694d      	ldr	r5, [r1, #20]
 8002420:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002424:	e7f3      	b.n	800240e <TIM_OC4_SetConfig+0x36>
 8002426:	bf00      	nop
 8002428:	40010000 	.word	0x40010000

0800242c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800242c:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800242e:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8002430:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002432:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002436:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800243a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800243c:	6083      	str	r3, [r0, #8]
 800243e:	bd10      	pop	{r4, pc}

08002440 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002440:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002444:	2b01      	cmp	r3, #1
{
 8002446:	b510      	push	{r4, lr}
 8002448:	4604      	mov	r4, r0
 800244a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800244e:	d018      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002454:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8002456:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002458:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800245c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800245e:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <HAL_TIM_ConfigClockSource+0x118>)
 8002460:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002462:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002464:	680b      	ldr	r3, [r1, #0]
 8002466:	2b40      	cmp	r3, #64	; 0x40
 8002468:	d059      	beq.n	800251e <HAL_TIM_ConfigClockSource+0xde>
 800246a:	d815      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x58>
 800246c:	2b10      	cmp	r3, #16
 800246e:	d067      	beq.n	8002540 <HAL_TIM_ConfigClockSource+0x100>
 8002470:	d808      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x44>
 8002472:	2b00      	cmp	r3, #0
 8002474:	d05e      	beq.n	8002534 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 8002476:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002478:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800247a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800247e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002482:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002484:	2b20      	cmp	r3, #32
 8002486:	d061      	beq.n	800254c <HAL_TIM_ConfigClockSource+0x10c>
 8002488:	2b30      	cmp	r3, #48	; 0x30
 800248a:	d1f4      	bne.n	8002476 <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 800248c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800248e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002492:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002496:	e026      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8002498:	2b70      	cmp	r3, #112	; 0x70
 800249a:	d026      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0xaa>
 800249c:	d80e      	bhi.n	80024bc <HAL_TIM_ConfigClockSource+0x7c>
 800249e:	2b50      	cmp	r3, #80	; 0x50
 80024a0:	d032      	beq.n	8002508 <HAL_TIM_ConfigClockSource+0xc8>
 80024a2:	2b60      	cmp	r3, #96	; 0x60
 80024a4:	d1e7      	bne.n	8002476 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80024a6:	68ca      	ldr	r2, [r1, #12]
 80024a8:	6849      	ldr	r1, [r1, #4]
 80024aa:	f7ff fe53 	bl	8002154 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024ae:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80024b0:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80024b6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80024ba:	e023      	b.n	8002504 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 80024bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c0:	d00c      	beq.n	80024dc <HAL_TIM_ConfigClockSource+0x9c>
 80024c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c6:	d1d6      	bne.n	8002476 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 80024c8:	68cb      	ldr	r3, [r1, #12]
 80024ca:	684a      	ldr	r2, [r1, #4]
 80024cc:	6889      	ldr	r1, [r1, #8]
 80024ce:	f7ff ffad 	bl	800242c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024d2:	6822      	ldr	r2, [r4, #0]
 80024d4:	6893      	ldr	r3, [r2, #8]
 80024d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024da:	e013      	b.n	8002504 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80024dc:	6883      	ldr	r3, [r0, #8]
 80024de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e2:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80024e6:	6083      	str	r3, [r0, #8]
 80024e8:	e7c5      	b.n	8002476 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 80024ea:	68cb      	ldr	r3, [r1, #12]
 80024ec:	684a      	ldr	r2, [r1, #4]
 80024ee:	6889      	ldr	r1, [r1, #8]
 80024f0:	f7ff ff9c 	bl	800242c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024f4:	6822      	ldr	r2, [r4, #0]
 80024f6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002504:	6093      	str	r3, [r2, #8]
    break;
 8002506:	e7b6      	b.n	8002476 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002508:	68ca      	ldr	r2, [r1, #12]
 800250a:	6849      	ldr	r1, [r1, #4]
 800250c:	f7ff fe11 	bl	8002132 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002510:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002512:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002518:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 800251c:	e7f2      	b.n	8002504 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800251e:	68ca      	ldr	r2, [r1, #12]
 8002520:	6849      	ldr	r1, [r1, #4]
 8002522:	f7ff fe06 	bl	8002132 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002526:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002528:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800252e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002532:	e7e7      	b.n	8002504 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 8002534:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800253a:	f043 0307 	orr.w	r3, r3, #7
 800253e:	e7d2      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8002540:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002546:	f043 0317 	orr.w	r3, r3, #23
 800254a:	e7cc      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 800254c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002552:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8002556:	e7c6      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0xa6>
 8002558:	fffe0088 	.word	0xfffe0088

0800255c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800255c:	6a03      	ldr	r3, [r0, #32]
 800255e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8002562:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002564:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002566:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002568:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800256a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800256c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8002570:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800257a:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 800257c:	688d      	ldr	r5, [r1, #8]
 800257e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002582:	4d09      	ldr	r5, [pc, #36]	; (80025a8 <TIM_OC5_SetConfig+0x4c>)
 8002584:	42a8      	cmp	r0, r5
 8002586:	d003      	beq.n	8002590 <TIM_OC5_SetConfig+0x34>
 8002588:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800258c:	42a8      	cmp	r0, r5
 800258e:	d104      	bne.n	800259a <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002590:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8002594:	694d      	ldr	r5, [r1, #20]
 8002596:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800259a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800259c:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800259e:	684b      	ldr	r3, [r1, #4]
 80025a0:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80025a2:	6202      	str	r2, [r0, #32]
 80025a4:	bd30      	pop	{r4, r5, pc}
 80025a6:	bf00      	nop
 80025a8:	40010000 	.word	0x40010000

080025ac <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80025ac:	6a03      	ldr	r3, [r0, #32]
 80025ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80025b2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80025b4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025b6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80025b8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80025ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80025bc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80025c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80025c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 80025ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80025ce:	688d      	ldr	r5, [r1, #8]
 80025d0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80025d4:	4d08      	ldr	r5, [pc, #32]	; (80025f8 <TIM_OC6_SetConfig+0x4c>)
 80025d6:	42a8      	cmp	r0, r5
 80025d8:	d003      	beq.n	80025e2 <TIM_OC6_SetConfig+0x36>
 80025da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025de:	42a8      	cmp	r0, r5
 80025e0:	d104      	bne.n	80025ec <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80025e2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80025e6:	694d      	ldr	r5, [r1, #20]
 80025e8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ec:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80025ee:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80025f0:	684b      	ldr	r3, [r1, #4]
 80025f2:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80025f4:	6202      	str	r2, [r0, #32]
 80025f6:	bd30      	pop	{r4, r5, pc}
 80025f8:	40010000 	.word	0x40010000

080025fc <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80025fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002600:	2b01      	cmp	r3, #1
{
 8002602:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002604:	d01c      	beq.n	8002640 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 8002606:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002608:	4d0e      	ldr	r5, [pc, #56]	; (8002644 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 800260a:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800260c:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800260e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002610:	d003      	beq.n	800261a <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8002612:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002616:	42aa      	cmp	r2, r5
 8002618:	d103      	bne.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800261a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800261e:	684d      	ldr	r5, [r1, #4]
 8002620:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002622:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002628:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 800262a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800262e:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002630:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 8002632:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 8002634:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8002636:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002638:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800263c:	4618      	mov	r0, r3
 800263e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002640:	2002      	movs	r0, #2
} 
 8002642:	bd30      	pop	{r4, r5, pc}
 8002644:	40010000 	.word	0x40010000

08002648 <HAL_TIM_PWM_ConfigChannel>:
{
 8002648:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800264a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800264e:	4604      	mov	r4, r0
 8002650:	460d      	mov	r5, r1
 8002652:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002654:	2b01      	cmp	r3, #1
 8002656:	d010      	beq.n	800267a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002658:	2301      	movs	r3, #1
  switch (Channel)
 800265a:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002660:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002664:	d043      	beq.n	80026ee <HAL_TIM_PWM_ConfigChannel+0xa6>
 8002666:	d809      	bhi.n	800267c <HAL_TIM_PWM_ConfigChannel+0x34>
 8002668:	b1fa      	cbz	r2, 80026aa <HAL_TIM_PWM_ConfigChannel+0x62>
 800266a:	2a04      	cmp	r2, #4
 800266c:	d02e      	beq.n	80026cc <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800266e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002670:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002672:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002676:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800267a:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800267c:	2a10      	cmp	r2, #16
 800267e:	d047      	beq.n	8002710 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8002680:	2a14      	cmp	r2, #20
 8002682:	d056      	beq.n	8002732 <HAL_TIM_PWM_ConfigChannel+0xea>
 8002684:	2a0c      	cmp	r2, #12
 8002686:	d1f2      	bne.n	800266e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002688:	6820      	ldr	r0, [r4, #0]
 800268a:	f7ff fea5 	bl	80023d8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800268e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8002690:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026a8:	e030      	b.n	800270c <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026aa:	6820      	ldr	r0, [r4, #0]
 80026ac:	f7ff fe02 	bl	80022b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026b0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026b2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	f042 0208 	orr.w	r2, r2, #8
 80026ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	f022 0204 	bic.w	r2, r2, #4
 80026c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80026c8:	619a      	str	r2, [r3, #24]
    break;
 80026ca:	e7d0      	b.n	800266e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026cc:	6820      	ldr	r0, [r4, #0]
 80026ce:	f7ff fe1f 	bl	8002310 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026d2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80026d4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026ec:	e7ec      	b.n	80026c8 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026ee:	6820      	ldr	r0, [r4, #0]
 80026f0:	f7ff fe40 	bl	8002374 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026f4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80026f6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	f042 0208 	orr.w	r2, r2, #8
 80026fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	f022 0204 	bic.w	r2, r2, #4
 8002706:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800270c:	61da      	str	r2, [r3, #28]
    break;
 800270e:	e7ae      	b.n	800266e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002710:	6820      	ldr	r0, [r4, #0]
 8002712:	f7ff ff23 	bl	800255c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002716:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002718:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800271a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800271c:	f042 0208 	orr.w	r2, r2, #8
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002722:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002724:	f022 0204 	bic.w	r2, r2, #4
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800272a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800272c:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800272e:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8002730:	e79d      	b.n	800266e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002732:	6820      	ldr	r0, [r4, #0]
 8002734:	f7ff ff3a 	bl	80025ac <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002738:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800273a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800273c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800273e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002742:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800274c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800274e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002752:	e7ec      	b.n	800272e <HAL_TIM_PWM_ConfigChannel+0xe6>

08002754 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002758:	9d06      	ldr	r5, [sp, #24]
 800275a:	4604      	mov	r4, r0
 800275c:	460f      	mov	r7, r1
 800275e:	4616      	mov	r6, r2
 8002760:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002762:	6821      	ldr	r1, [r4, #0]
 8002764:	69ca      	ldr	r2, [r1, #28]
 8002766:	ea37 0302 	bics.w	r3, r7, r2
 800276a:	bf0c      	ite	eq
 800276c:	2201      	moveq	r2, #1
 800276e:	2200      	movne	r2, #0
 8002770:	42b2      	cmp	r2, r6
 8002772:	d002      	beq.n	800277a <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002774:	2000      	movs	r0, #0
}
 8002776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800277a:	1c6b      	adds	r3, r5, #1
 800277c:	d0f2      	beq.n	8002764 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800277e:	b99d      	cbnz	r5, 80027a8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002780:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002782:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800278a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002794:	2320      	movs	r3, #32
 8002796:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800279a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800279e:	2300      	movs	r3, #0
 80027a0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80027a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80027a8:	f7fd ff14 	bl	80005d4 <HAL_GetTick>
 80027ac:	eba0 0008 	sub.w	r0, r0, r8
 80027b0:	4285      	cmp	r5, r0
 80027b2:	d8d6      	bhi.n	8002762 <UART_WaitOnFlagUntilTimeout+0xe>
 80027b4:	e7e4      	b.n	8002780 <UART_WaitOnFlagUntilTimeout+0x2c>
	...

080027b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80027bc:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027be:	69c3      	ldr	r3, [r0, #28]
 80027c0:	6921      	ldr	r1, [r4, #16]
 80027c2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80027c4:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027c6:	430a      	orrs	r2, r1
 80027c8:	6961      	ldr	r1, [r4, #20]
 80027ca:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80027cc:	4993      	ldr	r1, [pc, #588]	; (8002a1c <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027ce:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80027d0:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80027d2:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80027d4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027d6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80027d8:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027da:	686a      	ldr	r2, [r5, #4]
 80027dc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80027e0:	430a      	orrs	r2, r1
 80027e2:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80027e4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80027e6:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80027e8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80027ea:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80027ee:	430a      	orrs	r2, r1
 80027f0:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027f2:	4a8b      	ldr	r2, [pc, #556]	; (8002a20 <UART_SetConfig+0x268>)
 80027f4:	4295      	cmp	r5, r2
 80027f6:	d119      	bne.n	800282c <UART_SetConfig+0x74>
 80027f8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80027fc:	4989      	ldr	r1, [pc, #548]	; (8002a24 <UART_SetConfig+0x26c>)
 80027fe:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002802:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280a:	5c8a      	ldrb	r2, [r1, r2]
 800280c:	f040 80b3 	bne.w	8002976 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8002810:	2a08      	cmp	r2, #8
 8002812:	f200 80ad 	bhi.w	8002970 <UART_SetConfig+0x1b8>
 8002816:	e8df f012 	tbh	[pc, r2, lsl #1]
 800281a:	0026      	.short	0x0026
 800281c:	00e9007b 	.word	0x00e9007b
 8002820:	00f500ab 	.word	0x00f500ab
 8002824:	00ab00ab 	.word	0x00ab00ab
 8002828:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 800282c:	4a7e      	ldr	r2, [pc, #504]	; (8002a28 <UART_SetConfig+0x270>)
 800282e:	4295      	cmp	r5, r2
 8002830:	d107      	bne.n	8002842 <UART_SetConfig+0x8a>
 8002832:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002836:	497d      	ldr	r1, [pc, #500]	; (8002a2c <UART_SetConfig+0x274>)
 8002838:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800283c:	f002 020c 	and.w	r2, r2, #12
 8002840:	e7e1      	b.n	8002806 <UART_SetConfig+0x4e>
 8002842:	4a7b      	ldr	r2, [pc, #492]	; (8002a30 <UART_SetConfig+0x278>)
 8002844:	4295      	cmp	r5, r2
 8002846:	d12b      	bne.n	80028a0 <UART_SetConfig+0xe8>
 8002848:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 800284c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002850:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002854:	2a10      	cmp	r2, #16
 8002856:	f000 80d2 	beq.w	80029fe <UART_SetConfig+0x246>
 800285a:	d816      	bhi.n	800288a <UART_SetConfig+0xd2>
 800285c:	b9da      	cbnz	r2, 8002896 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800285e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002862:	f040 809f 	bne.w	80029a4 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002866:	f7fe fd05 	bl	8001274 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800286a:	6861      	ldr	r1, [r4, #4]
 800286c:	084a      	lsrs	r2, r1, #1
 800286e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002872:	fbb3 f3f1 	udiv	r3, r3, r1
 8002876:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002878:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 800287a:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800287e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002882:	6821      	ldr	r1, [r4, #0]
 8002884:	4313      	orrs	r3, r2
 8002886:	60cb      	str	r3, [r1, #12]
 8002888:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800288a:	2a20      	cmp	r2, #32
 800288c:	f000 80ab 	beq.w	80029e6 <UART_SetConfig+0x22e>
 8002890:	2a30      	cmp	r2, #48	; 0x30
 8002892:	f000 80ba 	beq.w	8002a0a <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800289a:	d069      	beq.n	8002970 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800289c:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 800289e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028a0:	4a64      	ldr	r2, [pc, #400]	; (8002a34 <UART_SetConfig+0x27c>)
 80028a2:	4295      	cmp	r5, r2
 80028a4:	d10e      	bne.n	80028c4 <UART_SetConfig+0x10c>
 80028a6:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 80028aa:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80028ae:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80028b2:	2a40      	cmp	r2, #64	; 0x40
 80028b4:	f000 80a3 	beq.w	80029fe <UART_SetConfig+0x246>
 80028b8:	d9d0      	bls.n	800285c <UART_SetConfig+0xa4>
 80028ba:	2a80      	cmp	r2, #128	; 0x80
 80028bc:	f000 8093 	beq.w	80029e6 <UART_SetConfig+0x22e>
 80028c0:	2ac0      	cmp	r2, #192	; 0xc0
 80028c2:	e7e6      	b.n	8002892 <UART_SetConfig+0xda>
 80028c4:	4a5c      	ldr	r2, [pc, #368]	; (8002a38 <UART_SetConfig+0x280>)
 80028c6:	4295      	cmp	r5, r2
 80028c8:	d110      	bne.n	80028ec <UART_SetConfig+0x134>
 80028ca:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 80028ce:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80028d2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80028d6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80028da:	f000 8090 	beq.w	80029fe <UART_SetConfig+0x246>
 80028de:	d9bd      	bls.n	800285c <UART_SetConfig+0xa4>
 80028e0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80028e4:	d07f      	beq.n	80029e6 <UART_SetConfig+0x22e>
 80028e6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80028ea:	e7d2      	b.n	8002892 <UART_SetConfig+0xda>
 80028ec:	4a53      	ldr	r2, [pc, #332]	; (8002a3c <UART_SetConfig+0x284>)
 80028ee:	4295      	cmp	r5, r2
 80028f0:	d117      	bne.n	8002922 <UART_SetConfig+0x16a>
 80028f2:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 80028f6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80028fa:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80028fe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002902:	d07c      	beq.n	80029fe <UART_SetConfig+0x246>
 8002904:	d807      	bhi.n	8002916 <UART_SetConfig+0x15e>
 8002906:	2a00      	cmp	r2, #0
 8002908:	d1c5      	bne.n	8002896 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800290a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290e:	d154      	bne.n	80029ba <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002910:	f7fe fcc0 	bl	8001294 <HAL_RCC_GetPCLK2Freq>
 8002914:	e7a9      	b.n	800286a <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002916:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800291a:	d064      	beq.n	80029e6 <UART_SetConfig+0x22e>
 800291c:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002920:	e7b7      	b.n	8002892 <UART_SetConfig+0xda>
 8002922:	4a47      	ldr	r2, [pc, #284]	; (8002a40 <UART_SetConfig+0x288>)
 8002924:	4295      	cmp	r5, r2
 8002926:	d10f      	bne.n	8002948 <UART_SetConfig+0x190>
 8002928:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800292c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002930:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002934:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002938:	d061      	beq.n	80029fe <UART_SetConfig+0x246>
 800293a:	d98f      	bls.n	800285c <UART_SetConfig+0xa4>
 800293c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002940:	d051      	beq.n	80029e6 <UART_SetConfig+0x22e>
 8002942:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002946:	e7a4      	b.n	8002892 <UART_SetConfig+0xda>
 8002948:	4a3e      	ldr	r2, [pc, #248]	; (8002a44 <UART_SetConfig+0x28c>)
 800294a:	4295      	cmp	r5, r2
 800294c:	d1a3      	bne.n	8002896 <UART_SetConfig+0xde>
 800294e:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8002952:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002956:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800295a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800295e:	d04e      	beq.n	80029fe <UART_SetConfig+0x246>
 8002960:	f67f af7c 	bls.w	800285c <UART_SetConfig+0xa4>
 8002964:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002968:	d03d      	beq.n	80029e6 <UART_SetConfig+0x22e>
 800296a:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 800296e:	e790      	b.n	8002892 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8002970:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002972:	2300      	movs	r3, #0
 8002974:	e781      	b.n	800287a <UART_SetConfig+0xc2>
    switch (clocksource)
 8002976:	2a08      	cmp	r2, #8
 8002978:	d890      	bhi.n	800289c <UART_SetConfig+0xe4>
 800297a:	a301      	add	r3, pc, #4	; (adr r3, 8002980 <UART_SetConfig+0x1c8>)
 800297c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002980:	080029a5 	.word	0x080029a5
 8002984:	080029bb 	.word	0x080029bb
 8002988:	080029c1 	.word	0x080029c1
 800298c:	0800289d 	.word	0x0800289d
 8002990:	080029d7 	.word	0x080029d7
 8002994:	0800289d 	.word	0x0800289d
 8002998:	0800289d 	.word	0x0800289d
 800299c:	0800289d 	.word	0x0800289d
 80029a0:	080029dd 	.word	0x080029dd
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029a4:	f7fe fc66 	bl	8001274 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029a8:	6863      	ldr	r3, [r4, #4]
 80029aa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80029ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80029b2:	b280      	uxth	r0, r0
 80029b4:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029b6:	2000      	movs	r0, #0
      break;
 80029b8:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029ba:	f7fe fc6b 	bl	8001294 <HAL_RCC_GetPCLK2Freq>
 80029be:	e7f3      	b.n	80029a8 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80029c0:	6862      	ldr	r2, [r4, #4]
 80029c2:	0853      	lsrs	r3, r2, #1
 80029c4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80029c8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	60eb      	str	r3, [r5, #12]
 80029d4:	e7ef      	b.n	80029b6 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029d6:	f7fe fb81 	bl	80010dc <HAL_RCC_GetSysClockFreq>
 80029da:	e7e5      	b.n	80029a8 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029dc:	6862      	ldr	r2, [r4, #4]
 80029de:	0853      	lsrs	r3, r2, #1
 80029e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80029e4:	e7f2      	b.n	80029cc <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ea:	d1e9      	bne.n	80029c0 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80029ec:	6860      	ldr	r0, [r4, #4]
 80029ee:	0843      	lsrs	r3, r0, #1
 80029f0:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80029f4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029f8:	fbb3 f3f0 	udiv	r3, r3, r0
 80029fc:	e73b      	b.n	8002876 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a02:	d1e8      	bne.n	80029d6 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a04:	f7fe fb6a 	bl	80010dc <HAL_RCC_GetSysClockFreq>
 8002a08:	e72f      	b.n	800286a <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0e:	d1e5      	bne.n	80029dc <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a10:	6860      	ldr	r0, [r4, #4]
 8002a12:	0843      	lsrs	r3, r0, #1
 8002a14:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a18:	e7ee      	b.n	80029f8 <UART_SetConfig+0x240>
 8002a1a:	bf00      	nop
 8002a1c:	efff69f3 	.word	0xefff69f3
 8002a20:	40011000 	.word	0x40011000
 8002a24:	08003da8 	.word	0x08003da8
 8002a28:	40004400 	.word	0x40004400
 8002a2c:	08003dac 	.word	0x08003dac
 8002a30:	40004800 	.word	0x40004800
 8002a34:	40004c00 	.word	0x40004c00
 8002a38:	40005000 	.word	0x40005000
 8002a3c:	40011400 	.word	0x40011400
 8002a40:	40007800 	.word	0x40007800
 8002a44:	40007c00 	.word	0x40007c00

08002a48 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a4a:	07da      	lsls	r2, r3, #31
{
 8002a4c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a4e:	d506      	bpl.n	8002a5e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a50:	6801      	ldr	r1, [r0, #0]
 8002a52:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002a54:	684a      	ldr	r2, [r1, #4]
 8002a56:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002a5a:	4322      	orrs	r2, r4
 8002a5c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a5e:	079c      	lsls	r4, r3, #30
 8002a60:	d506      	bpl.n	8002a70 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a62:	6801      	ldr	r1, [r0, #0]
 8002a64:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002a66:	684a      	ldr	r2, [r1, #4]
 8002a68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a6c:	4322      	orrs	r2, r4
 8002a6e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a70:	0759      	lsls	r1, r3, #29
 8002a72:	d506      	bpl.n	8002a82 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a74:	6801      	ldr	r1, [r0, #0]
 8002a76:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002a78:	684a      	ldr	r2, [r1, #4]
 8002a7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a7e:	4322      	orrs	r2, r4
 8002a80:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a82:	071a      	lsls	r2, r3, #28
 8002a84:	d506      	bpl.n	8002a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a86:	6801      	ldr	r1, [r0, #0]
 8002a88:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002a8a:	684a      	ldr	r2, [r1, #4]
 8002a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a90:	4322      	orrs	r2, r4
 8002a92:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a94:	06dc      	lsls	r4, r3, #27
 8002a96:	d506      	bpl.n	8002aa6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a98:	6801      	ldr	r1, [r0, #0]
 8002a9a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002a9c:	688a      	ldr	r2, [r1, #8]
 8002a9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aa2:	4322      	orrs	r2, r4
 8002aa4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aa6:	0699      	lsls	r1, r3, #26
 8002aa8:	d506      	bpl.n	8002ab8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002aaa:	6801      	ldr	r1, [r0, #0]
 8002aac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002aae:	688a      	ldr	r2, [r1, #8]
 8002ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ab4:	4322      	orrs	r2, r4
 8002ab6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ab8:	065a      	lsls	r2, r3, #25
 8002aba:	d510      	bpl.n	8002ade <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002abc:	6801      	ldr	r1, [r0, #0]
 8002abe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002ac0:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ac2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ac6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002aca:	ea42 0204 	orr.w	r2, r2, r4
 8002ace:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ad0:	d105      	bne.n	8002ade <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ad2:	684a      	ldr	r2, [r1, #4]
 8002ad4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ad6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002ada:	4322      	orrs	r2, r4
 8002adc:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ade:	061b      	lsls	r3, r3, #24
 8002ae0:	d506      	bpl.n	8002af0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ae2:	6802      	ldr	r2, [r0, #0]
 8002ae4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002ae6:	6853      	ldr	r3, [r2, #4]
 8002ae8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6053      	str	r3, [r2, #4]
 8002af0:	bd10      	pop	{r4, pc}

08002af2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002af2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af4:	2500      	movs	r5, #0
{
 8002af6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af8:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002afa:	f7fd fd6b 	bl	80005d4 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002afe:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002b00:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	0712      	lsls	r2, r2, #28
 8002b06:	d409      	bmi.n	8002b1c <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002b08:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b0a:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002b0c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002b10:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8002b14:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8002b18:	b003      	add	sp, #12
 8002b1a:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b1c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002b20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b24:	4620      	mov	r0, r4
 8002b26:	9200      	str	r2, [sp, #0]
 8002b28:	462a      	mov	r2, r5
 8002b2a:	f7ff fe13 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d0ea      	beq.n	8002b08 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002b32:	2003      	movs	r0, #3
 8002b34:	e7f0      	b.n	8002b18 <UART_CheckIdleState+0x26>

08002b36 <HAL_UART_Init>:
{
 8002b36:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002b38:	4604      	mov	r4, r0
 8002b3a:	b360      	cbz	r0, 8002b96 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002b3c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002b40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b44:	b91b      	cbnz	r3, 8002b4e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002b46:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002b4a:	f000 ff0d 	bl	8003968 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002b4e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002b50:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b52:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002b54:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002b58:	6813      	ldr	r3, [r2, #0]
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b60:	f7ff fe2a 	bl	80027b8 <UART_SetConfig>
 8002b64:	2801      	cmp	r0, #1
 8002b66:	d016      	beq.n	8002b96 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b6a:	b113      	cbz	r3, 8002b72 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7ff ff6b 	bl	8002a48 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b72:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002b74:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b84:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	f042 0201 	orr.w	r2, r2, #1
}
 8002b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002b90:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002b92:	f7ff bfae 	b.w	8002af2 <UART_CheckIdleState>
}
 8002b96:	2001      	movs	r0, #1
 8002b98:	bd10      	pop	{r4, pc}
	...

08002b9c <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <SDMMC_GetCmdResp2+0x48>)
 8002b9e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ba8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bac:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8002bae:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002bb2:	d314      	bcc.n	8002bde <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8002bb4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002bb6:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002bba:	d0f8      	beq.n	8002bae <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002bbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002bbe:	075b      	lsls	r3, r3, #29
 8002bc0:	d503      	bpl.n	8002bca <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002bc2:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002bc4:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8002bca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002bcc:	f013 0301 	ands.w	r3, r3, #1
 8002bd0:	d001      	beq.n	8002bd6 <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e7f6      	b.n	8002bc4 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8002bd6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002bda:	6382      	str	r2, [r0, #56]	; 0x38
 8002bdc:	e7f3      	b.n	8002bc6 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8002bde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002be2:	e7f0      	b.n	8002bc6 <SDMMC_GetCmdResp2+0x2a>
 8002be4:	2000000c 	.word	0x2000000c

08002be8 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <SDMMC_GetCmdResp3+0x40>)
 8002bea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002bf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bf8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8002bfa:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002bfe:	d30f      	bcc.n	8002c20 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8002c00:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002c02:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002c06:	d0f8      	beq.n	8002bfa <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002c08:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c0a:	f013 0304 	ands.w	r3, r3, #4
 8002c0e:	d003      	beq.n	8002c18 <SDMMC_GetCmdResp3+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002c10:	2304      	movs	r3, #4
 8002c12:	6383      	str	r3, [r0, #56]	; 0x38
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
 8002c14:	4618      	mov	r0, r3
 8002c16:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8002c18:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002c1c:	6382      	str	r2, [r0, #56]	; 0x38
 8002c1e:	e7f9      	b.n	8002c14 <SDMMC_GetCmdResp3+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8002c20:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2000000c 	.word	0x2000000c

08002c2c <SDMMC_Init>:
{
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	b510      	push	{r4, lr}
 8002c30:	ac03      	add	r4, sp, #12
 8002c32:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8002c36:	9904      	ldr	r1, [sp, #16]
 8002c38:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c3a:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8002c3c:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8002c3e:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c40:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 8002c44:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8002c46:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c48:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8002c4c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8002c4e:	9907      	ldr	r1, [sp, #28]
 8002c50:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8002c52:	9908      	ldr	r1, [sp, #32]
 8002c54:	430b      	orrs	r3, r1
}
 8002c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c5a:	4313      	orrs	r3, r2
}
 8002c5c:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c5e:	6043      	str	r3, [r0, #4]
}
 8002c60:	2000      	movs	r0, #0
 8002c62:	4770      	bx	lr

08002c64 <SDMMC_ReadFIFO>:
 8002c64:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8002c68:	4770      	bx	lr

08002c6a <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8002c6a:	680b      	ldr	r3, [r1, #0]
 8002c6c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8002c70:	2000      	movs	r0, #0
 8002c72:	4770      	bx	lr

08002c74 <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8002c74:	2303      	movs	r3, #3
 8002c76:	6003      	str	r3, [r0, #0]
}
 8002c78:	2000      	movs	r0, #0
 8002c7a:	4770      	bx	lr

08002c7c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8002c7c:	6800      	ldr	r0, [r0, #0]
}
 8002c7e:	f000 0003 	and.w	r0, r0, #3
 8002c82:	4770      	bx	lr

08002c84 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8002c84:	680b      	ldr	r3, [r1, #0]
{
 8002c86:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8002c88:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002c8a:	688c      	ldr	r4, [r1, #8]
 8002c8c:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002c8e:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002c90:	4323      	orrs	r3, r4
                       Command->Response         |\
 8002c92:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002c94:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8002c98:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8002c9a:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002c9c:	f022 020f 	bic.w	r2, r2, #15
                       Command->WaitForInterrupt |\
 8002ca0:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60c3      	str	r3, [r0, #12]
}
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	bd10      	pop	{r4, pc}

08002caa <SDMMC_GetResponse>:
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8002caa:	3014      	adds	r0, #20
{
 8002cac:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8002cae:	2300      	movs	r3, #0
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8002cb0:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8002cb2:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8002cb4:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8002cb6:	9b01      	ldr	r3, [sp, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
}  
 8002cba:	b002      	add	sp, #8
 8002cbc:	4770      	bx	lr
	...

08002cc0 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8002cc0:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <SDMMC_GetCmdResp1+0x114>)
{
 8002cc2:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8002cca:	fbb3 f3f4 	udiv	r3, r3, r4
 8002cce:	435a      	muls	r2, r3
    if (count-- == 0)
 8002cd0:	2a00      	cmp	r2, #0
 8002cd2:	d049      	beq.n	8002d68 <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8002cd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cd6:	3a01      	subs	r2, #1
 8002cd8:	f013 0f45 	tst.w	r3, #69	; 0x45
 8002cdc:	d0f8      	beq.n	8002cd0 <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002cde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ce0:	075c      	lsls	r4, r3, #29
 8002ce2:	d503      	bpl.n	8002cec <SDMMC_GetCmdResp1+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002ce4:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002ce6:	6383      	str	r3, [r0, #56]	; 0x38
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8002cec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cee:	f013 0301 	ands.w	r3, r3, #1
 8002cf2:	d001      	beq.n	8002cf8 <SDMMC_GetCmdResp1+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e7f6      	b.n	8002ce6 <SDMMC_GetCmdResp1+0x26>
  return (uint8_t)(SDMMCx->RESPCMD);
 8002cf8:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	4291      	cmp	r1, r2
 8002cfe:	d136      	bne.n	8002d6e <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8002d00:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8002d04:	4619      	mov	r1, r3
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8002d06:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8002d08:	f7ff ffcf 	bl	8002caa <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002d0c:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <SDMMC_GetCmdResp1+0x118>)
 8002d0e:	4003      	ands	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0e9      	beq.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002d14:	2800      	cmp	r0, #0
 8002d16:	db2c      	blt.n	8002d72 <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002d18:	0042      	lsls	r2, r0, #1
 8002d1a:	d42d      	bmi.n	8002d78 <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002d1c:	0084      	lsls	r4, r0, #2
 8002d1e:	d42d      	bmi.n	8002d7c <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002d20:	00c1      	lsls	r1, r0, #3
 8002d22:	d42d      	bmi.n	8002d80 <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002d24:	0102      	lsls	r2, r0, #4
 8002d26:	d42e      	bmi.n	8002d86 <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002d28:	0144      	lsls	r4, r0, #5
 8002d2a:	d42f      	bmi.n	8002d8c <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002d2c:	01c1      	lsls	r1, r0, #7
 8002d2e:	d430      	bmi.n	8002d92 <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002d30:	0202      	lsls	r2, r0, #8
 8002d32:	d431      	bmi.n	8002d98 <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002d34:	0244      	lsls	r4, r0, #9
 8002d36:	d432      	bmi.n	8002d9e <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002d38:	0281      	lsls	r1, r0, #10
 8002d3a:	d433      	bmi.n	8002da4 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002d3c:	02c2      	lsls	r2, r0, #11
 8002d3e:	d434      	bmi.n	8002daa <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002d40:	0344      	lsls	r4, r0, #13
 8002d42:	d435      	bmi.n	8002db0 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002d44:	0381      	lsls	r1, r0, #14
 8002d46:	d436      	bmi.n	8002db6 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002d48:	03c2      	lsls	r2, r0, #15
 8002d4a:	d437      	bmi.n	8002dbc <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002d4c:	0404      	lsls	r4, r0, #16
 8002d4e:	d438      	bmi.n	8002dc2 <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002d50:	0441      	lsls	r1, r0, #17
 8002d52:	d439      	bmi.n	8002dc8 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002d54:	0482      	lsls	r2, r0, #18
 8002d56:	d43a      	bmi.n	8002dce <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002d58:	f010 0f08 	tst.w	r0, #8
 8002d5c:	bf14      	ite	ne
 8002d5e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8002d62:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8002d66:	e7bf      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
      return SDMMC_ERROR_TIMEOUT;
 8002d68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d6c:	e7bc      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e7ba      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002d72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d76:	e7b7      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002d78:	2340      	movs	r3, #64	; 0x40
 8002d7a:	e7b5      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	e7b3      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d84:	e7b0      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d8a:	e7ad      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d90:	e7aa      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d96:	e7a7      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9c:	e7a4      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da2:	e7a1      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002da4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002da8:	e79e      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CC_ERR;
 8002daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dae:	e79b      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db4:	e798      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002db6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dba:	e795      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002dbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dc0:	e792      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002dc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dc6:	e78f      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002dc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dcc:	e78c      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_RESET;
 8002dce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dd2:	e789      	b.n	8002ce8 <SDMMC_GetCmdResp1+0x28>
 8002dd4:	2000000c 	.word	0x2000000c
 8002dd8:	fdffe008 	.word	0xfdffe008

08002ddc <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8002ddc:	680b      	ldr	r3, [r1, #0]
{
 8002dde:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8002de0:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8002de2:	684b      	ldr	r3, [r1, #4]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002de4:	68cc      	ldr	r4, [r1, #12]
  SDMMCx->DLEN = Data->DataLength;
 8002de6:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002de8:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002dea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002dec:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8002dee:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8002df0:	6949      	ldr	r1, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002df2:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferDir   |\
 8002df6:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8002df8:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002dfe:	2000      	movs	r0, #0
 8002e00:	bd10      	pop	{r4, pc}

08002e02 <SDMMC_CmdBlockLength>:
{
 8002e02:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002e04:	2340      	movs	r3, #64	; 0x40
{
 8002e06:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002e08:	2410      	movs	r4, #16
{
 8002e0a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002e0c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002e0e:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002e10:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002e12:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002e14:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002e1a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002e1c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002e1e:	f7ff ff31 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8002e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e26:	4621      	mov	r1, r4
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f7ff ff49 	bl	8002cc0 <SDMMC_GetCmdResp1>
}
 8002e2e:	b007      	add	sp, #28
 8002e30:	bd30      	pop	{r4, r5, pc}

08002e32 <SDMMC_CmdReadSingleBlock>:
{
 8002e32:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002e34:	2340      	movs	r3, #64	; 0x40
{
 8002e36:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002e38:	2411      	movs	r4, #17
{
 8002e3a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002e3c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002e3e:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002e40:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002e42:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002e44:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002e4a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002e4c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002e4e:	f7ff ff19 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4621      	mov	r1, r4
 8002e58:	4628      	mov	r0, r5
 8002e5a:	f7ff ff31 	bl	8002cc0 <SDMMC_GetCmdResp1>
}
 8002e5e:	b007      	add	sp, #28
 8002e60:	bd30      	pop	{r4, r5, pc}

08002e62 <SDMMC_CmdReadMultiBlock>:
{
 8002e62:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002e64:	2340      	movs	r3, #64	; 0x40
{
 8002e66:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002e68:	2412      	movs	r4, #18
{
 8002e6a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002e6c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002e6e:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002e70:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002e72:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002e74:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002e7a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002e7c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002e7e:	f7ff ff01 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8002e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e86:	4621      	mov	r1, r4
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f7ff ff19 	bl	8002cc0 <SDMMC_GetCmdResp1>
}
 8002e8e:	b007      	add	sp, #28
 8002e90:	bd30      	pop	{r4, r5, pc}

08002e92 <SDMMC_CmdWriteSingleBlock>:
{
 8002e92:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002e94:	2340      	movs	r3, #64	; 0x40
{
 8002e96:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002e98:	2418      	movs	r4, #24
{
 8002e9a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002e9c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002e9e:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002ea0:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002ea2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002ea4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002eaa:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002eac:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002eae:	f7ff fee9 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8002eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	4628      	mov	r0, r5
 8002eba:	f7ff ff01 	bl	8002cc0 <SDMMC_GetCmdResp1>
}
 8002ebe:	b007      	add	sp, #28
 8002ec0:	bd30      	pop	{r4, r5, pc}

08002ec2 <SDMMC_CmdWriteMultiBlock>:
{
 8002ec2:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002ec4:	2340      	movs	r3, #64	; 0x40
{
 8002ec6:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002ec8:	2419      	movs	r4, #25
{
 8002eca:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002ecc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002ece:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002ed0:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002ed2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002ed4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002eda:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002edc:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002ede:	f7ff fed1 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8002ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	4628      	mov	r0, r5
 8002eea:	f7ff fee9 	bl	8002cc0 <SDMMC_GetCmdResp1>
}
 8002eee:	b007      	add	sp, #28
 8002ef0:	bd30      	pop	{r4, r5, pc}
	...

08002ef4 <SDMMC_CmdStopTransfer>:
{
 8002ef4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 8002ef6:	2300      	movs	r3, #0
{
 8002ef8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002efa:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002efc:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 8002efe:	9301      	str	r3, [sp, #4]
{
 8002f00:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002f02:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002f08:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002f0a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002f0c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002f0e:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002f10:	f7ff feb8 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8002f14:	4a03      	ldr	r2, [pc, #12]	; (8002f24 <SDMMC_CmdStopTransfer+0x30>)
 8002f16:	4621      	mov	r1, r4
 8002f18:	4628      	mov	r0, r5
 8002f1a:	f7ff fed1 	bl	8002cc0 <SDMMC_GetCmdResp1>
}
 8002f1e:	b007      	add	sp, #28
 8002f20:	bd30      	pop	{r4, r5, pc}
 8002f22:	bf00      	nop
 8002f24:	05f5e100 	.word	0x05f5e100

08002f28 <SDMMC_CmdSelDesel>:
{
 8002f28:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002f2a:	2340      	movs	r3, #64	; 0x40
{
 8002f2c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002f2e:	2407      	movs	r4, #7
{
 8002f30:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002f32:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002f34:	2300      	movs	r3, #0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002f36:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002f38:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002f3a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002f40:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002f42:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002f44:	f7ff fe9e 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	4628      	mov	r0, r5
 8002f50:	f7ff feb6 	bl	8002cc0 <SDMMC_GetCmdResp1>
}
 8002f54:	b007      	add	sp, #28
 8002f56:	bd30      	pop	{r4, r5, pc}

08002f58 <SDMMC_CmdGoIdleState>:
{
 8002f58:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 8002f5a:	2300      	movs	r3, #0
{
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8002f60:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002f62:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002f64:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8002f66:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002f68:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f6e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002f70:	f7ff fe88 	bl	8002c84 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <SDMMC_CmdGoIdleState+0x4c>)
 8002f76:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002f80:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f84:	4353      	muls	r3, r2
    if (count-- == 0)
 8002f86:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002f8a:	d308      	bcc.n	8002f9e <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8002f8c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002f8e:	0612      	lsls	r2, r2, #24
 8002f90:	d5f9      	bpl.n	8002f86 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8002f92:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 8002f96:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8002f98:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002f9a:	b006      	add	sp, #24
 8002f9c:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8002f9e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8002fa2:	e7fa      	b.n	8002f9a <SDMMC_CmdGoIdleState+0x42>
 8002fa4:	2000000c 	.word	0x2000000c

08002fa8 <SDMMC_CmdOperCond>:
{
 8002fa8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002faa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 8002fae:	b086      	sub	sp, #24
 8002fb0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002fb2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002fb4:	2308      	movs	r3, #8
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002fb6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002fb8:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002fba:	2340      	movs	r3, #64	; 0x40
 8002fbc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fc6:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002fc8:	f7ff fe5c 	bl	8002c84 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <SDMMC_CmdOperCond+0x6c>)
 8002fce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8002fd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fdc:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8002fde:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002fe2:	d314      	bcc.n	800300e <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8002fe4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002fe6:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002fea:	d0f8      	beq.n	8002fde <SDMMC_CmdOperCond+0x36>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002fec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002fee:	f012 0204 	ands.w	r2, r2, #4
 8002ff2:	d004      	beq.n	8002ffe <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8002ff4:	2340      	movs	r3, #64	; 0x40
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002ff6:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8002ff8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002ffa:	b006      	add	sp, #24
 8002ffc:	bd10      	pop	{r4, pc}
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8002ffe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003000:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003004:	d0f9      	beq.n	8002ffa <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8003006:	2340      	movs	r3, #64	; 0x40
  }
  
  return SDMMC_ERROR_NONE;
 8003008:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800300a:	63a3      	str	r3, [r4, #56]	; 0x38
 800300c:	e7f5      	b.n	8002ffa <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 800300e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003012:	e7f2      	b.n	8002ffa <SDMMC_CmdOperCond+0x52>
 8003014:	2000000c 	.word	0x2000000c

08003018 <SDMMC_CmdAppCommand>:
{
 8003018:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800301a:	2340      	movs	r3, #64	; 0x40
{
 800301c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800301e:	2437      	movs	r4, #55	; 0x37
{
 8003020:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003022:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003024:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003026:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003028:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800302a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800302c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003030:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003032:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003034:	f7ff fe26 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4621      	mov	r1, r4
 800303e:	4628      	mov	r0, r5
 8003040:	f7ff fe3e 	bl	8002cc0 <SDMMC_GetCmdResp1>
}
 8003044:	b007      	add	sp, #28
 8003046:	bd30      	pop	{r4, r5, pc}

08003048 <SDMMC_CmdAppOperCommand>:
{
 8003048:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800304a:	2329      	movs	r3, #41	; 0x29
{
 800304c:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800304e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8003052:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003054:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003056:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003058:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800305c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800305e:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003060:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003062:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003064:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800306a:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800306c:	f7ff fe0a 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8003070:	4620      	mov	r0, r4
 8003072:	f7ff fdb9 	bl	8002be8 <SDMMC_GetCmdResp3>
}
 8003076:	b006      	add	sp, #24
 8003078:	bd10      	pop	{r4, pc}

0800307a <SDMMC_CmdSendSCR>:
{
 800307a:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800307c:	2300      	movs	r3, #0
{
 800307e:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003080:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003082:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 8003084:	9301      	str	r3, [sp, #4]
{
 8003086:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003088:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800308a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800308e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003090:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003092:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003094:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003096:	f7ff fdf5 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4621      	mov	r1, r4
 80030a0:	4628      	mov	r0, r5
 80030a2:	f7ff fe0d 	bl	8002cc0 <SDMMC_GetCmdResp1>
}
 80030a6:	b007      	add	sp, #28
 80030a8:	bd30      	pop	{r4, r5, pc}

080030aa <SDMMC_CmdSendCID>:
{
 80030aa:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 80030ac:	2300      	movs	r3, #0
{
 80030ae:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80030b0:	2202      	movs	r2, #2
{
 80030b2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 80030b4:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80030b6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80030b8:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80030ba:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80030bc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80030be:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80030c2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80030c4:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80030c6:	f7ff fddd 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7ff fd66 	bl	8002b9c <SDMMC_GetCmdResp2>
}
 80030d0:	b006      	add	sp, #24
 80030d2:	bd10      	pop	{r4, pc}

080030d4 <SDMMC_CmdSendCSD>:
{
 80030d4:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80030d6:	2309      	movs	r3, #9
{
 80030d8:	b086      	sub	sp, #24
 80030da:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80030dc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80030de:	23c0      	movs	r3, #192	; 0xc0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80030e0:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80030e2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80030e4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80030e6:	2300      	movs	r3, #0
 80030e8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80030ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ee:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80030f0:	f7ff fdc8 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80030f4:	4620      	mov	r0, r4
 80030f6:	f7ff fd51 	bl	8002b9c <SDMMC_GetCmdResp2>
}
 80030fa:	b006      	add	sp, #24
 80030fc:	bd10      	pop	{r4, pc}
	...

08003100 <SDMMC_CmdSetRelAdd>:
{
 8003100:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 8003102:	2300      	movs	r3, #0
{
 8003104:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003106:	2203      	movs	r2, #3
{
 8003108:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0;
 800310a:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800310c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800310e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003110:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003112:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003114:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003118:	9203      	str	r2, [sp, #12]
{
 800311a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800311c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800311e:	f7ff fdb1 	bl	8002c84 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <SDMMC_CmdSetRelAdd+0xa4>)
 8003124:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	fbb3 f2f2 	udiv	r2, r3, r2
 800312e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003132:	4353      	muls	r3, r2
    if (count-- == 0)
 8003134:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003138:	d32b      	bcc.n	8003192 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800313a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800313c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003140:	d0f8      	beq.n	8003134 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003144:	075a      	lsls	r2, r3, #29
 8003146:	d503      	bpl.n	8003150 <SDMMC_CmdSetRelAdd+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003148:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800314a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800314c:	b007      	add	sp, #28
 800314e:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003152:	f011 0101 	ands.w	r1, r1, #1
 8003156:	d001      	beq.n	800315c <SDMMC_CmdSetRelAdd+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003158:	2001      	movs	r0, #1
 800315a:	e7f6      	b.n	800314a <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDMMCx->RESPCMD);
 800315c:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b03      	cmp	r3, #3
 8003162:	d119      	bne.n	8003198 <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8003164:	f240 53ff 	movw	r3, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8003168:	4620      	mov	r0, r4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800316a:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800316c:	f7ff fd9d 	bl	8002caa <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003170:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8003174:	d103      	bne.n	800317e <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003176:	0c00      	lsrs	r0, r0, #16
 8003178:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 800317a:	4618      	mov	r0, r3
 800317c:	e7e6      	b.n	800314c <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800317e:	0443      	lsls	r3, r0, #17
 8003180:	d40c      	bmi.n	800319c <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003182:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003186:	bf14      	ite	ne
 8003188:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800318c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8003190:	e7dc      	b.n	800314c <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8003192:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003196:	e7d9      	b.n	800314c <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003198:	2001      	movs	r0, #1
 800319a:	e7d7      	b.n	800314c <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800319c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031a0:	e7d4      	b.n	800314c <SDMMC_CmdSetRelAdd+0x4c>
 80031a2:	bf00      	nop
 80031a4:	2000000c 	.word	0x2000000c

080031a8 <SDMMC_CmdSendStatus>:
{
 80031a8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80031aa:	2340      	movs	r3, #64	; 0x40
{
 80031ac:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80031ae:	240d      	movs	r4, #13
{
 80031b0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80031b2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80031b4:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80031b6:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80031b8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80031ba:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80031bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80031c0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80031c2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80031c4:	f7ff fd5e 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80031c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031cc:	4621      	mov	r1, r4
 80031ce:	4628      	mov	r0, r5
 80031d0:	f7ff fd76 	bl	8002cc0 <SDMMC_GetCmdResp1>
}
 80031d4:	b007      	add	sp, #28
 80031d6:	bd30      	pop	{r4, r5, pc}

080031d8 <SDMMC_CmdSwitch>:
{
 80031d8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80031da:	2340      	movs	r3, #64	; 0x40
{
 80031dc:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80031de:	2406      	movs	r4, #6
{
 80031e0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80031e2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80031e4:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = Argument;
 80031e6:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80031e8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80031ea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80031ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80031f0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80031f2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80031f4:	f7ff fd46 	bl	8002c84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4621      	mov	r1, r4
 80031fe:	4628      	mov	r0, r5
 8003200:	f7ff fd5e 	bl	8002cc0 <SDMMC_GetCmdResp1>
}
 8003204:	b007      	add	sp, #28
 8003206:	bd30      	pop	{r4, r5, pc}

08003208 <SDMMC_CmdBusWidth>:
 8003208:	f7ff bfe6 	b.w	80031d8 <SDMMC_CmdSwitch>

0800320c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <FATFS_LinkDriverEx+0x40>)
{
 800320e:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8003210:	7a5d      	ldrb	r5, [r3, #9]
 8003212:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8003216:	b9b5      	cbnz	r5, 8003246 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003218:	7a5d      	ldrb	r5, [r3, #9]
 800321a:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800321c:	7a5d      	ldrb	r5, [r3, #9]
 800321e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8003222:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8003224:	7a58      	ldrb	r0, [r3, #9]
 8003226:	4418      	add	r0, r3
 8003228:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800322a:	7a5a      	ldrb	r2, [r3, #9]
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8003230:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8003232:	b2c0      	uxtb	r0, r0
 8003234:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 8003236:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8003238:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 800323a:	4620      	mov	r0, r4
    path[1] = ':';
 800323c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800323e:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8003240:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 8003242:	708b      	strb	r3, [r1, #2]
 8003244:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8003246:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8003248:	bd30      	pop	{r4, r5, pc}
 800324a:	bf00      	nop
 800324c:	2000002c 	.word	0x2000002c

08003250 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8003250:	2200      	movs	r2, #0
 8003252:	f7ff bfdb 	b.w	800320c <FATFS_LinkDriverEx>
	...

08003258 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003258:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	460a      	mov	r2, r1
 8003260:	4601      	mov	r1, r0
 8003262:	4804      	ldr	r0, [pc, #16]	; (8003274 <BSP_SD_ReadBlocks+0x1c>)
 8003264:	f7fe fb39 	bl	80018da <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 8003268:	3000      	adds	r0, #0
 800326a:	bf18      	it	ne
 800326c:	2001      	movne	r0, #1
 800326e:	b003      	add	sp, #12
 8003270:	f85d fb04 	ldr.w	pc, [sp], #4
 8003274:	20000554 	.word	0x20000554

08003278 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003278:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	460a      	mov	r2, r1
 8003280:	4601      	mov	r1, r0
 8003282:	4804      	ldr	r0, [pc, #16]	; (8003294 <BSP_SD_WriteBlocks+0x1c>)
 8003284:	f7fe fc06 	bl	8001a94 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 8003288:	3000      	adds	r0, #0
 800328a:	bf18      	it	ne
 800328c:	2001      	movne	r0, #1
 800328e:	b003      	add	sp, #12
 8003290:	f85d fb04 	ldr.w	pc, [sp], #4
 8003294:	20000554 	.word	0x20000554

08003298 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003298:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800329a:	4803      	ldr	r0, [pc, #12]	; (80032a8 <BSP_SD_GetCardState+0x10>)
 800329c:	f7fe ff35 	bl	800210a <HAL_SD_GetCardState>
}
 80032a0:	3804      	subs	r0, #4
 80032a2:	bf18      	it	ne
 80032a4:	2001      	movne	r0, #1
 80032a6:	bd08      	pop	{r3, pc}
 80032a8:	20000554 	.word	0x20000554

080032ac <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80032ac:	4601      	mov	r1, r0
 80032ae:	4801      	ldr	r0, [pc, #4]	; (80032b4 <BSP_SD_GetCardInfo+0x8>)
 80032b0:	f7fe be95 	b.w	8001fde <HAL_SD_GetCardInfo>
 80032b4:	20000554 	.word	0x20000554

080032b8 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80032b8:	2301      	movs	r3, #1
{
 80032ba:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 80032bc:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80032c0:	f000 f82c 	bl	800331c <BSP_PlatformIsDetected>
 80032c4:	b908      	cbnz	r0, 80032ca <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 80032c6:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 80032ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80032ce:	b003      	add	sp, #12
 80032d0:	f85d fb04 	ldr.w	pc, [sp], #4

080032d4 <BSP_SD_Init>:
{
 80032d4:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80032d6:	f7ff ffef 	bl	80032b8 <BSP_SD_IsDetected>
 80032da:	2801      	cmp	r0, #1
 80032dc:	d10c      	bne.n	80032f8 <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 80032de:	4807      	ldr	r0, [pc, #28]	; (80032fc <BSP_SD_Init+0x28>)
 80032e0:	f7fe fe63 	bl	8001faa <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80032e4:	b948      	cbnz	r0, 80032fa <BSP_SD_Init+0x26>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80032e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032ea:	4804      	ldr	r0, [pc, #16]	; (80032fc <BSP_SD_Init+0x28>)
 80032ec:	f7fe fe89 	bl	8002002 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 80032f0:	3000      	adds	r0, #0
 80032f2:	bf18      	it	ne
 80032f4:	2001      	movne	r0, #1
 80032f6:	bd08      	pop	{r3, pc}
 80032f8:	2002      	movs	r0, #2
}
 80032fa:	bd08      	pop	{r3, pc}
 80032fc:	20000554 	.word	0x20000554

08003300 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003300:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003302:	4903      	ldr	r1, [pc, #12]	; (8003310 <MX_FATFS_Init+0x10>)
 8003304:	4803      	ldr	r0, [pc, #12]	; (8003314 <MX_FATFS_Init+0x14>)
 8003306:	f7ff ffa3 	bl	8003250 <FATFS_LinkDriver>
 800330a:	4b03      	ldr	r3, [pc, #12]	; (8003318 <MX_FATFS_Init+0x18>)
 800330c:	7018      	strb	r0, [r3, #0]
 800330e:	bd08      	pop	{r3, pc}
 8003310:	2000003d 	.word	0x2000003d
 8003314:	08003dbc 	.word	0x08003dbc
 8003318:	2000003c 	.word	0x2000003c

0800331c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800331c:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800331e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003322:	4803      	ldr	r0, [pc, #12]	; (8003330 <BSP_PlatformIsDetected+0x14>)
 8003324:	f7fd fab8 	bl	8000898 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 8003328:	fab0 f080 	clz	r0, r0
 800332c:	0940      	lsrs	r0, r0, #5
 800332e:	bd08      	pop	{r3, pc}
 8003330:	40020000 	.word	0x40020000

08003334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003334:	b510      	push	{r4, lr}
 8003336:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003338:	2234      	movs	r2, #52	; 0x34
 800333a:	2100      	movs	r1, #0
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800333c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800333e:	a807      	add	r0, sp, #28
 8003340:	f000 fc10 	bl	8003b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003344:	2214      	movs	r2, #20
 8003346:	2100      	movs	r1, #0
 8003348:	a802      	add	r0, sp, #8
 800334a:	f000 fc0b 	bl	8003b64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800334e:	2290      	movs	r2, #144	; 0x90
 8003350:	2100      	movs	r1, #0
 8003352:	a814      	add	r0, sp, #80	; 0x50
 8003354:	f000 fc06 	bl	8003b64 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003358:	4b24      	ldr	r3, [pc, #144]	; (80033ec <SystemClock_Config+0xb8>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800335a:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800335c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <SystemClock_Config+0xbc>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800337a:	9407      	str	r4, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800337c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003380:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003382:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003388:	2301      	movs	r3, #1
 800338a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800338c:	2310      	movs	r3, #16
 800338e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003390:	2300      	movs	r3, #0
 8003392:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003394:	2308      	movs	r3, #8
 8003396:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003398:	23d8      	movs	r3, #216	; 0xd8
 800339a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800339c:	2309      	movs	r3, #9
 800339e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033a0:	f7fd fd08 	bl	8000db4 <HAL_RCC_OscConfig>
 80033a4:	b100      	cbz	r0, 80033a8 <SystemClock_Config+0x74>
 80033a6:	e7fe      	b.n	80033a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80033a8:	f7fd fccc 	bl	8000d44 <HAL_PWREx_EnableOverDrive>
 80033ac:	b100      	cbz	r0, 80033b0 <SystemClock_Config+0x7c>
 80033ae:	e7fe      	b.n	80033ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033b0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033b2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80033b4:	2107      	movs	r1, #7
 80033b6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033b8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033be:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033c0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80033c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c6:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80033c8:	f7fd feb6 	bl	8001138 <HAL_RCC_ClockConfig>
 80033cc:	b100      	cbz	r0, 80033d0 <SystemClock_Config+0x9c>
 80033ce:	e7fe      	b.n	80033ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <SystemClock_Config+0xc0>)
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033d2:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80033d4:	9027      	str	r0, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80033d6:	9028      	str	r0, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80033d8:	9033      	str	r0, [sp, #204]	; 0xcc
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80033da:	9034      	str	r0, [sp, #208]	; 0xd0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033dc:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80033de:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033e0:	f7fd ff68 	bl	80012b4 <HAL_RCCEx_PeriphCLKConfig>
 80033e4:	b100      	cbz	r0, 80033e8 <SystemClock_Config+0xb4>
 80033e6:	e7fe      	b.n	80033e6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
  }
}
 80033e8:	b038      	add	sp, #224	; 0xe0
 80033ea:	bd10      	pop	{r4, pc}
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40007000 	.word	0x40007000
 80033f4:	00a00340 	.word	0x00a00340

080033f8 <main>:
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b092      	sub	sp, #72	; 0x48
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003400:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003404:	4ba0      	ldr	r3, [pc, #640]	; (8003688 <main+0x290>)
 8003406:	2100      	movs	r1, #0
 8003408:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003412:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003414:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003418:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800341c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003420:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003424:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003428:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800342c:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003430:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8003434:	07a5      	lsls	r5, r4, #30
 8003436:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003438:	ea02 0e06 	and.w	lr, r2, r6
 800343c:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800343e:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003440:	ea40 070e 	orr.w	r7, r0, lr
      } while (ways--);
 8003444:	3901      	subs	r1, #1
 8003446:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800344a:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 800344e:	1c4f      	adds	r7, r1, #1
 8003450:	d1f6      	bne.n	8003440 <main+0x48>
 8003452:	3a20      	subs	r2, #32
    } while(sets--);
 8003454:	f112 0f20 	cmn.w	r2, #32
 8003458:	d1ee      	bne.n	8003438 <main+0x40>
 800345a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003464:	615a      	str	r2, [r3, #20]
 8003466:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800346a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800346e:	f7fd f88f 	bl	8000590 <HAL_Init>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003472:	2400      	movs	r4, #0
  SystemClock_Config();
 8003474:	f7ff ff5e 	bl	8003334 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	2214      	movs	r2, #20
 800347a:	2100      	movs	r1, #0
 800347c:	a80b      	add	r0, sp, #44	; 0x2c
 800347e:	f000 fb71 	bl	8003b64 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003482:	4b82      	ldr	r3, [pc, #520]	; (800368c <main+0x294>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8003484:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003488:	4881      	ldr	r0, [pc, #516]	; (8003690 <main+0x298>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800348a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348c:	f042 0202 	orr.w	r2, r2, #2
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
 8003492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003494:	f002 0202 	and.w	r2, r2, #2
 8003498:	9200      	str	r2, [sp, #0]
 800349a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800349c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800349e:	f042 0208 	orr.w	r2, r2, #8
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
 80034a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a6:	f002 0208 	and.w	r2, r2, #8
 80034aa:	9201      	str	r2, [sp, #4]
 80034ac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b0:	f042 0204 	orr.w	r2, r2, #4
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
 80034b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b8:	f002 0204 	and.w	r2, r2, #4
 80034bc:	9202      	str	r2, [sp, #8]
 80034be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80034c8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	9303      	str	r3, [sp, #12]
 80034d2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80034d4:	f7fd f9e6 	bl	80008a4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034d8:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034da:	a90b      	add	r1, sp, #44	; 0x2c
 80034dc:	486d      	ldr	r0, [pc, #436]	; (8003694 <main+0x29c>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034de:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034e0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e4:	f7fd f8ee 	bl	80006c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80034e8:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ea:	a90b      	add	r1, sp, #44	; 0x2c
 80034ec:	4869      	ldr	r0, [pc, #420]	; (8003694 <main+0x29c>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80034ee:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80034f6:	2303      	movs	r3, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80034fa:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034fc:	f7fd f8e2 	bl	80006c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003500:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003504:	a90b      	add	r1, sp, #44	; 0x2c
 8003506:	4862      	ldr	r0, [pc, #392]	; (8003690 <main+0x298>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003508:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003512:	f7fd f8d7 	bl	80006c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351a:	a90b      	add	r1, sp, #44	; 0x2c
 800351c:	485c      	ldr	r0, [pc, #368]	; (8003690 <main+0x298>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800351e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003520:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003524:	f7fd f8ce 	bl	80006c4 <HAL_GPIO_Init>
  hjpeg.Instance = JPEG;
 8003528:	485b      	ldr	r0, [pc, #364]	; (8003698 <main+0x2a0>)
 800352a:	4b5c      	ldr	r3, [pc, #368]	; (800369c <main+0x2a4>)
 800352c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800352e:	f7fd facd 	bl	8000acc <HAL_JPEG_Init>
 8003532:	4604      	mov	r4, r0
 8003534:	b100      	cbz	r0, 8003538 <main+0x140>
 8003536:	e7fe      	b.n	8003536 <main+0x13e>
  hsd1.Instance = SDMMC1;
 8003538:	4b59      	ldr	r3, [pc, #356]	; (80036a0 <main+0x2a8>)
 800353a:	4a5a      	ldr	r2, [pc, #360]	; (80036a4 <main+0x2ac>)
  htim1.Instance = TIM1;
 800353c:	4d5a      	ldr	r5, [pc, #360]	; (80036a8 <main+0x2b0>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800353e:	60d8      	str	r0, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003540:	6118      	str	r0, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003542:	6158      	str	r0, [r3, #20]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003544:	e883 0014 	stmia.w	r3, {r2, r4}
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_ENABLE;
 8003548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800354c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockDiv = 10;
 800354e:	220a      	movs	r2, #10
 8003550:	619a      	str	r2, [r3, #24]
  MX_FATFS_Init();
 8003552:	f7ff fed5 	bl	8003300 <MX_FATFS_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003556:	2210      	movs	r2, #16
 8003558:	4621      	mov	r1, r4
 800355a:	a80b      	add	r0, sp, #44	; 0x2c
 800355c:	f000 fb02 	bl	8003b64 <memset>
  htim1.Instance = TIM1;
 8003560:	4b52      	ldr	r3, [pc, #328]	; (80036ac <main+0x2b4>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003562:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003564:	9407      	str	r4, [sp, #28]
 8003566:	9408      	str	r4, [sp, #32]
 8003568:	9409      	str	r4, [sp, #36]	; 0x24
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356a:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 800356c:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800356e:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8003570:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003572:	61ac      	str	r4, [r5, #24]
  htim1.Init.Prescaler = 0;
 8003574:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003578:	f7fe fe68 	bl	800224c <HAL_TIM_Base_Init>
 800357c:	b100      	cbz	r0, 8003580 <main+0x188>
 800357e:	e7fe      	b.n	800357e <main+0x186>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003584:	a90b      	add	r1, sp, #44	; 0x2c
 8003586:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003588:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800358a:	f7fe ff59 	bl	8002440 <HAL_TIM_ConfigClockSource>
 800358e:	b100      	cbz	r0, 8003592 <main+0x19a>
 8003590:	e7fe      	b.n	8003590 <main+0x198>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003592:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003594:	a907      	add	r1, sp, #28
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003596:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003598:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800359a:	4628      	mov	r0, r5
 800359c:	f7ff f82e 	bl	80025fc <HAL_TIMEx_MasterConfigSynchronization>
 80035a0:	b100      	cbz	r0, 80035a4 <main+0x1ac>
 80035a2:	e7fe      	b.n	80035a2 <main+0x1aa>
  huart3.Instance = USART3;
 80035a4:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <main+0x2b8>)
  huart3.Init.BaudRate = 115200;
 80035a6:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 80035aa:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <main+0x2bc>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035ac:	240c      	movs	r4, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035ae:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035b0:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035b2:	6118      	str	r0, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035b4:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035b6:	61d8      	str	r0, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035b8:	6218      	str	r0, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035ba:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035bc:	4618      	mov	r0, r3
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035be:	615c      	str	r4, [r3, #20]
  huart3.Init.BaudRate = 115200;
 80035c0:	e883 0024 	stmia.w	r3, {r2, r5}
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035c4:	f7ff fab7 	bl	8002b36 <HAL_UART_Init>
 80035c8:	b100      	cbz	r0, 80035cc <main+0x1d4>
 80035ca:	e7fe      	b.n	80035ca <main+0x1d2>
  huart4.Instance = UART4;
 80035cc:	4b3a      	ldr	r3, [pc, #232]	; (80036b8 <main+0x2c0>)
 80035ce:	4a3b      	ldr	r2, [pc, #236]	; (80036bc <main+0x2c4>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80035d0:	6098      	str	r0, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80035d2:	60d8      	str	r0, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80035d4:	6118      	str	r0, [r3, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035d6:	6198      	str	r0, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80035d8:	61d8      	str	r0, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035da:	6218      	str	r0, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035dc:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80035de:	4618      	mov	r0, r3
  huart4.Init.Mode = UART_MODE_TX_RX;
 80035e0:	615c      	str	r4, [r3, #20]
  huart4.Init.BaudRate = 115200;
 80035e2:	e883 0024 	stmia.w	r3, {r2, r5}
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80035e6:	f7ff faa6 	bl	8002b36 <HAL_UART_Init>
 80035ea:	b100      	cbz	r0, 80035ee <main+0x1f6>
 80035ec:	e7fe      	b.n	80035ec <main+0x1f4>
  huart1.Instance = USART1;
 80035ee:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <main+0x2c8>)
 80035f0:	4a34      	ldr	r2, [pc, #208]	; (80036c4 <main+0x2cc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035f2:	6098      	str	r0, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035f4:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035f6:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035f8:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035fa:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035fc:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035fe:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003600:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003602:	615c      	str	r4, [r3, #20]
  huart1.Init.BaudRate = 115200;
 8003604:	e883 0024 	stmia.w	r3, {r2, r5}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003608:	f7ff fa95 	bl	8002b36 <HAL_UART_Init>
 800360c:	4604      	mov	r4, r0
 800360e:	b100      	cbz	r0, 8003612 <main+0x21a>
 8003610:	e7fe      	b.n	8003610 <main+0x218>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003612:	4601      	mov	r1, r0
 8003614:	2210      	movs	r2, #16
 8003616:	a807      	add	r0, sp, #28
 8003618:	f000 faa4 	bl	8003b64 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800361c:	221c      	movs	r2, #28
 800361e:	4621      	mov	r1, r4
 8003620:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003622:	9404      	str	r4, [sp, #16]
 8003624:	9405      	str	r4, [sp, #20]
 8003626:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003628:	f000 fa9c 	bl	8003b64 <memset>
  htim4.Instance = TIM4;
 800362c:	4826      	ldr	r0, [pc, #152]	; (80036c8 <main+0x2d0>)
 800362e:	4b27      	ldr	r3, [pc, #156]	; (80036cc <main+0x2d4>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003630:	6084      	str	r4, [r0, #8]
  htim4.Init.Period = 0;
 8003632:	60c4      	str	r4, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003634:	6104      	str	r4, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003636:	6184      	str	r4, [r0, #24]
  htim4.Init.Prescaler = 0;
 8003638:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800363c:	f7fe fe06 	bl	800224c <HAL_TIM_Base_Init>
 8003640:	b100      	cbz	r0, 8003644 <main+0x24c>
 8003642:	e7fe      	b.n	8003642 <main+0x24a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003648:	a907      	add	r1, sp, #28
 800364a:	481f      	ldr	r0, [pc, #124]	; (80036c8 <main+0x2d0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800364c:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800364e:	f7fe fef7 	bl	8002440 <HAL_TIM_ConfigClockSource>
 8003652:	b100      	cbz	r0, 8003656 <main+0x25e>
 8003654:	e7fe      	b.n	8003654 <main+0x25c>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003656:	481c      	ldr	r0, [pc, #112]	; (80036c8 <main+0x2d0>)
 8003658:	f7fe fe12 	bl	8002280 <HAL_TIM_PWM_Init>
 800365c:	b100      	cbz	r0, 8003660 <main+0x268>
 800365e:	e7fe      	b.n	800365e <main+0x266>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003660:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003662:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003664:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003666:	4818      	ldr	r0, [pc, #96]	; (80036c8 <main+0x2d0>)
 8003668:	f7fe ffc8 	bl	80025fc <HAL_TIMEx_MasterConfigSynchronization>
 800366c:	4602      	mov	r2, r0
 800366e:	b100      	cbz	r0, 8003672 <main+0x27a>
 8003670:	e7fe      	b.n	8003670 <main+0x278>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003672:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8003674:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003676:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003678:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800367a:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800367c:	4812      	ldr	r0, [pc, #72]	; (80036c8 <main+0x2d0>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800367e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003680:	f7fe ffe2 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 8003684:	b320      	cbz	r0, 80036d0 <main+0x2d8>
 8003686:	e7fe      	b.n	8003686 <main+0x28e>
 8003688:	e000ed00 	.word	0xe000ed00
 800368c:	40023800 	.word	0x40023800
 8003690:	40020000 	.word	0x40020000
 8003694:	40020800 	.word	0x40020800
 8003698:	200005d8 	.word	0x200005d8
 800369c:	50051000 	.word	0x50051000
 80036a0:	20000554 	.word	0x20000554
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	2000069c 	.word	0x2000069c
 80036ac:	40010000 	.word	0x40010000
 80036b0:	200004e4 	.word	0x200004e4
 80036b4:	40004800 	.word	0x40004800
 80036b8:	200006dc 	.word	0x200006dc
 80036bc:	40004c00 	.word	0x40004c00
 80036c0:	2000062c 	.word	0x2000062c
 80036c4:	40011000 	.word	0x40011000
 80036c8:	200004a4 	.word	0x200004a4
 80036cc:	40000800 	.word	0x40000800
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80036d0:	2204      	movs	r2, #4
 80036d2:	a90b      	add	r1, sp, #44	; 0x2c
 80036d4:	480b      	ldr	r0, [pc, #44]	; (8003704 <main+0x30c>)
 80036d6:	f7fe ffb7 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 80036da:	b100      	cbz	r0, 80036de <main+0x2e6>
 80036dc:	e7fe      	b.n	80036dc <main+0x2e4>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80036de:	2208      	movs	r2, #8
 80036e0:	a90b      	add	r1, sp, #44	; 0x2c
 80036e2:	4808      	ldr	r0, [pc, #32]	; (8003704 <main+0x30c>)
 80036e4:	f7fe ffb0 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 80036e8:	b100      	cbz	r0, 80036ec <main+0x2f4>
 80036ea:	e7fe      	b.n	80036ea <main+0x2f2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80036ec:	220c      	movs	r2, #12
 80036ee:	a90b      	add	r1, sp, #44	; 0x2c
 80036f0:	4804      	ldr	r0, [pc, #16]	; (8003704 <main+0x30c>)
 80036f2:	f7fe ffa9 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 80036f6:	b100      	cbz	r0, 80036fa <main+0x302>
 80036f8:	e7fe      	b.n	80036f8 <main+0x300>
  HAL_TIM_MspPostInit(&htim4);
 80036fa:	4802      	ldr	r0, [pc, #8]	; (8003704 <main+0x30c>)
 80036fc:	f000 f90c 	bl	8003918 <HAL_TIM_MspPostInit>
 8003700:	e7fe      	b.n	8003700 <main+0x308>
 8003702:	bf00      	nop
 8003704:	200004a4 	.word	0x200004a4

08003708 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8003708:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 800370a:	2301      	movs	r3, #1
 800370c:	4c05      	ldr	r4, [pc, #20]	; (8003724 <SD_CheckStatus.isra.0+0x1c>)
 800370e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003710:	f7ff fdc2 	bl	8003298 <BSP_SD_GetCardState>
 8003714:	4623      	mov	r3, r4
 8003716:	b918      	cbnz	r0, 8003720 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8003718:	7822      	ldrb	r2, [r4, #0]
 800371a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800371e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8003720:	7818      	ldrb	r0, [r3, #0]
}
 8003722:	bd10      	pop	{r4, pc}
 8003724:	20000008 	.word	0x20000008

08003728 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003728:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800372a:	2301      	movs	r3, #1
 800372c:	4c04      	ldr	r4, [pc, #16]	; (8003740 <SD_initialize+0x18>)
 800372e:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003730:	f7ff fdd0 	bl	80032d4 <BSP_SD_Init>
 8003734:	b910      	cbnz	r0, 800373c <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 8003736:	f7ff ffe7 	bl	8003708 <SD_CheckStatus.isra.0>
 800373a:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800373c:	7820      	ldrb	r0, [r4, #0]
}
 800373e:	bd10      	pop	{r4, pc}
 8003740:	20000008 	.word	0x20000008

08003744 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8003744:	f7ff bfe0 	b.w	8003708 <SD_CheckStatus.isra.0>

08003748 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003748:	b508      	push	{r3, lr}
 800374a:	4608      	mov	r0, r1
 800374c:	4611      	mov	r1, r2
 800374e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	f7ff fd80 	bl	8003258 <BSP_SD_ReadBlocks>
 8003758:	b920      	cbnz	r0, 8003764 <SD_read+0x1c>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800375a:	f7ff fd9d 	bl	8003298 <BSP_SD_GetCardState>
 800375e:	2800      	cmp	r0, #0
 8003760:	d1fb      	bne.n	800375a <SD_read+0x12>
 8003762:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003764:	2001      	movs	r0, #1
}
 8003766:	bd08      	pop	{r3, pc}

08003768 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003768:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <SD_ioctl+0x4c>)
{
 800376a:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800376c:	781b      	ldrb	r3, [r3, #0]
{
 800376e:	b088      	sub	sp, #32
 8003770:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003772:	07db      	lsls	r3, r3, #31
 8003774:	d41b      	bmi.n	80037ae <SD_ioctl+0x46>

  switch (cmd)
 8003776:	2903      	cmp	r1, #3
 8003778:	d803      	bhi.n	8003782 <SD_ioctl+0x1a>
 800377a:	e8df f001 	tbb	[pc, r1]
 800377e:	0510      	.short	0x0510
 8003780:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8003782:	2004      	movs	r0, #4
  }

  return res;
}
 8003784:	b008      	add	sp, #32
 8003786:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8003788:	4668      	mov	r0, sp
 800378a:	f7ff fd8f 	bl	80032ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800378e:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	e004      	b.n	800379e <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8003794:	4668      	mov	r0, sp
 8003796:	f7ff fd89 	bl	80032ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800379a:	9b07      	ldr	r3, [sp, #28]
 800379c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800379e:	2000      	movs	r0, #0
 80037a0:	e7f0      	b.n	8003784 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 80037a2:	4668      	mov	r0, sp
 80037a4:	f7ff fd82 	bl	80032ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80037a8:	9b07      	ldr	r3, [sp, #28]
 80037aa:	0a5b      	lsrs	r3, r3, #9
 80037ac:	e7f0      	b.n	8003790 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80037ae:	2003      	movs	r0, #3
 80037b0:	e7e8      	b.n	8003784 <SD_ioctl+0x1c>
 80037b2:	bf00      	nop
 80037b4:	20000008 	.word	0x20000008

080037b8 <SD_write>:
{
 80037b8:	b508      	push	{r3, lr}
 80037ba:	4608      	mov	r0, r1
 80037bc:	4611      	mov	r1, r2
 80037be:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	f7ff fd58 	bl	8003278 <BSP_SD_WriteBlocks>
 80037c8:	b920      	cbnz	r0, 80037d4 <SD_write+0x1c>
    while(BSP_SD_GetCardState() != MSD_OK)
 80037ca:	f7ff fd65 	bl	8003298 <BSP_SD_GetCardState>
 80037ce:	2800      	cmp	r0, #0
 80037d0:	d1fb      	bne.n	80037ca <SD_write+0x12>
 80037d2:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80037d4:	2001      	movs	r0, #1
}
 80037d6:	bd08      	pop	{r3, pc}

080037d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_MspInit+0x2c>)
{
 80037da:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80037dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40
 80037e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80037ea:	9200      	str	r2, [sp, #0]
 80037ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003800:	b002      	add	sp, #8
 8003802:	4770      	bx	lr
 8003804:	40023800 	.word	0x40023800

08003808 <HAL_JPEG_MspInit>:
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{

  if(hjpeg->Instance==JPEG)
 8003808:	6802      	ldr	r2, [r0, #0]
{
 800380a:	b082      	sub	sp, #8
  if(hjpeg->Instance==JPEG)
 800380c:	4b07      	ldr	r3, [pc, #28]	; (800382c <HAL_JPEG_MspInit+0x24>)
 800380e:	429a      	cmp	r2, r3
 8003810:	d109      	bne.n	8003826 <HAL_JPEG_MspInit+0x1e>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_JPEG_MspInit+0x28>)
 8003814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003816:	f042 0202 	orr.w	r2, r2, #2
 800381a:	635a      	str	r2, [r3, #52]	; 0x34
 800381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8003826:	b002      	add	sp, #8
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	50051000 	.word	0x50051000
 8003830:	40023800 	.word	0x40023800

08003834 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383a:	2214      	movs	r2, #20
 800383c:	2100      	movs	r1, #0
 800383e:	a803      	add	r0, sp, #12
 8003840:	f000 f990 	bl	8003b64 <memset>
  if(hsd->Instance==SDMMC1)
 8003844:	6822      	ldr	r2, [r4, #0]
 8003846:	4b1e      	ldr	r3, [pc, #120]	; (80038c0 <HAL_SD_MspInit+0x8c>)
 8003848:	429a      	cmp	r2, r3
 800384a:	d136      	bne.n	80038ba <HAL_SD_MspInit+0x86>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800384c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003850:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003854:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003858:	eb0d 0104 	add.w	r1, sp, r4
 800385c:	4819      	ldr	r0, [pc, #100]	; (80038c4 <HAL_SD_MspInit+0x90>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800385e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003862:	645a      	str	r2, [r3, #68]	; 0x44
 8003864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003866:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800386a:	9200      	str	r2, [sp, #0]
 800386c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800386e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003870:	f042 0204 	orr.w	r2, r2, #4
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
 8003876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003878:	f002 0204 	and.w	r2, r2, #4
 800387c:	9201      	str	r2, [sp, #4]
 800387e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003882:	f042 0208 	orr.w	r2, r2, #8
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388a:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800388c:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003890:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003892:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003894:	9302      	str	r3, [sp, #8]
 8003896:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8003898:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800389c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800389e:	f7fc ff11 	bl	80006c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038a2:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038a4:	eb0d 0104 	add.w	r1, sp, r4
 80038a8:	4807      	ldr	r0, [pc, #28]	; (80038c8 <HAL_SD_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ac:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80038b4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038b6:	f7fc ff05 	bl	80006c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80038ba:	b008      	add	sp, #32
 80038bc:	bd70      	pop	{r4, r5, r6, pc}
 80038be:	bf00      	nop
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40020800 	.word	0x40020800
 80038c8:	40020c00 	.word	0x40020c00

080038cc <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 80038cc:	6803      	ldr	r3, [r0, #0]
{
 80038ce:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80038d0:	4a0e      	ldr	r2, [pc, #56]	; (800390c <HAL_TIM_Base_MspInit+0x40>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10b      	bne.n	80038ee <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038d6:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <HAL_TIM_Base_MspInit+0x44>)
 80038d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	645a      	str	r2, [r3, #68]	; 0x44
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80038ea:	b002      	add	sp, #8
 80038ec:	4770      	bx	lr
  else if(htim_base->Instance==TIM4)
 80038ee:	4a09      	ldr	r2, [pc, #36]	; (8003914 <HAL_TIM_Base_MspInit+0x48>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d1fa      	bne.n	80038ea <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_TIM_Base_MspInit+0x44>)
 80038f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f8:	f042 0204 	orr.w	r2, r2, #4
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	9b01      	ldr	r3, [sp, #4]
}
 8003908:	e7ef      	b.n	80038ea <HAL_TIM_Base_MspInit+0x1e>
 800390a:	bf00      	nop
 800390c:	40010000 	.word	0x40010000
 8003910:	40023800 	.word	0x40023800
 8003914:	40000800 	.word	0x40000800

08003918 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003918:	b510      	push	{r4, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391e:	2214      	movs	r2, #20
 8003920:	2100      	movs	r1, #0
 8003922:	a801      	add	r0, sp, #4
 8003924:	f000 f91e 	bl	8003b64 <memset>
  if(htim->Instance==TIM4)
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <HAL_TIM_MspPostInit+0x48>)
 800392c:	429a      	cmp	r2, r3
 800392e:	d114      	bne.n	800395a <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003930:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003934:	a901      	add	r1, sp, #4
 8003936:	480b      	ldr	r0, [pc, #44]	; (8003964 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800393a:	f042 0208 	orr.w	r2, r2, #8
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800394a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800394e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003950:	2302      	movs	r3, #2
 8003952:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003954:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003956:	f7fc feb5 	bl	80006c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800395a:	b006      	add	sp, #24
 800395c:	bd10      	pop	{r4, pc}
 800395e:	bf00      	nop
 8003960:	40000800 	.word	0x40000800
 8003964:	40020c00 	.word	0x40020c00

08003968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003968:	b510      	push	{r4, lr}
 800396a:	b08c      	sub	sp, #48	; 0x30
 800396c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396e:	2214      	movs	r2, #20
 8003970:	2100      	movs	r1, #0
 8003972:	a807      	add	r0, sp, #28
 8003974:	f000 f8f6 	bl	8003b64 <memset>
  if(huart->Instance==UART4)
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	4a34      	ldr	r2, [pc, #208]	; (8003a4c <HAL_UART_MspInit+0xe4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d121      	bne.n	80039c4 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003980:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003982:	a907      	add	r1, sp, #28
 8003984:	4833      	ldr	r0, [pc, #204]	; (8003a54 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8003986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003988:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
 800398e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003990:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003994:	9201      	str	r2, [sp, #4]
 8003996:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	9302      	str	r3, [sp, #8]
 80039a8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80039aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80039ae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b4:	2303      	movs	r3, #3
 80039b6:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80039b8:	2306      	movs	r3, #6
 80039ba:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039bc:	f7fc fe82 	bl	80006c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039c0:	b00c      	add	sp, #48	; 0x30
 80039c2:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 80039c4:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <HAL_UART_MspInit+0xf0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d11e      	bne.n	8003a08 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_USART1_CLK_ENABLE();
 80039ca:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <HAL_UART_MspInit+0xe8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039cc:	a907      	add	r1, sp, #28
 80039ce:	4823      	ldr	r0, [pc, #140]	; (8003a5c <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80039d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d2:	f042 0210 	orr.w	r2, r2, #16
 80039d6:	645a      	str	r2, [r3, #68]	; 0x44
 80039d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039da:	f002 0210 	and.w	r2, r2, #16
 80039de:	9203      	str	r2, [sp, #12]
 80039e0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e4:	f042 0202 	orr.w	r2, r2, #2
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80039f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80039f8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fa:	2302      	movs	r3, #2
 80039fc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fe:	2303      	movs	r3, #3
 8003a00:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003a02:	2304      	movs	r3, #4
 8003a04:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a06:	e7d9      	b.n	80039bc <HAL_UART_MspInit+0x54>
  else if(huart->Instance==USART3)
 8003a08:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <HAL_UART_MspInit+0xf8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d1d8      	bne.n	80039c0 <HAL_UART_MspInit+0x58>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_UART_MspInit+0xe8>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a10:	a907      	add	r1, sp, #28
 8003a12:	4814      	ldr	r0, [pc, #80]	; (8003a64 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40
 8003a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003a22:	9205      	str	r2, [sp, #20]
 8003a24:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a28:	f042 0208 	orr.w	r2, r2, #8
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	9306      	str	r3, [sp, #24]
 8003a36:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a3c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a42:	2303      	movs	r3, #3
 8003a44:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a46:	2307      	movs	r3, #7
 8003a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a4a:	e7b7      	b.n	80039bc <HAL_UART_MspInit+0x54>
 8003a4c:	40004c00 	.word	0x40004c00
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40020000 	.word	0x40020000
 8003a58:	40011000 	.word	0x40011000
 8003a5c:	40020400 	.word	0x40020400
 8003a60:	40004800 	.word	0x40004800
 8003a64:	40020c00 	.word	0x40020c00

08003a68 <NMI_Handler>:
 8003a68:	4770      	bx	lr

08003a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a6a:	e7fe      	b.n	8003a6a <HardFault_Handler>

08003a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a6c:	e7fe      	b.n	8003a6c <MemManage_Handler>

08003a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a6e:	e7fe      	b.n	8003a6e <BusFault_Handler>

08003a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a70:	e7fe      	b.n	8003a70 <UsageFault_Handler>

08003a72 <SVC_Handler>:
 8003a72:	4770      	bx	lr

08003a74 <DebugMon_Handler>:
 8003a74:	4770      	bx	lr

08003a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a76:	4770      	bx	lr

08003a78 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a78:	f7fc bda0 	b.w	80005bc <HAL_IncTick>

08003a7c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a7c:	490f      	ldr	r1, [pc, #60]	; (8003abc <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a7e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a80:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <SystemInit+0x44>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003a96:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003a9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003aa4:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <SystemInit+0x48>)
 8003aa6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003aae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003ab0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ab2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ab6:	608b      	str	r3, [r1, #8]
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000ed00 	.word	0xe000ed00
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	24003010 	.word	0x24003010

08003ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003acc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ace:	e003      	b.n	8003ad8 <LoopCopyDataInit>

08003ad0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ad2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ad4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ad6:	3104      	adds	r1, #4

08003ad8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ad8:	480b      	ldr	r0, [pc, #44]	; (8003b08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ada:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003adc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ade:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ae0:	d3f6      	bcc.n	8003ad0 <CopyDataInit>
  ldr  r2, =_sbss
 8003ae2:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ae4:	e002      	b.n	8003aec <LoopFillZerobss>

08003ae6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ae6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ae8:	f842 3b04 	str.w	r3, [r2], #4

08003aec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003aee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003af0:	d3f9      	bcc.n	8003ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003af2:	f7ff ffc3 	bl	8003a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003af6:	f000 f811 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003afa:	f7ff fc7d 	bl	80033f8 <main>
  bx  lr    
 8003afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b00:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003b04:	08003df8 	.word	0x08003df8
  ldr  r0, =_sdata
 8003b08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b0c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8003b10:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8003b14:	2000074c 	.word	0x2000074c

08003b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b18:	e7fe      	b.n	8003b18 <ADC_IRQHandler>
	...

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4e0d      	ldr	r6, [pc, #52]	; (8003b54 <__libc_init_array+0x38>)
 8003b20:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <__libc_init_array+0x3c>)
 8003b22:	1ba4      	subs	r4, r4, r6
 8003b24:	10a4      	asrs	r4, r4, #2
 8003b26:	2500      	movs	r5, #0
 8003b28:	42a5      	cmp	r5, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	4e0b      	ldr	r6, [pc, #44]	; (8003b5c <__libc_init_array+0x40>)
 8003b2e:	4c0c      	ldr	r4, [pc, #48]	; (8003b60 <__libc_init_array+0x44>)
 8003b30:	f000 f820 	bl	8003b74 <_init>
 8003b34:	1ba4      	subs	r4, r4, r6
 8003b36:	10a4      	asrs	r4, r4, #2
 8003b38:	2500      	movs	r5, #0
 8003b3a:	42a5      	cmp	r5, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b44:	4798      	blx	r3
 8003b46:	3501      	adds	r5, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b4e:	4798      	blx	r3
 8003b50:	3501      	adds	r5, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08003df0 	.word	0x08003df0
 8003b58:	08003df0 	.word	0x08003df0
 8003b5c:	08003df0 	.word	0x08003df0
 8003b60:	08003df4 	.word	0x08003df4

08003b64 <memset>:
 8003b64:	4402      	add	r2, r0
 8003b66:	4603      	mov	r3, r0
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d100      	bne.n	8003b6e <memset+0xa>
 8003b6c:	4770      	bx	lr
 8003b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b72:	e7f9      	b.n	8003b68 <memset+0x4>

08003b74 <_init>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr

08003b80 <_fini>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr
